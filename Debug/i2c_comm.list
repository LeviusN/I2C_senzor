
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007ec0  08007ec0  00017ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008304  08008304  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008304  08008304  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008304  08008304  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008304  08008304  00018304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800830c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  200001f0  080084f8  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080084f8  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a28c  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc2  00000000  00000000  0002a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053e1  00000000  00000000  0002d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083f0  00000000  00000000  00032bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079d2b  00000000  00000000  0003afc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4cf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba8  00000000  00000000  000b4d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ea4 	.word	0x08007ea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08007ea4 	.word	0x08007ea4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40010400 	.word	0x40010400

08000c6c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c76:	6a1a      	ldr	r2, [r3, #32]
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	620b      	str	r3, [r1, #32]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4904      	ldr	r1, [pc, #16]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cc2:	6a1a      	ldr	r2, [r3, #32]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4904      	ldr	r1, [pc, #16]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	620b      	str	r3, [r1, #32]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]

}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40010400 	.word	0x40010400

08000d04 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40010400 	.word	0x40010400

08000d28 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40010400 	.word	0x40010400

08000d50 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4904      	ldr	r1, [pc, #16]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010400 	.word	0x40010400

08000d78 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4904      	ldr	r1, [pc, #16]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]

}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40010400 	.word	0x40010400

08000d9c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4904      	ldr	r1, [pc, #16]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	608b      	str	r3, [r1, #8]

}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40010400 	.word	0x40010400

08000de8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4904      	ldr	r1, [pc, #16]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40010400 	.word	0x40010400

08000e10 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e40:	4904      	ldr	r1, [pc, #16]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40010400 	.word	0x40010400

08000e80 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80cd 	beq.w	8001058 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d061      	beq.n	8000f8a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d01c      	beq.n	8000f08 <LL_EXTI_Init+0x60>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	dc25      	bgt.n	8000f1e <LL_EXTI_Init+0x76>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <LL_EXTI_Init+0x34>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d00b      	beq.n	8000ef2 <LL_EXTI_Init+0x4a>
 8000eda:	e020      	b.n	8000f1e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff21 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff feac 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          break;
 8000ef0:	e018      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff feca 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff feed 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f06:	e00d      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe9b 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fee2 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f1c:	e002      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
          break;
 8000f22:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7a9b      	ldrb	r3, [r3, #10]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d02e      	beq.n	8000f8a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7a9b      	ldrb	r3, [r3, #10]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d01c      	beq.n	8000f6e <LL_EXTI_Init+0xc6>
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	dc25      	bgt.n	8000f84 <LL_EXTI_Init+0xdc>
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <LL_EXTI_Init+0x9a>
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d00b      	beq.n	8000f58 <LL_EXTI_Init+0xb0>
 8000f40:	e020      	b.n	8000f84 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff86 	bl	8000e58 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff11 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000f56:	e019      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff2f 	bl	8000dc0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff52 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f6c:	e00e      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff00 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff47 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f82:	e003      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
            break;
 8000f88:	e000      	b.n	8000f8c <LL_EXTI_Init+0xe4>
        }
      }
 8000f8a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d076      	beq.n	8001082 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a5b      	ldrb	r3, [r3, #9]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d01c      	beq.n	8000fd6 <LL_EXTI_Init+0x12e>
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	dc25      	bgt.n	8000fec <LL_EXTI_Init+0x144>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <LL_EXTI_Init+0x102>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d00b      	beq.n	8000fc0 <LL_EXTI_Init+0x118>
 8000fa8:	e020      	b.n	8000fec <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fece 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fe57 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          break;
 8000fbe:	e018      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe77 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe98 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fd4:	e00d      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe46 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe8d 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fea:	e002      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
          break;
 8000ff0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7a9b      	ldrb	r3, [r3, #10]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d043      	beq.n	8001082 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7a9b      	ldrb	r3, [r3, #10]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d01c      	beq.n	800103c <LL_EXTI_Init+0x194>
 8001002:	2b03      	cmp	r3, #3
 8001004:	dc25      	bgt.n	8001052 <LL_EXTI_Init+0x1aa>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d002      	beq.n	8001010 <LL_EXTI_Init+0x168>
 800100a:	2b02      	cmp	r3, #2
 800100c:	d00b      	beq.n	8001026 <LL_EXTI_Init+0x17e>
 800100e:	e020      	b.n	8001052 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff33 	bl	8000e80 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff febc 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001024:	e02e      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fedc 	bl	8000de8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fefd 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800103a:	e023      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff feab 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fef2 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001050:	e018      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
            break;
 8001056:	e015      	b.n	8001084 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe17 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe5e 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe21 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe68 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
 8001080:	e000      	b.n	8001084 <LL_EXTI_Init+0x1dc>
      }
 8001082:	bf00      	nop
#endif
  }
  return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800108e:	b480      	push	{r7}
 8001090:	b089      	sub	sp, #36	; 0x24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3724      	adds	r7, #36	; 0x24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	401a      	ands	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	fb01 f303 	mul.w	r3, r1, r3
 8001106:	431a      	orrs	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	605a      	str	r2, [r3, #4]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	613b      	str	r3, [r7, #16]
  return(result);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2103      	movs	r1, #3
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	61bb      	str	r3, [r7, #24]
  return(result);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001172:	b480      	push	{r7}
 8001174:	b089      	sub	sp, #36	; 0x24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	613b      	str	r3, [r7, #16]
  return(result);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2103      	movs	r1, #3
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	60da      	str	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3724      	adds	r7, #36	; 0x24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	613b      	str	r3, [r7, #16]
  return(result);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	210f      	movs	r1, #15
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	61bb      	str	r3, [r7, #24]
  return(result);
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	431a      	orrs	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001226:	b480      	push	{r7}
 8001228:	b089      	sub	sp, #36	; 0x24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	613b      	str	r3, [r7, #16]
  return(result);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	210f      	movs	r1, #15
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	61bb      	str	r3, [r7, #24]
  return(result);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001278:	bf00      	nop
 800127a:	3724      	adds	r7, #36	; 0x24
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	613b      	str	r3, [r7, #16]
  return(result);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012ac:	e048      	b.n	8001340 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03a      	beq.n	800133a <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	461a      	mov	r2, r3
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fede 	bl	800108e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d003      	beq.n	80012e2 <LL_GPIO_Init+0x5e>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d106      	bne.n	80012f0 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	461a      	mov	r2, r3
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff14 	bl	8001118 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff3a 	bl	8001172 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d119      	bne.n	800133a <LL_GPIO_Init+0xb6>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	60bb      	str	r3, [r7, #8]
  return(result);
 8001312:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	2b07      	cmp	r3, #7
 800131a:	d807      	bhi.n	800132c <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	461a      	mov	r2, r3
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff51 	bl	80011cc <LL_GPIO_SetAFPin_0_7>
 800132a:	e006      	b.n	800133a <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	461a      	mov	r2, r3
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff76 	bl	8001226 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1af      	bne.n	80012ae <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d003      	beq.n	800135e <LL_GPIO_Init+0xda>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d107      	bne.n	800136e <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6819      	ldr	r1, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	461a      	mov	r2, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff febd 	bl	80010e8 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 0201 	bic.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0219      	lsls	r1, r3, #8
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	430b      	orrs	r3, r1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013fa:	f023 0307 	bic.w	r3, r3, #7
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	430a      	orrs	r2, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	605a      	str	r2, [r3, #4]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff65 	bl	8001398 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	461a      	mov	r2, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff6d 	bl	80013b8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffb6 	bl	8001456 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff44 	bl	8001378 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffa0 	bl	8001436 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6919      	ldr	r1, [r3, #16]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	461a      	mov	r2, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff70 	bl	80013e6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff81 	bl	8001416 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa9 	bl	8001472 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffb6 	bl	8001498 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	615a      	str	r2, [r3, #20]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <LL_TIM_Init+0xd4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <LL_TIM_Init+0x2c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001676:	d003      	beq.n	8001680 <LL_TIM_Init+0x2c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a2c      	ldr	r2, [pc, #176]	; (800172c <LL_TIM_Init+0xd8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d106      	bne.n	800168e <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a25      	ldr	r2, [pc, #148]	; (8001728 <LL_TIM_Init+0xd4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <LL_TIM_Init+0x6a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169c:	d00f      	beq.n	80016be <LL_TIM_Init+0x6a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <LL_TIM_Init+0xd8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00b      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <LL_TIM_Init+0xdc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <LL_TIM_Init+0xe0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d003      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <LL_TIM_Init+0xe4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d106      	bne.n	80016cc <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff3a 	bl	8001552 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff26 	bl	8001536 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LL_TIM_Init+0xd4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00b      	beq.n	800170a <LL_TIM_Init+0xb6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LL_TIM_Init+0xdc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <LL_TIM_Init+0xb6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LL_TIM_Init+0xe0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d003      	beq.n	800170a <LL_TIM_Init+0xb6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <LL_TIM_Init+0xe4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d105      	bne.n	8001716 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	7c1b      	ldrb	r3, [r3, #16]
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff2c 	bl	800156e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff8b 	bl	8001632 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40012c00 	.word	0x40012c00
 800172c:	40000400 	.word	0x40000400
 8001730:	40014000 	.word	0x40014000
 8001734:	40014400 	.word	0x40014400
 8001738:	40014800 	.word	0x40014800

0800173c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001752:	d045      	beq.n	80017e0 <LL_TIM_OC_Init+0xa4>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800175a:	d848      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d036      	beq.n	80017d2 <LL_TIM_OC_Init+0x96>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d840      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001772:	d027      	beq.n	80017c4 <LL_TIM_OC_Init+0x88>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177a:	d838      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001782:	d018      	beq.n	80017b6 <LL_TIM_OC_Init+0x7a>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800178a:	d830      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <LL_TIM_OC_Init+0x5e>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d007      	beq.n	80017a8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001798:	e029      	b.n	80017ee <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f82d 	bl	80017fc <OC1Config>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
      break;
 80017a6:	e023      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f8a6 	bl	80018fc <OC2Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	75fb      	strb	r3, [r7, #23]
      break;
 80017b4:	e01c      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f923 	bl	8001a04 <OC3Config>
 80017be:	4603      	mov	r3, r0
 80017c0:	75fb      	strb	r3, [r7, #23]
      break;
 80017c2:	e015      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9a0 	bl	8001b0c <OC4Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
      break;
 80017d0:	e00e      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fa05 	bl	8001be4 <OC5Config>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
      break;
 80017de:	e007      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa60 	bl	8001ca8 <OC6Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
      break;
 80017ec:	e000      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      break;
 80017ee:	bf00      	nop
  }

  return result;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f023 0201 	bic.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f023 0202 	bic.w	r2, r3, #2
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f023 0201 	bic.w	r2, r3, #1
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <OC1Config+0xf0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00b      	beq.n	8001886 <OC1Config+0x8a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <OC1Config+0xf4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <OC1Config+0x8a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <OC1Config+0xf8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d003      	beq.n	8001886 <OC1Config+0x8a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <OC1Config+0xfc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d11e      	bne.n	80018c4 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f023 0208 	bic.w	r2, r3, #8
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f023 0204 	bic.w	r2, r3, #4
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe57 	bl	800158a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40014000 	.word	0x40014000
 80018f4:	40014400 	.word	0x40014400
 80018f8:	40014800 	.word	0x40014800

080018fc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	f023 0210 	bic.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	0212      	lsls	r2, r2, #8
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f023 0220 	bic.w	r2, r3, #32
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f023 0210 	bic.w	r2, r3, #16
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <OC2Config+0xf8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00b      	beq.n	800198c <OC2Config+0x90>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <OC2Config+0xfc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <OC2Config+0x90>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <OC2Config+0x100>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d003      	beq.n	800198c <OC2Config+0x90>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <OC2Config+0x104>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d11f      	bne.n	80019cc <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	019b      	lsls	r3, r3, #6
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	019b      	lsls	r3, r3, #6
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fde1 	bl	80015a6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40014000 	.word	0x40014000
 80019fc:	40014400 	.word	0x40014400
 8001a00:	40014800 	.word	0x40014800

08001a04 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <OC3Config+0xf8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00b      	beq.n	8001a92 <OC3Config+0x8e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <OC3Config+0xfc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <OC3Config+0x8e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <OC3Config+0x100>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <OC3Config+0x8e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <OC3Config+0x104>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11f      	bne.n	8001ad2 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	029b      	lsls	r3, r3, #10
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	015b      	lsls	r3, r3, #5
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fd6c 	bl	80015c2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40014000 	.word	0x40014000
 8001b04:	40014400 	.word	0x40014400
 8001b08:	40014800 	.word	0x40014800

08001b0c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	031b      	lsls	r3, r3, #12
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	031b      	lsls	r3, r3, #12
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <OC4Config+0xc8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <OC4Config+0x90>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <OC4Config+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <OC4Config+0x90>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <OC4Config+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <OC4Config+0x90>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <OC4Config+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d107      	bne.n	8001bac <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fd0d 	bl	80015de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40014000 	.word	0x40014000
 8001bdc:	40014400 	.word	0x40014400
 8001be0:	40014800 	.word	0x40014800

08001be4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <OC5Config+0xb4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00b      	beq.n	8001c60 <OC5Config+0x7c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <OC5Config+0xb8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <OC5Config+0x7c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <OC5Config+0xbc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d003      	beq.n	8001c60 <OC5Config+0x7c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <OC5Config+0xc0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d109      	bne.n	8001c74 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fcba 	bl	80015fa <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40014000 	.word	0x40014000
 8001ca0:	40014400 	.word	0x40014400
 8001ca4:	40014800 	.word	0x40014800

08001ca8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	0212      	lsls	r2, r2, #8
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	051b      	lsls	r3, r3, #20
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <OC6Config+0xb4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00b      	beq.n	8001d26 <OC6Config+0x7e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <OC6Config+0xb8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <OC6Config+0x7e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <OC6Config+0xbc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d003      	beq.n	8001d26 <OC6Config+0x7e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <OC6Config+0xc0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d109      	bne.n	8001d3a <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fc65 	bl	8001616 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	40014800 	.word	0x40014800

08001d6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <LL_InitTick+0x30>)
 8001d80:	3b01      	subs	r3, #1
 8001d82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LL_InitTick+0x30>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <LL_InitTick+0x30>)
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001da8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffdd 	bl	8001d6c <LL_InitTick>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <LL_mDelay+0x48>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001dca:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd2:	d00c      	beq.n	8001dee <LL_mDelay+0x32>
  {
    Delay++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001dda:	e008      	b.n	8001dee <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <LL_mDelay+0x48>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <LL_mDelay+0x32>
    {
      Delay--;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f3      	bne.n	8001ddc <LL_mDelay+0x20>
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <LL_SetSystemCoreClock+0x1c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000010 	.word	0x20000010

08001e28 <LL_TIM_ClearFlag_UPDATE>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f06f 0201 	mvn.w	r2, #1
 8001e36:	611a      	str	r2, [r3, #16]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <resetSegments>:
void updateDisplay(char data[]);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eae:	f7ff ffdc 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f7ff ffd7 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec4:	f7ff ffd1 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001ec8:	2120      	movs	r1, #32
 8001eca:	480c      	ldr	r0, [pc, #48]	; (8001efc <resetSegments+0x58>)
 8001ecc:	f7ff ffcd 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed8:	f7ff ffc7 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001edc:	2108      	movs	r1, #8
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee2:	f7ff ffc2 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <resetSegments+0x58>)
 8001eea:	f7ff ffbe 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <resetSegments+0x58>)
 8001ef2:	f7ff ffba 	bl	8001e6a <LL_GPIO_SetOutputPin>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	48000400 	.word	0x48000400

08001f00 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001f04:	2102      	movs	r1, #2
 8001f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0a:	f7ff ffbc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001f0e:	2101      	movs	r1, #1
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f14:	f7ff ffb7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f7ff ffb1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001f24:	2120      	movs	r1, #32
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <setSegments+0x58>)
 8001f28:	f7ff ffad 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f7ff ffa7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001f38:	2108      	movs	r1, #8
 8001f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3e:	f7ff ffa2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001f42:	2110      	movs	r1, #16
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <setSegments+0x58>)
 8001f46:	f7ff ff9e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <setSegments+0x58>)
 8001f4e:	f7ff ff9a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	48000400 	.word	0x48000400

08001f5c <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001f60:	2101      	movs	r1, #1
 8001f62:	480d      	ldr	r0, [pc, #52]	; (8001f98 <resetDigits+0x3c>)
 8001f64:	f7ff ff8f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001f68:	2110      	movs	r1, #16
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f7ff ff8a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8001f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7a:	f7ff ff84 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001f7e:	2104      	movs	r1, #4
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f7ff ff7f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f7ff ff7a 	bl	8001e86 <LL_GPIO_ResetOutputPin>

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	48000400 	.word	0x48000400

08001f9c <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <setDigits+0x3c>)
 8001fa4:	f7ff ff61 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8001fa8:	2110      	movs	r1, #16
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fae:	f7ff ff5c 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8001fb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f7ff ff56 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc4:	f7ff ff51 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f7ff ff4c 	bl	8001e6a <LL_GPIO_SetOutputPin>
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	48000400 	.word	0x48000400

08001fdc <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe6:	f7ff ff4e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff2:	f7ff ff48 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <setTwo>:

void setTwo(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002000:	2101      	movs	r1, #1
 8002002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002006:	f7ff ff3e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800200a:	2102      	movs	r1, #2
 800200c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002010:	f7ff ff39 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002014:	2110      	movs	r1, #16
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <setTwo+0x38>)
 8002018:	f7ff ff35 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800201c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002024:	f7ff ff2f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002028:	2120      	movs	r1, #32
 800202a:	4802      	ldr	r0, [pc, #8]	; (8002034 <setTwo+0x38>)
 800202c:	f7ff ff2b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	48000400 	.word	0x48000400

08002038 <setThree>:

void setThree(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800203c:	2101      	movs	r1, #1
 800203e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002042:	f7ff ff20 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002046:	2102      	movs	r1, #2
 8002048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204c:	f7ff ff1b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002050:	2110      	movs	r1, #16
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <setThree+0x38>)
 8002054:	f7ff ff17 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f7ff ff11 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002064:	2120      	movs	r1, #32
 8002066:	4802      	ldr	r0, [pc, #8]	; (8002070 <setThree+0x38>)
 8002068:	f7ff ff0d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	48000400 	.word	0x48000400

08002074 <setFour>:

void setFour(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002078:	2108      	movs	r1, #8
 800207a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207e:	f7ff ff02 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002082:	2101      	movs	r1, #1
 8002084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002088:	f7ff fefd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800208c:	2110      	movs	r1, #16
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <setFour+0x30>)
 8002090:	f7ff fef9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f7ff fef3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	48000400 	.word	0x48000400

080020a8 <setFive>:

void setFive(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020ac:	2108      	movs	r1, #8
 80020ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b2:	f7ff fee8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020b6:	2120      	movs	r1, #32
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <setFive+0x38>)
 80020ba:	f7ff fee4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020be:	2110      	movs	r1, #16
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <setFive+0x38>)
 80020c2:	f7ff fee0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ce:	f7ff feda 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80020d2:	2102      	movs	r1, #2
 80020d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d8:	f7ff fed5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	48000400 	.word	0x48000400

080020e4 <setSix>:

void setSix(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020e8:	2108      	movs	r1, #8
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f7ff feca 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020f2:	2120      	movs	r1, #32
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <setSix+0x44>)
 80020f6:	f7ff fec6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020fa:	2110      	movs	r1, #16
 80020fc:	480a      	ldr	r0, [pc, #40]	; (8002128 <setSix+0x44>)
 80020fe:	f7ff fec2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f7ff febc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800210e:	2102      	movs	r1, #2
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f7ff feb7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f7ff feb1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	48000400 	.word	0x48000400

0800212c <setSeven>:

void setSeven(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002130:	2101      	movs	r1, #1
 8002132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002136:	f7ff fea6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800213a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002142:	f7ff fea0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002146:	2102      	movs	r1, #2
 8002148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214c:	f7ff fe9b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <setEight>:

void setEight(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002158:	2108      	movs	r1, #8
 800215a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215e:	f7ff fe92 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002162:	2120      	movs	r1, #32
 8002164:	480f      	ldr	r0, [pc, #60]	; (80021a4 <setEight+0x50>)
 8002166:	f7ff fe8e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800216a:	2110      	movs	r1, #16
 800216c:	480d      	ldr	r0, [pc, #52]	; (80021a4 <setEight+0x50>)
 800216e:	f7ff fe8a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217a:	f7ff fe84 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800217e:	2102      	movs	r1, #2
 8002180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002184:	f7ff fe7f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800218c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002190:	f7ff fe79 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002194:	2101      	movs	r1, #1
 8002196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219a:	f7ff fe74 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	48000400 	.word	0x48000400

080021a8 <setNine>:

void setNine(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021ac:	2101      	movs	r1, #1
 80021ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b2:	f7ff fe68 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80021b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021be:	f7ff fe62 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80021c2:	2102      	movs	r1, #2
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c8:	f7ff fe5d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021cc:	2110      	movs	r1, #16
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <setNine+0x3c>)
 80021d0:	f7ff fe59 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021d4:	2108      	movs	r1, #8
 80021d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021da:	f7ff fe54 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	48000400 	.word	0x48000400

080021e8 <setZero>:

void setZero(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021ec:	2108      	movs	r1, #8
 80021ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f2:	f7ff fe48 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80021f6:	2120      	movs	r1, #32
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <setZero+0x48>)
 80021fa:	f7ff fe44 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80021fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f7ff fe3e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800220a:	2102      	movs	r1, #2
 800220c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002210:	f7ff fe39 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221c:	f7ff fe33 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002220:	2101      	movs	r1, #1
 8002222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002226:	f7ff fe2e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	48000400 	.word	0x48000400

08002234 <setA>:

////////

void setA(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002238:	2108      	movs	r1, #8
 800223a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223e:	f7ff fe22 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002242:	2110      	movs	r1, #16
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <setA+0x48>)
 8002246:	f7ff fe1e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800224a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002252:	f7ff fe18 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002256:	2102      	movs	r1, #2
 8002258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225c:	f7ff fe13 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002268:	f7ff fe0d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800226c:	2101      	movs	r1, #1
 800226e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002272:	f7ff fe08 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	48000400 	.word	0x48000400

08002280 <setB>:
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
}

void setB(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	// C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002284:	2108      	movs	r1, #8
 8002286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228a:	f7ff fdfc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800228e:	2110      	movs	r1, #16
 8002290:	480a      	ldr	r0, [pc, #40]	; (80022bc <setB+0x3c>)
 8002292:	f7ff fdf8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800229a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229e:	f7ff fdf2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80022a2:	2120      	movs	r1, #32
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <setB+0x3c>)
 80022a6:	f7ff fdee 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b2:	f7ff fde8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	48000400 	.word	0x48000400

080022c0 <setC>:

void setC(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80022c4:	2108      	movs	r1, #8
 80022c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ca:	f7ff fddc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80022ce:	2102      	movs	r1, #2
 80022d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d4:	f7ff fdd7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e0:	f7ff fdd1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80022e4:	2120      	movs	r1, #32
 80022e6:	4802      	ldr	r0, [pc, #8]	; (80022f0 <setC+0x30>)
 80022e8:	f7ff fdcd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	48000400 	.word	0x48000400

080022f4 <setD>:
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
}

void setD(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80022f8:	2101      	movs	r1, #1
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fe:	f7ff fdc2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230a:	f7ff fdbc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800230e:	2110      	movs	r1, #16
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <setD+0x3c>)
 8002312:	f7ff fdb8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231e:	f7ff fdb2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002322:	2120      	movs	r1, #32
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <setD+0x3c>)
 8002326:	f7ff fdae 	bl	8001e86 <LL_GPIO_ResetOutputPin>

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	48000400 	.word	0x48000400

08002334 <setE>:

void setE(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002338:	2102      	movs	r1, #2
 800233a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233e:	f7ff fda2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002342:	2120      	movs	r1, #32
 8002344:	4809      	ldr	r0, [pc, #36]	; (800236c <setE+0x38>)
 8002346:	f7ff fd9e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800234a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800234e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002352:	f7ff fd98 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002356:	2108      	movs	r1, #8
 8002358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235c:	f7ff fd93 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002360:	2110      	movs	r1, #16
 8002362:	4802      	ldr	r0, [pc, #8]	; (800236c <setE+0x38>)
 8002364:	f7ff fd8f 	bl	8001e86 <LL_GPIO_ResetOutputPin>

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	48000400 	.word	0x48000400

08002370 <setF>:

void setF(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002374:	2102      	movs	r1, #2
 8002376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237a:	f7ff fd84 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800237e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002386:	f7ff fd7e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800238a:	2108      	movs	r1, #8
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f7ff fd79 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002394:	2110      	movs	r1, #16
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <setF+0x30>)
 8002398:	f7ff fd75 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	48000400 	.word	0x48000400

080023a4 <setG>:

void setG(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80023a8:	2102      	movs	r1, #2
 80023aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ae:	f7ff fd6a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80023b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ba:	f7ff fd64 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80023be:	2120      	movs	r1, #32
 80023c0:	4807      	ldr	r0, [pc, #28]	; (80023e0 <setG+0x3c>)
 80023c2:	f7ff fd60 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80023c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ce:	f7ff fd5a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80023d2:	2108      	movs	r1, #8
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d8:	f7ff fd55 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	48000400 	.word	0x48000400

080023e4 <setH>:

void setH(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80023e8:	2101      	movs	r1, #1
 80023ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ee:	f7ff fd4a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80023f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fa:	f7ff fd44 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80023fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002406:	f7ff fd3e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800240a:	2108      	movs	r1, #8
 800240c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002410:	f7ff fd39 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002414:	2110      	movs	r1, #16
 8002416:	4802      	ldr	r0, [pc, #8]	; (8002420 <setH+0x3c>)
 8002418:	f7ff fd35 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	48000400 	.word	0x48000400

08002424 <setI>:
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}

void setI(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800242c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002430:	f7ff fd29 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002434:	2108      	movs	r1, #8
 8002436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243a:	f7ff fd24 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <setJ>:

void setJ(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002448:	2101      	movs	r1, #1
 800244a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244e:	f7ff fd1a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245a:	f7ff fd14 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800245e:	2120      	movs	r1, #32
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <setJ+0x34>)
 8002462:	f7ff fd10 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800246a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246e:	f7ff fd0a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	48000400 	.word	0x48000400

0800247c <setL>:

void setL(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002480:	2120      	movs	r1, #32
 8002482:	4808      	ldr	r0, [pc, #32]	; (80024a4 <setL+0x28>)
 8002484:	f7ff fcff 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002490:	f7ff fcf9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002494:	2108      	movs	r1, #8
 8002496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800249a:	f7ff fcf4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	48000400 	.word	0x48000400

080024a8 <setN>:

void setN(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80024ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b4:	f7ff fce7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80024b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c0:	f7ff fce1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80024c4:	2110      	movs	r1, #16
 80024c6:	4802      	ldr	r0, [pc, #8]	; (80024d0 <setN+0x28>)
 80024c8:	f7ff fcdd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	48000400 	.word	0x48000400

080024d4 <setO>:

void setO(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80024d8:	2102      	movs	r1, #2
 80024da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024de:	f7ff fcd2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80024e2:	2101      	movs	r1, #1
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e8:	f7ff fccd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80024ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f4:	f7ff fcc7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80024f8:	2120      	movs	r1, #32
 80024fa:	4808      	ldr	r0, [pc, #32]	; (800251c <setO+0x48>)
 80024fc:	f7ff fcc3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002508:	f7ff fcbd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800250c:	2108      	movs	r1, #8
 800250e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002512:	f7ff fcb8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	48000400 	.word	0x48000400

08002520 <setP>:
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}

void setP(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002524:	2102      	movs	r1, #2
 8002526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252a:	f7ff fcac 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800252e:	2101      	movs	r1, #1
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f7ff fca7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002538:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800253c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002540:	f7ff fca1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002544:	2108      	movs	r1, #8
 8002546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254a:	f7ff fc9c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800254e:	2110      	movs	r1, #16
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <setP+0x3c>)
 8002552:	f7ff fc98 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	48000400 	.word	0x48000400

08002560 <setQ>:

void setQ(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002564:	2102      	movs	r1, #2
 8002566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256a:	f7ff fc8c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800256e:	2101      	movs	r1, #1
 8002570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002574:	f7ff fc87 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800257c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002580:	f7ff fc81 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002584:	2108      	movs	r1, #8
 8002586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258a:	f7ff fc7c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800258e:	2110      	movs	r1, #16
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <setQ+0x3c>)
 8002592:	f7ff fc78 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	48000400 	.word	0x48000400

080025a0 <setR>:

void setR(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80025a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f7ff fc6b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80025b0:	2110      	movs	r1, #16
 80025b2:	4802      	ldr	r0, [pc, #8]	; (80025bc <setR+0x1c>)
 80025b4:	f7ff fc67 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	48000400 	.word	0x48000400

080025c0 <setS>:

void setS(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80025c4:	2102      	movs	r1, #2
 80025c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ca:	f7ff fc5c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80025ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d6:	f7ff fc56 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80025da:	2120      	movs	r1, #32
 80025dc:	4806      	ldr	r0, [pc, #24]	; (80025f8 <setS+0x38>)
 80025de:	f7ff fc52 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80025e2:	2108      	movs	r1, #8
 80025e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e8:	f7ff fc4d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80025ec:	2110      	movs	r1, #16
 80025ee:	4802      	ldr	r0, [pc, #8]	; (80025f8 <setS+0x38>)
 80025f0:	f7ff fc49 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	48000400 	.word	0x48000400

080025fc <setT>:

void setT(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002600:	2120      	movs	r1, #32
 8002602:	480a      	ldr	r0, [pc, #40]	; (800262c <setT+0x30>)
 8002604:	f7ff fc3f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800260c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002610:	f7ff fc39 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002614:	2108      	movs	r1, #8
 8002616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261a:	f7ff fc34 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800261e:	2110      	movs	r1, #16
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <setT+0x30>)
 8002622:	f7ff fc30 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	48000400 	.word	0x48000400

08002630 <setU>:

void setU(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002634:	2101      	movs	r1, #1
 8002636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263a:	f7ff fc24 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800263e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002646:	f7ff fc1e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800264a:	2120      	movs	r1, #32
 800264c:	4807      	ldr	r0, [pc, #28]	; (800266c <setU+0x3c>)
 800264e:	f7ff fc1a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002652:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800265a:	f7ff fc14 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800265e:	2108      	movs	r1, #8
 8002660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002664:	f7ff fc0f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	48000400 	.word	0x48000400

08002670 <setY>:
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
}

void setY(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002674:	2101      	movs	r1, #1
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f7ff fc04 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800267e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002686:	f7ff fbfe 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800268a:	2120      	movs	r1, #32
 800268c:	4806      	ldr	r0, [pc, #24]	; (80026a8 <setY+0x38>)
 800268e:	f7ff fbfa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002692:	2108      	movs	r1, #8
 8002694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002698:	f7ff fbf5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800269c:	2110      	movs	r1, #16
 800269e:	4802      	ldr	r0, [pc, #8]	; (80026a8 <setY+0x38>)
 80026a0:	f7ff fbf1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	48000400 	.word	0x48000400

080026ac <setK>:

void setK(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80026b0:	2102      	movs	r1, #2
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b6:	f7ff fbe6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80026ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c2:	f7ff fbe0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80026c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ce:	f7ff fbda 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80026d2:	2108      	movs	r1, #8
 80026d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d8:	f7ff fbd5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80026dc:	2110      	movs	r1, #16
 80026de:	4802      	ldr	r0, [pc, #8]	; (80026e8 <setK+0x3c>)
 80026e0:	f7ff fbd1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	48000400 	.word	0x48000400

080026ec <setM>:

void setM(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80026f0:	2102      	movs	r1, #2
 80026f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f6:	f7ff fbc6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80026fa:	2101      	movs	r1, #1
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002700:	f7ff fbc1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002704:	2120      	movs	r1, #32
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <setM+0x30>)
 8002708:	f7ff fbbd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800270c:	2108      	movs	r1, #8
 800270e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002712:	f7ff fbb8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	48000400 	.word	0x48000400

08002720 <setV>:

void setV(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002724:	2101      	movs	r1, #1
 8002726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272a:	f7ff fbac 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800272e:	2120      	movs	r1, #32
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <setV+0x24>)
 8002732:	f7ff fba8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002736:	2108      	movs	r1, #8
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f7ff fba3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	48000400 	.word	0x48000400

08002748 <setW>:

void setW(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800274c:	2101      	movs	r1, #1
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f7ff fb98 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800275a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275e:	f7ff fb92 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002762:	2120      	movs	r1, #32
 8002764:	4809      	ldr	r0, [pc, #36]	; (800278c <setW+0x44>)
 8002766:	f7ff fb8e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800276a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800276e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002772:	f7ff fb88 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002776:	2108      	movs	r1, #8
 8002778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277c:	f7ff fb83 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002780:	2110      	movs	r1, #16
 8002782:	4802      	ldr	r0, [pc, #8]	; (800278c <setW+0x44>)
 8002784:	f7ff fb7f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	48000400 	.word	0x48000400

08002790 <setX>:

void setX(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002794:	2102      	movs	r1, #2
 8002796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279a:	f7ff fb74 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800279e:	2120      	movs	r1, #32
 80027a0:	4804      	ldr	r0, [pc, #16]	; (80027b4 <setX+0x24>)
 80027a2:	f7ff fb70 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80027a6:	2110      	movs	r1, #16
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <setX+0x24>)
 80027aa:	f7ff fb6c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	48000400 	.word	0x48000400

080027b8 <setZ>:

void setZ(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80027bc:	2102      	movs	r1, #2
 80027be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c2:	f7ff fb60 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80027c6:	2101      	movs	r1, #1
 80027c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027cc:	f7ff fb5b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80027d0:	2120      	movs	r1, #32
 80027d2:	4807      	ldr	r0, [pc, #28]	; (80027f0 <setZ+0x38>)
 80027d4:	f7ff fb57 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80027d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e0:	f7ff fb51 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80027e4:	2110      	movs	r1, #16
 80027e6:	4802      	ldr	r0, [pc, #8]	; (80027f0 <setZ+0x38>)
 80027e8:	f7ff fb4d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	48000400 	.word	0x48000400

080027f4 <setUnderscore>:

void setUnderscore(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80027f8:	2120      	movs	r1, #32
 80027fa:	4802      	ldr	r0, [pc, #8]	; (8002804 <setUnderscore+0x10>)
 80027fc:	f7ff fb43 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	48000400 	.word	0x48000400

08002808 <setDecimalPoint>:

void setDecimalPoint(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 800280c:	2102      	movs	r1, #2
 800280e:	4802      	ldr	r0, [pc, #8]	; (8002818 <setDecimalPoint+0x10>)
 8002810:	f7ff fb39 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	48000400 	.word	0x48000400

0800281c <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]

	switch(pos)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d823      	bhi.n	8002874 <setDigit+0x58>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <setDigit+0x18>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	08002851 	.word	0x08002851
 800283c:	0800285f 	.word	0x0800285f
 8002840:	0800286b 	.word	0x0800286b
	{
		case 0:
			DIGIT_4_ON;
 8002844:	2104      	movs	r1, #4
 8002846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284a:	f7ff fb0e 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 800284e:	e011      	b.n	8002874 <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 8002850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002858:	f7ff fb07 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 800285c:	e00a      	b.n	8002874 <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 800285e:	2110      	movs	r1, #16
 8002860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002864:	f7ff fb01 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 8002868:	e004      	b.n	8002874 <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 800286a:	2101      	movs	r1, #1
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <setDigit+0x60>)
 800286e:	f7ff fafc 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 8002872:	bf00      	nop
	}
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	48000400 	.word	0x48000400

08002880 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(char data[])
{
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 4; i++)
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e1c5      	b.n	8002c1a <updateDisplay+0x39a>
	{
		switch(data[i])
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	3b30      	subs	r3, #48	; 0x30
 8002898:	2b4a      	cmp	r3, #74	; 0x4a
 800289a:	f200 819c 	bhi.w	8002bd6 <updateDisplay+0x356>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <updateDisplay+0x24>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	080029d1 	.word	0x080029d1
 80028a8:	080029df 	.word	0x080029df
 80028ac:	080029ed 	.word	0x080029ed
 80028b0:	080029fb 	.word	0x080029fb
 80028b4:	08002a09 	.word	0x08002a09
 80028b8:	08002a17 	.word	0x08002a17
 80028bc:	08002a25 	.word	0x08002a25
 80028c0:	08002a33 	.word	0x08002a33
 80028c4:	08002a41 	.word	0x08002a41
 80028c8:	08002a4f 	.word	0x08002a4f
 80028cc:	08002bd7 	.word	0x08002bd7
 80028d0:	08002bd7 	.word	0x08002bd7
 80028d4:	08002bd7 	.word	0x08002bd7
 80028d8:	08002bd7 	.word	0x08002bd7
 80028dc:	08002bd7 	.word	0x08002bd7
 80028e0:	08002bd7 	.word	0x08002bd7
 80028e4:	08002bd7 	.word	0x08002bd7
 80028e8:	08002a6b 	.word	0x08002a6b
 80028ec:	08002a79 	.word	0x08002a79
 80028f0:	08002a87 	.word	0x08002a87
 80028f4:	08002a95 	.word	0x08002a95
 80028f8:	08002aa3 	.word	0x08002aa3
 80028fc:	08002ab1 	.word	0x08002ab1
 8002900:	08002abf 	.word	0x08002abf
 8002904:	08002acd 	.word	0x08002acd
 8002908:	08002adb 	.word	0x08002adb
 800290c:	08002ae9 	.word	0x08002ae9
 8002910:	08002af7 	.word	0x08002af7
 8002914:	08002b05 	.word	0x08002b05
 8002918:	08002b13 	.word	0x08002b13
 800291c:	08002b21 	.word	0x08002b21
 8002920:	08002b2f 	.word	0x08002b2f
 8002924:	08002b3d 	.word	0x08002b3d
 8002928:	08002b4b 	.word	0x08002b4b
 800292c:	08002b59 	.word	0x08002b59
 8002930:	08002b67 	.word	0x08002b67
 8002934:	08002b75 	.word	0x08002b75
 8002938:	08002b83 	.word	0x08002b83
 800293c:	08002b91 	.word	0x08002b91
 8002940:	08002b9f 	.word	0x08002b9f
 8002944:	08002bad 	.word	0x08002bad
 8002948:	08002bbb 	.word	0x08002bbb
 800294c:	08002bc9 	.word	0x08002bc9
 8002950:	08002bd7 	.word	0x08002bd7
 8002954:	08002bd7 	.word	0x08002bd7
 8002958:	08002bd7 	.word	0x08002bd7
 800295c:	08002bd7 	.word	0x08002bd7
 8002960:	08002a5d 	.word	0x08002a5d
 8002964:	08002bd7 	.word	0x08002bd7
 8002968:	08002a6b 	.word	0x08002a6b
 800296c:	08002a79 	.word	0x08002a79
 8002970:	08002a87 	.word	0x08002a87
 8002974:	08002a95 	.word	0x08002a95
 8002978:	08002aa3 	.word	0x08002aa3
 800297c:	08002ab1 	.word	0x08002ab1
 8002980:	08002abf 	.word	0x08002abf
 8002984:	08002acd 	.word	0x08002acd
 8002988:	08002adb 	.word	0x08002adb
 800298c:	08002ae9 	.word	0x08002ae9
 8002990:	08002af7 	.word	0x08002af7
 8002994:	08002b05 	.word	0x08002b05
 8002998:	08002b13 	.word	0x08002b13
 800299c:	08002b21 	.word	0x08002b21
 80029a0:	08002b2f 	.word	0x08002b2f
 80029a4:	08002b3d 	.word	0x08002b3d
 80029a8:	08002b4b 	.word	0x08002b4b
 80029ac:	08002b59 	.word	0x08002b59
 80029b0:	08002b67 	.word	0x08002b67
 80029b4:	08002b75 	.word	0x08002b75
 80029b8:	08002b83 	.word	0x08002b83
 80029bc:	08002b91 	.word	0x08002b91
 80029c0:	08002b9f 	.word	0x08002b9f
 80029c4:	08002bad 	.word	0x08002bad
 80029c8:	08002bbb 	.word	0x08002bbb
 80029cc:	08002bc9 	.word	0x08002bc9
		{
		case '0':
		  setDigit(i);
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff22 	bl	800281c <setDigit>
		  setZero();
 80029d8:	f7ff fc06 	bl	80021e8 <setZero>
		  break;
 80029dc:	e0fb      	b.n	8002bd6 <updateDisplay+0x356>
		case '1':
		  setDigit(i);
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff1b 	bl	800281c <setDigit>
		  setOne();
 80029e6:	f7ff faf9 	bl	8001fdc <setOne>
		  break;
 80029ea:	e0f4      	b.n	8002bd6 <updateDisplay+0x356>
		case '2':
		  setDigit(i);
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff14 	bl	800281c <setDigit>
		  setTwo();
 80029f4:	f7ff fb02 	bl	8001ffc <setTwo>
		  break;
 80029f8:	e0ed      	b.n	8002bd6 <updateDisplay+0x356>
		case '3':
		  setDigit(i);
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff0d 	bl	800281c <setDigit>
		  setThree();
 8002a02:	f7ff fb19 	bl	8002038 <setThree>
		  break;
 8002a06:	e0e6      	b.n	8002bd6 <updateDisplay+0x356>
		case '4':
		  setDigit(i);
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff06 	bl	800281c <setDigit>
		  setFour();
 8002a10:	f7ff fb30 	bl	8002074 <setFour>
		  break;
 8002a14:	e0df      	b.n	8002bd6 <updateDisplay+0x356>
		case '5':
		  setDigit(i);
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff feff 	bl	800281c <setDigit>
		  setFive();
 8002a1e:	f7ff fb43 	bl	80020a8 <setFive>
		  break;
 8002a22:	e0d8      	b.n	8002bd6 <updateDisplay+0x356>
		case '6':
		  setDigit(i);
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fef8 	bl	800281c <setDigit>
		  setSix();
 8002a2c:	f7ff fb5a 	bl	80020e4 <setSix>
		  break;
 8002a30:	e0d1      	b.n	8002bd6 <updateDisplay+0x356>
		case '7':
		  setDigit(i);
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fef1 	bl	800281c <setDigit>
		  setSeven();
 8002a3a:	f7ff fb77 	bl	800212c <setSeven>
		  break;
 8002a3e:	e0ca      	b.n	8002bd6 <updateDisplay+0x356>
		case '8':
		  setDigit(i);
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff feea 	bl	800281c <setDigit>
		  setEight();
 8002a48:	f7ff fb84 	bl	8002154 <setEight>
		  break;
 8002a4c:	e0c3      	b.n	8002bd6 <updateDisplay+0x356>
		case '9':
		  setDigit(i);
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fee3 	bl	800281c <setDigit>
		  setNine();
 8002a56:	f7ff fba7 	bl	80021a8 <setNine>
		  break;
 8002a5a:	e0bc      	b.n	8002bd6 <updateDisplay+0x356>
		case '_':
			setDigit(i);
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fedc 	bl	800281c <setDigit>
			setUnderscore();
 8002a64:	f7ff fec6 	bl	80027f4 <setUnderscore>
			break;
 8002a68:	e0b5      	b.n	8002bd6 <updateDisplay+0x356>
		//abeceda
		case 'a':
		case 'A':
			setDigit(i);
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fed5 	bl	800281c <setDigit>
			setA();
 8002a72:	f7ff fbdf 	bl	8002234 <setA>
			break;
 8002a76:	e0ae      	b.n	8002bd6 <updateDisplay+0x356>
		case 'b':
		case 'B':
			setDigit(i);
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fece 	bl	800281c <setDigit>
			setB();
 8002a80:	f7ff fbfe 	bl	8002280 <setB>
			break;
 8002a84:	e0a7      	b.n	8002bd6 <updateDisplay+0x356>
		case 'c':
		case 'C':
			setDigit(i);
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fec7 	bl	800281c <setDigit>
			setC();
 8002a8e:	f7ff fc17 	bl	80022c0 <setC>
			break;
 8002a92:	e0a0      	b.n	8002bd6 <updateDisplay+0x356>
		case 'd':
		case 'D':
			setDigit(i);
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fec0 	bl	800281c <setDigit>
			setD();
 8002a9c:	f7ff fc2a 	bl	80022f4 <setD>
			break;
 8002aa0:	e099      	b.n	8002bd6 <updateDisplay+0x356>
		case 'e':
		case 'E':
			setDigit(i);
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff feb9 	bl	800281c <setDigit>
			setE();
 8002aaa:	f7ff fc43 	bl	8002334 <setE>
			break;
 8002aae:	e092      	b.n	8002bd6 <updateDisplay+0x356>
		case 'f':
		case 'F':
			setDigit(i);
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff feb2 	bl	800281c <setDigit>
			setF();
 8002ab8:	f7ff fc5a 	bl	8002370 <setF>
			break;
 8002abc:	e08b      	b.n	8002bd6 <updateDisplay+0x356>
		case 'g':
		case 'G':
			setDigit(i);
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff feab 	bl	800281c <setDigit>
			setG();
 8002ac6:	f7ff fc6d 	bl	80023a4 <setG>
			break;
 8002aca:	e084      	b.n	8002bd6 <updateDisplay+0x356>
		case 'h':
		case 'H':
			setDigit(i);
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fea4 	bl	800281c <setDigit>
			setH();
 8002ad4:	f7ff fc86 	bl	80023e4 <setH>
			break;
 8002ad8:	e07d      	b.n	8002bd6 <updateDisplay+0x356>
		case 'i':
		case 'I':
			setDigit(i);
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fe9d 	bl	800281c <setDigit>
			setI();
 8002ae2:	f7ff fc9f 	bl	8002424 <setI>
			break;
 8002ae6:	e076      	b.n	8002bd6 <updateDisplay+0x356>
		case 'j':
		case 'J':
			setDigit(i);
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fe96 	bl	800281c <setDigit>
			setJ();
 8002af0:	f7ff fca8 	bl	8002444 <setJ>
			break;
 8002af4:	e06f      	b.n	8002bd6 <updateDisplay+0x356>
		case 'k':
		case 'K':
			setDigit(i);
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe8f 	bl	800281c <setDigit>
			setK();
 8002afe:	f7ff fdd5 	bl	80026ac <setK>
			break;
 8002b02:	e068      	b.n	8002bd6 <updateDisplay+0x356>
		case 'l':
		case 'L':
			setDigit(i);
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fe88 	bl	800281c <setDigit>
			setL();
 8002b0c:	f7ff fcb6 	bl	800247c <setL>
			break;
 8002b10:	e061      	b.n	8002bd6 <updateDisplay+0x356>
		case 'm':
		case 'M':
			setDigit(i);
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fe81 	bl	800281c <setDigit>
			setM();
 8002b1a:	f7ff fde7 	bl	80026ec <setM>
			break;
 8002b1e:	e05a      	b.n	8002bd6 <updateDisplay+0x356>
		case 'n':
		case 'N':
			setDigit(i);
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fe7a 	bl	800281c <setDigit>
			setN();
 8002b28:	f7ff fcbe 	bl	80024a8 <setN>
			break;
 8002b2c:	e053      	b.n	8002bd6 <updateDisplay+0x356>
		case 'o':
		case 'O':
			setDigit(i);
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fe73 	bl	800281c <setDigit>
			setO();
 8002b36:	f7ff fccd 	bl	80024d4 <setO>
			break;
 8002b3a:	e04c      	b.n	8002bd6 <updateDisplay+0x356>
		case 'p':
		case 'P':
			setDigit(i);
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fe6c 	bl	800281c <setDigit>
			setP();
 8002b44:	f7ff fcec 	bl	8002520 <setP>
			break;
 8002b48:	e045      	b.n	8002bd6 <updateDisplay+0x356>
		case 'q':
		case 'Q':
			setDigit(i);
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fe65 	bl	800281c <setDigit>
			setQ();
 8002b52:	f7ff fd05 	bl	8002560 <setQ>
			break;
 8002b56:	e03e      	b.n	8002bd6 <updateDisplay+0x356>
		case 'r':
		case 'R':
			setDigit(i);
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fe5e 	bl	800281c <setDigit>
			setR();
 8002b60:	f7ff fd1e 	bl	80025a0 <setR>
			break;
 8002b64:	e037      	b.n	8002bd6 <updateDisplay+0x356>
		case 's':
		case 'S':
			setDigit(i);
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fe57 	bl	800281c <setDigit>
			setS();
 8002b6e:	f7ff fd27 	bl	80025c0 <setS>
			break;
 8002b72:	e030      	b.n	8002bd6 <updateDisplay+0x356>
		case 't':
		case 'T':
			setDigit(i);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fe50 	bl	800281c <setDigit>
			setT();
 8002b7c:	f7ff fd3e 	bl	80025fc <setT>
			break;
 8002b80:	e029      	b.n	8002bd6 <updateDisplay+0x356>
		case 'u':
		case 'U':
			setDigit(i);
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fe49 	bl	800281c <setDigit>
			setU();
 8002b8a:	f7ff fd51 	bl	8002630 <setU>
			break;
 8002b8e:	e022      	b.n	8002bd6 <updateDisplay+0x356>
		case 'v':
		case 'V':
			setDigit(i);
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fe42 	bl	800281c <setDigit>
			setV();
 8002b98:	f7ff fdc2 	bl	8002720 <setV>
			break;
 8002b9c:	e01b      	b.n	8002bd6 <updateDisplay+0x356>
		case 'w':
		case 'W':
			setDigit(i);
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe3b 	bl	800281c <setDigit>
			setW();
 8002ba6:	f7ff fdcf 	bl	8002748 <setW>
			break;
 8002baa:	e014      	b.n	8002bd6 <updateDisplay+0x356>
		case 'x':
		case 'X':
			setDigit(i);
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fe34 	bl	800281c <setDigit>
			setX();
 8002bb4:	f7ff fdec 	bl	8002790 <setX>
			break;
 8002bb8:	e00d      	b.n	8002bd6 <updateDisplay+0x356>
		case 'y':
		case 'Y':
			setDigit(i);
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fe2d 	bl	800281c <setDigit>
			setY();
 8002bc2:	f7ff fd55 	bl	8002670 <setY>
			break;
 8002bc6:	e006      	b.n	8002bd6 <updateDisplay+0x356>
		case 'z':
		case 'Z':
			setDigit(i);
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fe26 	bl	800281c <setDigit>
			setZ();
 8002bd0:	f7ff fdf2 	bl	80027b8 <setZ>
			break;
 8002bd4:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <updateDisplay+0x3ac>)
 8002bd8:	799b      	ldrb	r3, [r3, #6]
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d101      	bne.n	8002be4 <updateDisplay+0x364>
		{
			setDecimalPoint();
 8002be0:	f7ff fe12 	bl	8002808 <setDecimalPoint>
		}
		disp_time_saved = disp_time;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <updateDisplay+0x3b0>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	4912      	ldr	r1, [pc, #72]	; (8002c34 <updateDisplay+0x3b4>)
 8002bec:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8002bf0:	bf00      	nop
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <updateDisplay+0x3b4>)
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	1c94      	adds	r4, r2, #2
 8002bfa:	f143 0500 	adc.w	r5, r3, #0
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <updateDisplay+0x3b0>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	42ab      	cmp	r3, r5
 8002c06:	bf08      	it	eq
 8002c08:	42a2      	cmpeq	r2, r4
 8002c0a:	d3f2      	bcc.n	8002bf2 <updateDisplay+0x372>
		resetDigits();
 8002c0c:	f7ff f9a6 	bl	8001f5c <resetDigits>
		resetSegments();
 8002c10:	f7ff f948 	bl	8001ea4 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	3301      	adds	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	f67f ae36 	bls.w	800288e <updateDisplay+0xe>
	}
}
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2c:	2000020c 	.word	0x2000020c
 8002c30:	20000218 	.word	0x20000218
 8002c34:	20000220 	.word	0x20000220

08002c38 <TIM2_IRQHandler>:

//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 8002c3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c40:	f7ff f900 	bl	8001e44 <LL_TIM_IsActiveFlag_UPDATE>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <TIM2_IRQHandler+0x18>
	{
		updateDisplay(data);
 8002c4a:	4804      	ldr	r0, [pc, #16]	; (8002c5c <TIM2_IRQHandler+0x24>)
 8002c4c:	f7ff fe18 	bl	8002880 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002c50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c54:	f7ff f8e8 	bl	8001e28 <LL_TIM_ClearFlag_UPDATE>
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000240 	.word	0x20000240

08002c60 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <NVIC_GetPriorityGrouping+0x18>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f003 0307 	and.w	r3, r3, #7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4907      	ldr	r1, [pc, #28]	; (8002cac <NVIC_EnableIRQ+0x30>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2001      	movs	r0, #1
 8002c96:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da0b      	bge.n	8002cdc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	; (8002cfc <NVIC_SetPriority+0x4c>)
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	3b04      	subs	r3, #4
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cda:	e009      	b.n	8002cf0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <NVIC_SetPriority+0x50>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
         );
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000

08002d9c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <LL_SYSCFG_SetEXTISource+0x54>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3302      	adds	r3, #2
 8002dae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	43db      	mvns	r3, r3
 8002db8:	ea02 0103 	and.w	r1, r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	4806      	ldr	r0, [pc, #24]	; (8002df0 <LL_SYSCFG_SetEXTISource+0x54>)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000

08002df4 <LL_GPIO_SetPinMode>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	613b      	str	r3, [r7, #16]
  return(result);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2103      	movs	r1, #3
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	401a      	ands	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	601a      	str	r2, [r3, #0]
}
 8002e42:	bf00      	nop
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_GPIO_SetPinPull>:
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b089      	sub	sp, #36	; 0x24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	613b      	str	r3, [r7, #16]
  return(result);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2103      	movs	r1, #3
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	431a      	orrs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	60da      	str	r2, [r3, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3724      	adds	r7, #36	; 0x24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_GPIO_ResetOutputPin>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	615a      	str	r2, [r3, #20]

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	609a      	str	r2, [r3, #8]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002ee6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002eea:	f7ff ff3f 	bl	8002d6c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002eee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ef2:	f7ff ff3b 	bl	8002d6c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8002ef6:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7ff ff4e 	bl	8002d9c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIO_PORT_BUTTON,LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 8002f00:	2201      	movs	r2, #1
 8002f02:	2108      	movs	r1, #8
 8002f04:	482a      	ldr	r0, [pc, #168]	; (8002fb0 <MX_GPIO_Init+0xec>)
 8002f06:	f7ff ffa2 	bl	8002e4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIO_PORT_BUTTON,LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2108      	movs	r1, #8
 8002f0e:	4828      	ldr	r0, [pc, #160]	; (8002fb0 <MX_GPIO_Init+0xec>)
 8002f10:	f7ff ff70 	bl	8002df4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8002f14:	2308      	movs	r3, #8
 8002f16:	607b      	str	r3, [r7, #4]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	733b      	strb	r3, [r7, #12]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002f20:	2300      	movs	r3, #0
 8002f22:	737b      	strb	r3, [r7, #13]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73bb      	strb	r3, [r7, #14]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd ffbc 	bl	8000ea8 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002f30:	f7ff fe96 	bl	8002c60 <NVIC_GetPriorityGrouping>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2200      	movs	r2, #0
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fee2 	bl	8002d04 <NVIC_EncodePriority>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4619      	mov	r1, r3
 8002f44:	2009      	movs	r0, #9
 8002f46:	f7ff feb3 	bl	8002cb0 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8002f4a:	2009      	movs	r0, #9
 8002f4c:	f7ff fe96 	bl	8002c7c <NVIC_EnableIRQ>


  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4
 8002f50:	f640 111b 	movw	r1, #2331	; 0x91b
 8002f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f58:	f7ff ffa6 	bl	8002ea8 <LL_GPIO_ResetOutputPin>
  	                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_3);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0);
 8002f5c:	2133      	movs	r1, #51	; 0x33
 8002f5e:	4814      	ldr	r0, [pc, #80]	; (8002fb0 <MX_GPIO_Init+0xec>)
 8002f60:	f7ff ffa2 	bl	8002ea8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_0|LL_GPIO_PIN_8
 8002f64:	f641 139f 	movw	r3, #6559	; 0x199f
 8002f68:	613b      	str	r3, [r7, #16]
  	                          |LL_GPIO_PIN_11|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_12|LL_GPIO_PIN_2|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f84:	f7fe f97e 	bl	8001284 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_4|LL_GPIO_PIN_1|LL_GPIO_PIN_0;
 8002f88:	2333      	movs	r3, #51	; 0x33
 8002f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <MX_GPIO_Init+0xec>)
 8002fa4:	f7fe f96e 	bl	8001284 <LL_GPIO_Init>

}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	48000400 	.word	0x48000400

08002fb4 <NVIC_GetPriorityGrouping>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EnableIRQ>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4907      	ldr	r1, [pc, #28]	; (8003000 <NVIC_EnableIRQ+0x30>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2001      	movs	r0, #1
 8002fea:	fa00 f202 	lsl.w	r2, r0, r2
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000e100 	.word	0xe000e100

08003004 <NVIC_SetPriority>:
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	da0b      	bge.n	8003030 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	490c      	ldr	r1, [pc, #48]	; (8003050 <NVIC_SetPriority+0x4c>)
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	3b04      	subs	r3, #4
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	440b      	add	r3, r1
 800302c:	761a      	strb	r2, [r3, #24]
}
 800302e:	e009      	b.n	8003044 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4907      	ldr	r1, [pc, #28]	; (8003054 <NVIC_SetPriority+0x50>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	e000e100 	.word	0xe000e100

08003058 <NVIC_EncodePriority>:
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	2b04      	cmp	r3, #4
 8003074:	bf28      	it	cs
 8003076:	2304      	movcs	r3, #4
 8003078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3304      	adds	r3, #4
 800307e:	2b06      	cmp	r3, #6
 8003080:	d902      	bls.n	8003088 <NVIC_EncodePriority+0x30>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3b03      	subs	r3, #3
 8003086:	e000      	b.n	800308a <NVIC_EncodePriority+0x32>
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	401a      	ands	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a0:	f04f 31ff 	mov.w	r1, #4294967295
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	4313      	orrs	r3, r2
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <LL_AHB1_GRP1_EnableClock>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	4907      	ldr	r1, [pc, #28]	; (80030ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4013      	ands	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030de:	68fb      	ldr	r3, [r7, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40021000 	.word	0x40021000

080030f0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <LL_APB1_GRP1_EnableClock+0x2c>)
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	4907      	ldr	r1, [pc, #28]	; (800311c <LL_APB1_GRP1_EnableClock+0x2c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4313      	orrs	r3, r2
 8003102:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4013      	ands	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40021000 	.word	0x40021000

08003120 <LL_I2C_Enable>:
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_I2C_EnableClockStretching>:
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	601a      	str	r2, [r3, #0]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_I2C_DisableGeneralCall>:
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	601a      	str	r2, [r3, #0]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_I2C_SetOwnAddress2>:
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003194:	f023 0306 	bic.w	r3, r3, #6
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	430a      	orrs	r2, r1
 800319e:	431a      	orrs	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	60da      	str	r2, [r3, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_I2C_DisableOwnAddress2>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	60da      	str	r2, [r3, #12]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_I2C_EnableIT_RX>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f043 0204 	orr.w	r2, r3, #4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_I2C_DisableIT_RX>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 0204 	bic.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_I2C_IsActiveFlag_TXIS>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_I2C_IsActiveFlag_RXNE>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_I2C_IsActiveFlag_STOP>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b20      	cmp	r3, #32
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_I2C_ClearFlag_STOP>:
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	61da      	str	r2, [r3, #28]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_I2C_EnableAutoEndMode>:
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	605a      	str	r2, [r3, #4]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	0d5b      	lsrs	r3, r3, #21
 80032da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <LL_I2C_HandleTransfer+0x48>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	43db      	mvns	r3, r3
 80032e4:	401a      	ands	r2, r3
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4319      	orrs	r1, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	4319      	orrs	r1, r3
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4319      	orrs	r1, r3
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	431a      	orrs	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	03ff7bff 	.word	0x03ff7bff

08003310 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	b2db      	uxtb	r3, r3
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08e      	sub	sp, #56	; 0x38
 800334c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	611a      	str	r2, [r3, #16]
 800335e:	615a      	str	r2, [r3, #20]
 8003360:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
 8003370:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003372:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003376:	f7ff fea3 	bl	80030c0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800337a:	23c0      	movs	r3, #192	; 0xc0
 800337c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800337e:	2302      	movs	r3, #2
 8003380:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003382:	2303      	movs	r3, #3
 8003384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003386:	2301      	movs	r3, #1
 8003388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800338a:	2301      	movs	r3, #1
 800338c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800338e:	2304      	movs	r3, #4
 8003390:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4821      	ldr	r0, [pc, #132]	; (800341c <MX_I2C1_Init+0xd4>)
 8003398:	f7fd ff74 	bl	8001284 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800339c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80033a0:	f7ff fea6 	bl	80030f0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80033a4:	f7ff fe06 	bl	8002fb4 <NVIC_GetPriorityGrouping>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe52 	bl	8003058 <NVIC_EncodePriority>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4619      	mov	r1, r3
 80033b8:	201f      	movs	r0, #31
 80033ba:	f7ff fe23 	bl	8003004 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80033be:	201f      	movs	r0, #31
 80033c0:	f7ff fe06 	bl	8002fd0 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80033c4:	4816      	ldr	r0, [pc, #88]	; (8003420 <MX_I2C1_Init+0xd8>)
 80033c6:	f7ff ff6c 	bl	80032a2 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80033ca:	4815      	ldr	r0, [pc, #84]	; (8003420 <MX_I2C1_Init+0xd8>)
 80033cc:	f7ff fef0 	bl	80031b0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80033d0:	4813      	ldr	r0, [pc, #76]	; (8003420 <MX_I2C1_Init+0xd8>)
 80033d2:	f7ff fec5 	bl	8003160 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80033d6:	4812      	ldr	r0, [pc, #72]	; (8003420 <MX_I2C1_Init+0xd8>)
 80033d8:	f7ff feb2 	bl	8003140 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80033e0:	4b10      	ldr	r3, [pc, #64]	; (8003424 <MX_I2C1_Init+0xdc>)
 80033e2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80033ec:	2302      	movs	r3, #2
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80033f4:	2300      	movs	r3, #0
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80033f8:	f107 031c 	add.w	r3, r7, #28
 80033fc:	4619      	mov	r1, r3
 80033fe:	4808      	ldr	r0, [pc, #32]	; (8003420 <MX_I2C1_Init+0xd8>)
 8003400:	f7fe f85d 	bl	80014be <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8003404:	2200      	movs	r2, #0
 8003406:	2100      	movs	r1, #0
 8003408:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_I2C1_Init+0xd8>)
 800340a:	f7ff feb9 	bl	8003180 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800340e:	4804      	ldr	r0, [pc, #16]	; (8003420 <MX_I2C1_Init+0xd8>)
 8003410:	f7ff fe86 	bl	8003120 <LL_I2C_Enable>
}
 8003414:	bf00      	nop
 8003416:	3738      	adds	r7, #56	; 0x38
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	48000400 	.word	0x48000400
 8003420:	40005400 	.word	0x40005400
 8003424:	2000090e 	.word	0x2000090e

08003428 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b085      	sub	sp, #20
 800342c:	af02      	add	r7, sp, #8
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4623      	mov	r3, r4
 8003438:	71fb      	strb	r3, [r7, #7]
 800343a:	4603      	mov	r3, r0
 800343c:	71bb      	strb	r3, [r7, #6]
 800343e:	460b      	mov	r3, r1
 8003440:	717b      	strb	r3, [r7, #5]
 8003442:	4613      	mov	r3, r2
 8003444:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8003446:	793b      	ldrb	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800344c:	79bb      	ldrb	r3, [r7, #6]
 800344e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003452:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8003454:	7979      	ldrb	r1, [r7, #5]
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <i2c_master_write+0x80>)
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	2302      	movs	r3, #2
 8003462:	2200      	movs	r2, #0
 8003464:	4811      	ldr	r0, [pc, #68]	; (80034ac <i2c_master_write+0x84>)
 8003466:	f7ff ff2d 	bl	80032c4 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800346a:	79bb      	ldrb	r3, [r7, #6]
 800346c:	4619      	mov	r1, r3
 800346e:	480f      	ldr	r0, [pc, #60]	; (80034ac <i2c_master_write+0x84>)
 8003470:	f7ff ff5b 	bl	800332a <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003474:	e00a      	b.n	800348c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003476:	480d      	ldr	r0, [pc, #52]	; (80034ac <i2c_master_write+0x84>)
 8003478:	f7ff feca 	bl	8003210 <LL_I2C_IsActiveFlag_TXIS>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d004      	beq.n	800348c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	4619      	mov	r1, r3
 8003486:	4809      	ldr	r0, [pc, #36]	; (80034ac <i2c_master_write+0x84>)
 8003488:	f7ff ff4f 	bl	800332a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800348c:	4807      	ldr	r0, [pc, #28]	; (80034ac <i2c_master_write+0x84>)
 800348e:	f7ff fee5 	bl	800325c <LL_I2C_IsActiveFlag_STOP>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ee      	beq.n	8003476 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8003498:	4804      	ldr	r0, [pc, #16]	; (80034ac <i2c_master_write+0x84>)
 800349a:	f7ff fef2 	bl	8003282 <LL_I2C_ClearFlag_STOP>
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	80002000 	.word	0x80002000
 80034ac:	40005400 	.word	0x40005400

080034b0 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	4608      	mov	r0, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	461a      	mov	r2, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	70fb      	strb	r3, [r7, #3]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70bb      	strb	r3, [r7, #2]
 80034c6:	4613      	mov	r3, r2
 80034c8:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80034ca:	4a30      	ldr	r2, [pc, #192]	; (800358c <i2c_master_read+0xdc>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80034d0:	7c3b      	ldrb	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80034d6:	78bb      	ldrb	r3, [r7, #2]
 80034d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034dc:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <i2c_master_read+0xe0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80034e4:	482b      	ldr	r0, [pc, #172]	; (8003594 <i2c_master_read+0xe4>)
 80034e6:	f7ff fe73 	bl	80031d0 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80034ea:	7879      	ldrb	r1, [r7, #1]
 80034ec:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <i2c_master_read+0xe8>)
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2301      	movs	r3, #1
 80034f8:	2200      	movs	r2, #0
 80034fa:	4826      	ldr	r0, [pc, #152]	; (8003594 <i2c_master_read+0xe4>)
 80034fc:	f7ff fee2 	bl	80032c4 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003500:	e00a      	b.n	8003518 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003502:	4824      	ldr	r0, [pc, #144]	; (8003594 <i2c_master_read+0xe4>)
 8003504:	f7ff fe84 	bl	8003210 <LL_I2C_IsActiveFlag_TXIS>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800350e:	78bb      	ldrb	r3, [r7, #2]
 8003510:	4619      	mov	r1, r3
 8003512:	4820      	ldr	r0, [pc, #128]	; (8003594 <i2c_master_read+0xe4>)
 8003514:	f7ff ff09 	bl	800332a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003518:	481e      	ldr	r0, [pc, #120]	; (8003594 <i2c_master_read+0xe4>)
 800351a:	f7ff fe9f 	bl	800325c <LL_I2C_IsActiveFlag_STOP>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ee      	beq.n	8003502 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8003524:	481b      	ldr	r0, [pc, #108]	; (8003594 <i2c_master_read+0xe4>)
 8003526:	f7ff feac 	bl	8003282 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 800352a:	bf00      	nop
 800352c:	4819      	ldr	r0, [pc, #100]	; (8003594 <i2c_master_read+0xe4>)
 800352e:	f7ff fe95 	bl	800325c <LL_I2C_IsActiveFlag_STOP>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f9      	bne.n	800352c <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8003538:	7879      	ldrb	r1, [r7, #1]
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <i2c_master_read+0xec>)
 800353e:	9201      	str	r2, [sp, #4]
 8003540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003544:	9200      	str	r2, [sp, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	4812      	ldr	r0, [pc, #72]	; (8003594 <i2c_master_read+0xe4>)
 800354a:	f7ff febb 	bl	80032c4 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800354e:	bf00      	nop
 8003550:	4810      	ldr	r0, [pc, #64]	; (8003594 <i2c_master_read+0xe4>)
 8003552:	f7ff fe83 	bl	800325c <LL_I2C_IsActiveFlag_STOP>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f9      	beq.n	8003550 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800355c:	480d      	ldr	r0, [pc, #52]	; (8003594 <i2c_master_read+0xe4>)
 800355e:	f7ff fe90 	bl	8003282 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8003562:	480c      	ldr	r0, [pc, #48]	; (8003594 <i2c_master_read+0xe4>)
 8003564:	f7ff fe44 	bl	80031f0 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <i2c_master_read+0xe4>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4a09      	ldr	r2, [pc, #36]	; (8003594 <i2c_master_read+0xe4>)
 800356e:	f043 0310 	orr.w	r3, r3, #16
 8003572:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <i2c_master_read+0xf0>)
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <i2c_master_read+0xe0>)
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <i2c_master_read+0xdc>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000244 	.word	0x20000244
 8003590:	20000228 	.word	0x20000228
 8003594:	40005400 	.word	0x40005400
 8003598:	80002000 	.word	0x80002000
 800359c:	80002400 	.word	0x80002400
 80035a0:	20000229 	.word	0x20000229

080035a4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80035a4:	b598      	push	{r3, r4, r7, lr}
 80035a6:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80035a8:	4812      	ldr	r0, [pc, #72]	; (80035f4 <I2C1_EV_IRQHandler+0x50>)
 80035aa:	f7ff fe44 	bl	8003236 <LL_I2C_IsActiveFlag_RXNE>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01c      	beq.n	80035ee <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <I2C1_EV_IRQHandler+0x54>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <I2C1_EV_IRQHandler+0x58>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	1c59      	adds	r1, r3, #1
 80035c0:	b2c8      	uxtb	r0, r1
 80035c2:	490e      	ldr	r1, [pc, #56]	; (80035fc <I2C1_EV_IRQHandler+0x58>)
 80035c4:	7008      	strb	r0, [r1, #0]
 80035c6:	18d4      	adds	r4, r2, r3
 80035c8:	480a      	ldr	r0, [pc, #40]	; (80035f4 <I2C1_EV_IRQHandler+0x50>)
 80035ca:	f7ff fea1 	bl	8003310 <LL_I2C_ReceiveData8>
 80035ce:	4603      	mov	r3, r0
 80035d0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <I2C1_EV_IRQHandler+0x58>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b13      	cmp	r3, #19
 80035da:	d903      	bls.n	80035e4 <I2C1_EV_IRQHandler+0x40>
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <I2C1_EV_IRQHandler+0x58>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e001      	b.n	80035e8 <I2C1_EV_IRQHandler+0x44>
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <I2C1_EV_IRQHandler+0x58>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <I2C1_EV_IRQHandler+0x5c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
	}
}
 80035ee:	bf00      	nop
 80035f0:	bd98      	pop	{r3, r4, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40005400 	.word	0x40005400
 80035f8:	20000244 	.word	0x20000244
 80035fc:	20000229 	.word	0x20000229
 8003600:	20000228 	.word	0x20000228

08003604 <NVIC_SetPriorityGrouping>:
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <NVIC_SetPriorityGrouping+0x44>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003620:	4013      	ands	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800362c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <NVIC_SetPriorityGrouping+0x44>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <LL_RCC_HSI_Enable+0x1c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <LL_RCC_HSI_Enable+0x1c>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000

0800366c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <LL_RCC_HSI_IsReady+0x20>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
}
 8003682:	4618      	mov	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40021000 	.word	0x40021000

08003690 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4904      	ldr	r1, [pc, #16]	; (80036b8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000

080036bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <LL_RCC_SetSysClkSource+0x24>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 0203 	bic.w	r2, r3, #3
 80036cc:	4904      	ldr	r1, [pc, #16]	; (80036e0 <LL_RCC_SetSysClkSource+0x24>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	40021000 	.word	0x40021000

080036e4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <LL_RCC_GetSysClkSource+0x18>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 030c 	and.w	r3, r3, #12
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000

08003700 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <LL_RCC_SetAHBPrescaler+0x24>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	4904      	ldr	r1, [pc, #16]	; (8003724 <LL_RCC_SetAHBPrescaler+0x24>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40021000 	.word	0x40021000

08003728 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <LL_RCC_SetAPB1Prescaler+0x24>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003738:	4904      	ldr	r1, [pc, #16]	; (800374c <LL_RCC_SetAPB1Prescaler+0x24>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40021000 	.word	0x40021000

08003750 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <LL_RCC_SetAPB2Prescaler+0x24>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003760:	4904      	ldr	r1, [pc, #16]	; (8003774 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40021000 	.word	0x40021000

08003778 <LL_APB1_GRP1_EnableClock>:
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003780:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4313      	orrs	r3, r2
 800378a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4013      	ands	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40021000 	.word	0x40021000

080037a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037b2:	699a      	ldr	r2, [r3, #24]
 80037b4:	4907      	ldr	r1, [pc, #28]	; (80037d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4013      	ands	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037c6:	68fb      	ldr	r3, [r7, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40021000 	.word	0x40021000

080037d8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <LL_FLASH_SetLatency+0x24>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 0207 	bic.w	r2, r3, #7
 80037e8:	4904      	ldr	r1, [pc, #16]	; (80037fc <LL_FLASH_SetLatency+0x24>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40022000 	.word	0x40022000

08003800 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <LL_FLASH_GetLatency+0x18>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40022000 	.word	0x40022000

0800381c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4013      	ands	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40010400 	.word	0x40010400

08003848 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6153      	str	r3, [r2, #20]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010400 	.word	0x40010400

08003868 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d106      	bne.n	8003884 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <LL_SYSTICK_SetClkSource+0x34>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <LL_SYSTICK_SetClkSource+0x34>)
 800387c:	f043 0304 	orr.w	r3, r3, #4
 8003880:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8003882:	e005      	b.n	8003890 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <LL_SYSTICK_SetClkSource+0x34>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <LL_SYSTICK_SetClkSource+0x34>)
 800388a:	f023 0304 	bic.w	r3, r3, #4
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	e000e010 	.word	0xe000e010

080038a0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <LL_SYSTICK_EnableIT+0x1c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a04      	ldr	r2, [pc, #16]	; (80038bc <LL_SYSTICK_EnableIT+0x1c>)
 80038aa:	f043 0302 	orr.w	r3, r3, #2
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <LL_GPIO_IsInputPinSet>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	4013      	ands	r3, r2
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	0000      	movs	r0, r0
 80038ec:	0000      	movs	r0, r0
	...

080038f0 <main>:
extern uint64_t disp_time;
uint64_t saved_time;
double num_to_display = 10;

int main(void)
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80038f8:	2001      	movs	r0, #1
 80038fa:	f7ff ff55 	bl	80037a8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80038fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003902:	f7ff ff39 	bl	8003778 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003906:	2003      	movs	r0, #3
 8003908:	f7ff fe7c 	bl	8003604 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 800390c:	f000 fa1a 	bl	8003d44 <SystemClock_Config>

  MX_GPIO_Init();
 8003910:	f7ff fad8 	bl	8002ec4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003914:	f7ff fd18 	bl	8003348 <MX_I2C1_Init>

  setSegments();
 8003918:	f7fe faf2 	bl	8001f00 <setSegments>
  setDigits();
 800391c:	f7fe fb3e 	bl	8001f9c <setDigits>

  LL_mDelay(2000);
 8003920:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003924:	f7fe fa4a 	bl	8001dbc <LL_mDelay>

  resetDigits();
 8003928:	f7fe fb18 	bl	8001f5c <resetDigits>
  resetSegments();
 800392c:	f7fe faba 	bl	8001ea4 <resetSegments>

  MX_TIM2_Init();
 8003930:	f000 fd2a 	bl	8004388 <MX_TIM2_Init>

  hts221_init();
 8003934:	f000 fede 	bl	80046f4 <hts221_init>

  lps25hb_init();
 8003938:	f000 ff6a 	bl	8004810 <lps25hb_init>

  lengS = strlen(stringS);
 800393c:	48bc      	ldr	r0, [pc, #752]	; (8003c30 <main+0x340>)
 800393e:	f7fc fc47 	bl	80001d0 <strlen>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	4bbb      	ldr	r3, [pc, #748]	; (8003c34 <main+0x344>)
 8003948:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  /*Getting sensor data*/
	  temperature = hts221_get_te();
 800394a:	f000 fdf7 	bl	800453c <hts221_get_te>
 800394e:	eef0 7a40 	vmov.f32	s15, s0
 8003952:	4bb9      	ldr	r3, [pc, #740]	; (8003c38 <main+0x348>)
 8003954:	edc3 7a00 	vstr	s15, [r3]
	  LL_mDelay(50);
 8003958:	2032      	movs	r0, #50	; 0x32
 800395a:	f7fe fa2f 	bl	8001dbc <LL_mDelay>
	  humidity = hts221_get_hu();
 800395e:	f000 fe61 	bl	8004624 <hts221_get_hu>
 8003962:	4603      	mov	r3, r0
 8003964:	ee07 3a90 	vmov	s15, r3
 8003968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396c:	4bb3      	ldr	r3, [pc, #716]	; (8003c3c <main+0x34c>)
 800396e:	edc3 7a00 	vstr	s15, [r3]
	  pressure = lps25hb_get_pre();
 8003972:	f000 ff19 	bl	80047a8 <lps25hb_get_pre>
 8003976:	eef0 7a40 	vmov.f32	s15, s0
 800397a:	4bb1      	ldr	r3, [pc, #708]	; (8003c40 <main+0x350>)
 800397c:	edc3 7a00 	vstr	s15, [r3]
	  height = ((powf((101325/(pressure*100)),1/5.257)-1)*(temperature+273.15))/0.0065;
 8003980:	4baf      	ldr	r3, [pc, #700]	; (8003c40 <main+0x350>)
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8003c44 <main+0x354>
 800398a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800398e:	eddf 6aae 	vldr	s13, [pc, #696]	; 8003c48 <main+0x358>
 8003992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003996:	eddf 0aad 	vldr	s1, [pc, #692]	; 8003c4c <main+0x35c>
 800399a:	eeb0 0a47 	vmov.f32	s0, s14
 800399e:	f003 fe3d 	bl	800761c <powf>
 80039a2:	eef0 7a40 	vmov.f32	s15, s0
 80039a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039ae:	ee17 0a90 	vmov	r0, s15
 80039b2:	f7fc fdc9 	bl	8000548 <__aeabi_f2d>
 80039b6:	4682      	mov	sl, r0
 80039b8:	468b      	mov	fp, r1
 80039ba:	4b9f      	ldr	r3, [pc, #636]	; (8003c38 <main+0x348>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fdc2 	bl	8000548 <__aeabi_f2d>
 80039c4:	a396      	add	r3, pc, #600	; (adr r3, 8003c20 <main+0x330>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f7fc fc5f 	bl	800028c <__adddf3>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4650      	mov	r0, sl
 80039d4:	4659      	mov	r1, fp
 80039d6:	f7fc fe0f 	bl	80005f8 <__aeabi_dmul>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	a391      	add	r3, pc, #580	; (adr r3, 8003c28 <main+0x338>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc ff30 	bl	800084c <__aeabi_ddiv>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7fd f8d8 	bl	8000ba8 <__aeabi_d2f>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4a95      	ldr	r2, [pc, #596]	; (8003c50 <main+0x360>)
 80039fc:	6013      	str	r3, [r2, #0]

	  char tempS[] = "T_";
 80039fe:	4a95      	ldr	r2, [pc, #596]	; (8003c54 <main+0x364>)
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	4611      	mov	r1, r2
 8003a08:	8019      	strh	r1, [r3, #0]
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	0c12      	lsrs	r2, r2, #16
 8003a0e:	701a      	strb	r2, [r3, #0]
	  char humS[] = "H_";
 8003a10:	4a91      	ldr	r2, [pc, #580]	; (8003c58 <main+0x368>)
 8003a12:	f107 0308 	add.w	r3, r7, #8
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	8019      	strh	r1, [r3, #0]
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	0c12      	lsrs	r2, r2, #16
 8003a20:	701a      	strb	r2, [r3, #0]
	  char barS[] = "B_";
 8003a22:	4a8e      	ldr	r2, [pc, #568]	; (8003c5c <main+0x36c>)
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	8019      	strh	r1, [r3, #0]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	0c12      	lsrs	r2, r2, #16
 8003a30:	701a      	strb	r2, [r3, #0]
	  char heightS[] = "A_";
 8003a32:	4a8b      	ldr	r2, [pc, #556]	; (8003c60 <main+0x370>)
 8003a34:	463b      	mov	r3, r7
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	8019      	strh	r1, [r3, #0]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	0c12      	lsrs	r2, r2, #16
 8003a40:	701a      	strb	r2, [r3, #0]

      /*Changing state*/
	  switch(button){
 8003a42:	4b88      	ldr	r3, [pc, #544]	; (8003c64 <main+0x374>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	f200 809b 	bhi.w	8003b82 <main+0x292>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <main+0x164>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003aaf 	.word	0x08003aaf
 8003a5c:	08003af7 	.word	0x08003af7
 8003a60:	08003b3d 	.word	0x08003b3d
	  case 0:
		  sprintf(temValue, "%.1f", temperature);
 8003a64:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <main+0x348>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fc fd6d 	bl	8000548 <__aeabi_f2d>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	497d      	ldr	r1, [pc, #500]	; (8003c68 <main+0x378>)
 8003a74:	487d      	ldr	r0, [pc, #500]	; (8003c6c <main+0x37c>)
 8003a76:	f001 fb99 	bl	80051ac <siprintf>
		  strcat(tempS, temValue);
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	497b      	ldr	r1, [pc, #492]	; (8003c6c <main+0x37c>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fbb3 	bl	80051ec <strcat>
		  memset(stringS, 0, 10);
 8003a86:	220a      	movs	r2, #10
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4869      	ldr	r0, [pc, #420]	; (8003c30 <main+0x340>)
 8003a8c:	f000 ff1c 	bl	80048c8 <memset>
		  strcat(stringS, tempS);
 8003a90:	f107 030c 	add.w	r3, r7, #12
 8003a94:	4619      	mov	r1, r3
 8003a96:	4866      	ldr	r0, [pc, #408]	; (8003c30 <main+0x340>)
 8003a98:	f001 fba8 	bl	80051ec <strcat>
		  lengS = strlen(stringS)-1;
 8003a9c:	4864      	ldr	r0, [pc, #400]	; (8003c30 <main+0x340>)
 8003a9e:	f7fc fb97 	bl	80001d0 <strlen>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b62      	ldr	r3, [pc, #392]	; (8003c34 <main+0x344>)
 8003aaa:	601a      	str	r2, [r3, #0]
		  break;
 8003aac:	e06a      	b.n	8003b84 <main+0x294>
	  case 1:
		  sprintf(humValue, "%.0f", humidity);
 8003aae:	4b63      	ldr	r3, [pc, #396]	; (8003c3c <main+0x34c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fc fd48 	bl	8000548 <__aeabi_f2d>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	496c      	ldr	r1, [pc, #432]	; (8003c70 <main+0x380>)
 8003abe:	486d      	ldr	r0, [pc, #436]	; (8003c74 <main+0x384>)
 8003ac0:	f001 fb74 	bl	80051ac <siprintf>
		  strcat(humS, humValue);
 8003ac4:	f107 0308 	add.w	r3, r7, #8
 8003ac8:	496a      	ldr	r1, [pc, #424]	; (8003c74 <main+0x384>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 fb8e 	bl	80051ec <strcat>
		  memset(stringS, 0, 10);
 8003ad0:	220a      	movs	r2, #10
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4856      	ldr	r0, [pc, #344]	; (8003c30 <main+0x340>)
 8003ad6:	f000 fef7 	bl	80048c8 <memset>
		  strcat(stringS, humS);
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4853      	ldr	r0, [pc, #332]	; (8003c30 <main+0x340>)
 8003ae2:	f001 fb83 	bl	80051ec <strcat>
		  lengS = strlen(stringS);
 8003ae6:	4852      	ldr	r0, [pc, #328]	; (8003c30 <main+0x340>)
 8003ae8:	f7fc fb72 	bl	80001d0 <strlen>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461a      	mov	r2, r3
 8003af0:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <main+0x344>)
 8003af2:	601a      	str	r2, [r3, #0]
		  break;
 8003af4:	e046      	b.n	8003b84 <main+0x294>
	  case 2:
		  sprintf(barValue, "%.2f", pressure);
 8003af6:	4b52      	ldr	r3, [pc, #328]	; (8003c40 <main+0x350>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fc fd24 	bl	8000548 <__aeabi_f2d>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	495c      	ldr	r1, [pc, #368]	; (8003c78 <main+0x388>)
 8003b06:	485d      	ldr	r0, [pc, #372]	; (8003c7c <main+0x38c>)
 8003b08:	f001 fb50 	bl	80051ac <siprintf>
		  strcat(barS, barValue);
 8003b0c:	1d3b      	adds	r3, r7, #4
 8003b0e:	495b      	ldr	r1, [pc, #364]	; (8003c7c <main+0x38c>)
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fb6b 	bl	80051ec <strcat>
		  memset(stringS, 0, 10);
 8003b16:	220a      	movs	r2, #10
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4845      	ldr	r0, [pc, #276]	; (8003c30 <main+0x340>)
 8003b1c:	f000 fed4 	bl	80048c8 <memset>
		  strcat(stringS, barS);
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	4619      	mov	r1, r3
 8003b24:	4842      	ldr	r0, [pc, #264]	; (8003c30 <main+0x340>)
 8003b26:	f001 fb61 	bl	80051ec <strcat>
		  lengS = strlen(stringS)-1;
 8003b2a:	4841      	ldr	r0, [pc, #260]	; (8003c30 <main+0x340>)
 8003b2c:	f7fc fb50 	bl	80001d0 <strlen>
 8003b30:	4603      	mov	r3, r0
 8003b32:	3b01      	subs	r3, #1
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b3f      	ldr	r3, [pc, #252]	; (8003c34 <main+0x344>)
 8003b38:	601a      	str	r2, [r3, #0]
		  break;
 8003b3a:	e023      	b.n	8003b84 <main+0x294>
	  case 3:;
		  sprintf(altValue, "%.1f", height);
 8003b3c:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <main+0x360>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fc fd01 	bl	8000548 <__aeabi_f2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4947      	ldr	r1, [pc, #284]	; (8003c68 <main+0x378>)
 8003b4c:	484c      	ldr	r0, [pc, #304]	; (8003c80 <main+0x390>)
 8003b4e:	f001 fb2d 	bl	80051ac <siprintf>
		  strcat(heightS, altValue);
 8003b52:	463b      	mov	r3, r7
 8003b54:	494a      	ldr	r1, [pc, #296]	; (8003c80 <main+0x390>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 fb48 	bl	80051ec <strcat>
		  memset(stringS, 0, 10);
 8003b5c:	220a      	movs	r2, #10
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4833      	ldr	r0, [pc, #204]	; (8003c30 <main+0x340>)
 8003b62:	f000 feb1 	bl	80048c8 <memset>
		  strcat(stringS, heightS);
 8003b66:	463b      	mov	r3, r7
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4831      	ldr	r0, [pc, #196]	; (8003c30 <main+0x340>)
 8003b6c:	f001 fb3e 	bl	80051ec <strcat>
		  lengS = strlen(stringS)-1;
 8003b70:	482f      	ldr	r0, [pc, #188]	; (8003c30 <main+0x340>)
 8003b72:	f7fc fb2d 	bl	80001d0 <strlen>
 8003b76:	4603      	mov	r3, r0
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <main+0x344>)
 8003b7e:	601a      	str	r2, [r3, #0]
		  break;
 8003b80:	e000      	b.n	8003b84 <main+0x294>
	  default:
		  break;
 8003b82:	bf00      	nop
	  }

	  /*Display*/
		switch(direction){
 8003b84:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <main+0x394>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8085 	beq.w	8003c98 <main+0x3a8>
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f040 80c4 	bne.w	8003d1c <main+0x42c>
		case 1:
				  if(disp_time > (saved_time + 1000)){
 8003b94:	4b3c      	ldr	r3, [pc, #240]	; (8003c88 <main+0x398>)
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8003b9e:	f143 0500 	adc.w	r5, r3, #0
 8003ba2:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <main+0x39c>)
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	429d      	cmp	r5, r3
 8003baa:	bf08      	it	eq
 8003bac:	4294      	cmpeq	r4, r2
 8003bae:	f080 80b7 	bcs.w	8003d20 <main+0x430>
						  data[3] = stringS[i];
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <main+0x3a0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <main+0x340>)
 8003bb8:	5cd2      	ldrb	r2, [r2, r3]
 8003bba:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <main+0x3a4>)
 8003bbc:	70da      	strb	r2, [r3, #3]
						  data[2] = stringS[i+1];
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <main+0x3a0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <main+0x340>)
 8003bc6:	5cd2      	ldrb	r2, [r2, r3]
 8003bc8:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <main+0x3a4>)
 8003bca:	709a      	strb	r2, [r3, #2]
						  data[1] = stringS[i+2];
 8003bcc:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <main+0x3a0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <main+0x340>)
 8003bd4:	5cd2      	ldrb	r2, [r2, r3]
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <main+0x3a4>)
 8003bd8:	705a      	strb	r2, [r3, #1]
						  data[0] = stringS[i+3];
 8003bda:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <main+0x3a0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3303      	adds	r3, #3
 8003be0:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <main+0x340>)
 8003be2:	5cd2      	ldrb	r2, [r2, r3]
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <main+0x3a4>)
 8003be6:	701a      	strb	r2, [r3, #0]
						  i++;
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <main+0x3a0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <main+0x3a0>)
 8003bf0:	6013      	str	r3, [r2, #0]
						  saved_time = disp_time;
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <main+0x39c>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	4923      	ldr	r1, [pc, #140]	; (8003c88 <main+0x398>)
 8003bfa:	e9c1 2300 	strd	r2, r3, [r1]
						  if(i >= (lengS-4)){
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <main+0x344>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	1f1a      	subs	r2, r3, #4
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <main+0x3a0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f300 8089 	bgt.w	8003d20 <main+0x430>
							  direction = 0;
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <main+0x394>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
							  i=0;
 8003c14:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <main+0x3a0>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
						  }
				  }
				  break;
 8003c1a:	e081      	b.n	8003d20 <main+0x430>
 8003c1c:	f3af 8000 	nop.w
 8003c20:	66666666 	.word	0x66666666
 8003c24:	40711266 	.word	0x40711266
 8003c28:	76c8b439 	.word	0x76c8b439
 8003c2c:	3f7a9fbe 	.word	0x3f7a9fbe
 8003c30:	20000000 	.word	0x20000000
 8003c34:	2000022c 	.word	0x2000022c
 8003c38:	20000254 	.word	0x20000254
 8003c3c:	2000025c 	.word	0x2000025c
 8003c40:	20000258 	.word	0x20000258
 8003c44:	42c80000 	.word	0x42c80000
 8003c48:	47c5e680 	.word	0x47c5e680
 8003c4c:	3e42c9b4 	.word	0x3e42c9b4
 8003c50:	20000278 	.word	0x20000278
 8003c54:	08007ed8 	.word	0x08007ed8
 8003c58:	08007edc 	.word	0x08007edc
 8003c5c:	08007ee0 	.word	0x08007ee0
 8003c60:	08007ee4 	.word	0x08007ee4
 8003c64:	2000022b 	.word	0x2000022b
 8003c68:	08007ec0 	.word	0x08007ec0
 8003c6c:	20000248 	.word	0x20000248
 8003c70:	08007ec8 	.word	0x08007ec8
 8003c74:	20000250 	.word	0x20000250
 8003c78:	08007ed0 	.word	0x08007ed0
 8003c7c:	20000268 	.word	0x20000268
 8003c80:	20000260 	.word	0x20000260
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	20000270 	.word	0x20000270
 8003c8c:	20000218 	.word	0x20000218
 8003c90:	20000230 	.word	0x20000230
 8003c94:	20000240 	.word	0x20000240
		case 0:
			  if(disp_time > (saved_time + 1000)){
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <main+0x438>)
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 8003ca2:	f143 0900 	adc.w	r9, r3, #0
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <main+0x43c>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	4599      	cmp	r9, r3
 8003cae:	bf08      	it	eq
 8003cb0:	4590      	cmpeq	r8, r2
 8003cb2:	d237      	bcs.n	8003d24 <main+0x434>
					  data[3] = stringS[i];
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <main+0x440>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <main+0x444>)
 8003cba:	5cd2      	ldrb	r2, [r2, r3]
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <main+0x448>)
 8003cbe:	70da      	strb	r2, [r3, #3]
					  data[2] = stringS[i+1];
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <main+0x440>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <main+0x444>)
 8003cc8:	5cd2      	ldrb	r2, [r2, r3]
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <main+0x448>)
 8003ccc:	709a      	strb	r2, [r3, #2]
					  data[1] = stringS[i+2];
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <main+0x440>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <main+0x444>)
 8003cd6:	5cd2      	ldrb	r2, [r2, r3]
 8003cd8:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <main+0x448>)
 8003cda:	705a      	strb	r2, [r3, #1]
					  data[0] = stringS[i+3];
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <main+0x440>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3303      	adds	r3, #3
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <main+0x444>)
 8003ce4:	5cd2      	ldrb	r2, [r2, r3]
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <main+0x448>)
 8003ce8:	701a      	strb	r2, [r3, #0]
					  i--;
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <main+0x440>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <main+0x440>)
 8003cf2:	6013      	str	r3, [r2, #0]
					  saved_time = disp_time;
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <main+0x43c>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	490b      	ldr	r1, [pc, #44]	; (8003d28 <main+0x438>)
 8003cfc:	e9c1 2300 	strd	r2, r3, [r1]
					  if(i <= (lengS-4)){
 8003d00:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <main+0x44c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1eda      	subs	r2, r3, #3
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <main+0x440>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	dd0a      	ble.n	8003d24 <main+0x434>
						  direction = 1;
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <main+0x450>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
						  i=0;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <main+0x440>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
					  }
			  }
			  break;
 8003d1a:	e003      	b.n	8003d24 <main+0x434>
	   default:
			  break;
 8003d1c:	bf00      	nop
 8003d1e:	e614      	b.n	800394a <main+0x5a>
				  break;
 8003d20:	bf00      	nop
 8003d22:	e612      	b.n	800394a <main+0x5a>
			  break;
 8003d24:	bf00      	nop
  {
 8003d26:	e610      	b.n	800394a <main+0x5a>
 8003d28:	20000270 	.word	0x20000270
 8003d2c:	20000218 	.word	0x20000218
 8003d30:	20000230 	.word	0x20000230
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000240 	.word	0x20000240
 8003d3c:	2000022c 	.word	0x2000022c
 8003d40:	2000000c 	.word	0x2000000c

08003d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7ff fd45 	bl	80037d8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8003d4e:	f7ff fd57 	bl	8003800 <LL_FLASH_GetLatency>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8003d58:	f000 f87a 	bl	8003e50 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8003d5c:	f7ff fc76 	bl	800364c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003d60:	bf00      	nop
 8003d62:	f7ff fc83 	bl	800366c <LL_RCC_HSI_IsReady>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d1fa      	bne.n	8003d62 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003d6c:	2010      	movs	r0, #16
 8003d6e:	f7ff fc8f 	bl	8003690 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7ff fcc4 	bl	8003700 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7ff fcd5 	bl	8003728 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7ff fce6 	bl	8003750 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7ff fc99 	bl	80036bc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003d8a:	bf00      	nop
 8003d8c:	f7ff fcaa 	bl	80036e4 <LL_RCC_GetSysClkSource>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1fa      	bne.n	8003d8c <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8003d96:	4806      	ldr	r0, [pc, #24]	; (8003db0 <SystemClock_Config+0x6c>)
 8003d98:	f7fe f802 	bl	8001da0 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003d9c:	2004      	movs	r0, #4
 8003d9e:	f7ff fd63 	bl	8003868 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8003da2:	f7ff fd7d 	bl	80038a0 <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 8003da6:	4802      	ldr	r0, [pc, #8]	; (8003db0 <SystemClock_Config+0x6c>)
 8003da8:	f7fe f82e 	bl	8001e08 <LL_SetSystemCoreClock>
}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* GPIO_PORT, uint8_t GPIO_PIN)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	70fb      	strb	r3, [r7, #3]
	uint8_t state = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
	state = LL_GPIO_IsInputPinSet(GPIO_PORT_BUTTON, LL_GPIO_PIN_3);
 8003dc4:	2108      	movs	r1, #8
 8003dc6:	480f      	ldr	r0, [pc, #60]	; (8003e04 <checkButtonState+0x50>)
 8003dc8:	f7ff fd7a 	bl	80038c0 <LL_GPIO_IsInputPinSet>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	73fb      	strb	r3, [r7, #15]

	switch(state){
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <checkButtonState+0x44>
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d110      	bne.n	8003dfc <checkButtonState+0x48>
	case 1:
		button++;
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <checkButtonState+0x54>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <checkButtonState+0x54>)
 8003de4:	701a      	strb	r2, [r3, #0]
		if(button>3){
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <checkButtonState+0x54>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d902      	bls.n	8003df4 <checkButtonState+0x40>
			button = 0;
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <checkButtonState+0x54>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e001      	b.n	8003dfc <checkButtonState+0x48>
		break;
	case 0:
		return 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e7ff      	b.n	8003dfc <checkButtonState+0x48>
		break;
	}

}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	48000400 	.word	0x48000400
 8003e08:	2000022b 	.word	0x2000022b

08003e0c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
	if(checkButtonState(GPIO_PORT_BUTTON, GPIO_PIN_BUTTON))
 8003e10:	2103      	movs	r1, #3
 8003e12:	480d      	ldr	r0, [pc, #52]	; (8003e48 <EXTI3_IRQHandler+0x3c>)
 8003e14:	f7ff ffce 	bl	8003db4 <checkButtonState>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <EXTI3_IRQHandler+0x26>
			{
				switch_state ^= 1;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <EXTI3_IRQHandler+0x40>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <EXTI3_IRQHandler+0x40>)
 8003e2a:	701a      	strb	r2, [r3, #0]
				LL_mDelay(200);
 8003e2c:	20c8      	movs	r0, #200	; 0xc8
 8003e2e:	f7fd ffc5 	bl	8001dbc <LL_mDelay>
			}
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8003e32:	2008      	movs	r0, #8
 8003e34:	f7ff fcf2 	bl	800381c <LL_EXTI_IsActiveFlag_0_31>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <EXTI3_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003e3e:	2008      	movs	r0, #8
 8003e40:	f7ff fd02 	bl	8003848 <LL_EXTI_ClearFlag_0_31>
   }
}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	48000400 	.word	0x48000400
 8003e4c:	2000022a 	.word	0x2000022a

08003e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e70:	e7fe      	b.n	8003e70 <HardFault_Handler+0x4>

08003e72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e76:	e7fe      	b.n	8003e76 <MemManage_Handler+0x4>

08003e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e7c:	e7fe      	b.n	8003e7c <BusFault_Handler+0x4>

08003e7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e82:	e7fe      	b.n	8003e82 <UsageFault_Handler+0x4>

08003e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e92:	b480      	push	{r7}
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <SysTick_Handler+0x20>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	1c50      	adds	r0, r2, #1
 8003ebc:	f143 0100 	adc.w	r1, r3, #0
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <SysTick_Handler+0x20>)
 8003ec2:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	20000218 	.word	0x20000218

08003ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
	return 1;
 8003ed8:	2301      	movs	r3, #1
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_kill>:

int _kill(int pid, int sig)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003eee:	f000 fcc1 	bl	8004874 <__errno>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2216      	movs	r2, #22
 8003ef6:	601a      	str	r2, [r3, #0]
	return -1;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_exit>:

void _exit (int status)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ffe7 	bl	8003ee4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f16:	e7fe      	b.n	8003f16 <_exit+0x12>

08003f18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e00a      	b.n	8003f40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f2a:	f3af 8000 	nop.w
 8003f2e:	4601      	mov	r1, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	60ba      	str	r2, [r7, #8]
 8003f36:	b2ca      	uxtb	r2, r1
 8003f38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	dbf0      	blt.n	8003f2a <_read+0x12>
	}

return len;
 8003f48:	687b      	ldr	r3, [r7, #4]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e009      	b.n	8003f78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	60ba      	str	r2, [r7, #8]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3301      	adds	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	dbf1      	blt.n	8003f64 <_write+0x12>
	}
	return len;
 8003f80:	687b      	ldr	r3, [r7, #4]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <_close>:

int _close(int file)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
	return -1;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fb2:	605a      	str	r2, [r3, #4]
	return 0;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <_isatty>:

int _isatty(int file)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
	return 1;
 8003fca:	2301      	movs	r3, #1
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
	return 0;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <_sbrk+0x50>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <_sbrk+0x16>
		heap_end = &end;
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <_sbrk+0x50>)
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <_sbrk+0x54>)
 8004008:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800400a:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <_sbrk+0x50>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <_sbrk+0x50>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	466a      	mov	r2, sp
 800401a:	4293      	cmp	r3, r2
 800401c:	d907      	bls.n	800402e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800401e:	f000 fc29 	bl	8004874 <__errno>
 8004022:	4603      	mov	r3, r0
 8004024:	220c      	movs	r2, #12
 8004026:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	e006      	b.n	800403c <_sbrk+0x48>
	}

	heap_end += incr;
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <_sbrk+0x50>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	4a03      	ldr	r2, [pc, #12]	; (8004044 <_sbrk+0x50>)
 8004038:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800403a:	68fb      	ldr	r3, [r7, #12]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000234 	.word	0x20000234
 8004048:	20000290 	.word	0x20000290

0800404c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004050:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <SystemInit+0x84>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <SystemInit+0x84>)
 8004058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800405c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004060:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <SystemInit+0x88>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1b      	ldr	r2, [pc, #108]	; (80040d4 <SystemInit+0x88>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <SystemInit+0x88>)
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	4918      	ldr	r1, [pc, #96]	; (80040d4 <SystemInit+0x88>)
 8004072:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <SystemInit+0x8c>)
 8004074:	4013      	ands	r3, r2
 8004076:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004078:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <SystemInit+0x88>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <SystemInit+0x88>)
 800407e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <SystemInit+0x88>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a11      	ldr	r2, [pc, #68]	; (80040d4 <SystemInit+0x88>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <SystemInit+0x88>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <SystemInit+0x88>)
 800409a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800409e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <SystemInit+0x88>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4a0b      	ldr	r2, [pc, #44]	; (80040d4 <SystemInit+0x88>)
 80040a6:	f023 030f 	bic.w	r3, r3, #15
 80040aa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <SystemInit+0x88>)
 80040ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b0:	4908      	ldr	r1, [pc, #32]	; (80040d4 <SystemInit+0x88>)
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <SystemInit+0x90>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <SystemInit+0x88>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <SystemInit+0x84>)
 80040c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040c4:	609a      	str	r2, [r3, #8]
#endif
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00
 80040d4:	40021000 	.word	0x40021000
 80040d8:	f87fc00c 	.word	0xf87fc00c
 80040dc:	ff00fccc 	.word	0xff00fccc

080040e0 <NVIC_GetPriorityGrouping>:
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <NVIC_GetPriorityGrouping+0x18>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	f003 0307 	and.w	r3, r3, #7
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <NVIC_EnableIRQ>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4907      	ldr	r1, [pc, #28]	; (800412c <NVIC_EnableIRQ+0x30>)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000e100 	.word	0xe000e100

08004130 <NVIC_SetPriority>:
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800413c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004140:	2b00      	cmp	r3, #0
 8004142:	da0b      	bge.n	800415c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	490c      	ldr	r1, [pc, #48]	; (800417c <NVIC_SetPriority+0x4c>)
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	3b04      	subs	r3, #4
 8004152:	0112      	lsls	r2, r2, #4
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	440b      	add	r3, r1
 8004158:	761a      	strb	r2, [r3, #24]
}
 800415a:	e009      	b.n	8004170 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4907      	ldr	r1, [pc, #28]	; (8004180 <NVIC_SetPriority+0x50>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00
 8004180:	e000e100 	.word	0xe000e100

08004184 <NVIC_EncodePriority>:
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	2b04      	cmp	r3, #4
 80041a0:	bf28      	it	cs
 80041a2:	2304      	movcs	r3, #4
 80041a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d902      	bls.n	80041b4 <NVIC_EncodePriority+0x30>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3b03      	subs	r3, #3
 80041b2:	e000      	b.n	80041b6 <NVIC_EncodePriority+0x32>
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	401a      	ands	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	43d9      	mvns	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	4313      	orrs	r3, r2
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <LL_APB1_GRP1_EnableClock>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <LL_APB1_GRP1_EnableClock+0x2c>)
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <LL_APB1_GRP1_EnableClock+0x2c>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4013      	ands	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40021000 	.word	0x40021000

0800421c <LL_TIM_EnableCounter>:
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_TIM_EnableARRPreload>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	601a      	str	r2, [r3, #0]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_TIM_OC_DisableFast>:
{
 800425c:	b4b0      	push	{r4, r5, r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d028      	beq.n	80042be <LL_TIM_OC_DisableFast+0x62>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d023      	beq.n	80042ba <LL_TIM_OC_DisableFast+0x5e>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b10      	cmp	r3, #16
 8004276:	d01e      	beq.n	80042b6 <LL_TIM_OC_DisableFast+0x5a>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b40      	cmp	r3, #64	; 0x40
 800427c:	d019      	beq.n	80042b2 <LL_TIM_OC_DisableFast+0x56>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004284:	d013      	beq.n	80042ae <LL_TIM_OC_DisableFast+0x52>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d00d      	beq.n	80042aa <LL_TIM_OC_DisableFast+0x4e>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004294:	d007      	beq.n	80042a6 <LL_TIM_OC_DisableFast+0x4a>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d101      	bne.n	80042a2 <LL_TIM_OC_DisableFast+0x46>
 800429e:	2307      	movs	r3, #7
 80042a0:	e00e      	b.n	80042c0 <LL_TIM_OC_DisableFast+0x64>
 80042a2:	2308      	movs	r3, #8
 80042a4:	e00c      	b.n	80042c0 <LL_TIM_OC_DisableFast+0x64>
 80042a6:	2306      	movs	r3, #6
 80042a8:	e00a      	b.n	80042c0 <LL_TIM_OC_DisableFast+0x64>
 80042aa:	2305      	movs	r3, #5
 80042ac:	e008      	b.n	80042c0 <LL_TIM_OC_DisableFast+0x64>
 80042ae:	2304      	movs	r3, #4
 80042b0:	e006      	b.n	80042c0 <LL_TIM_OC_DisableFast+0x64>
 80042b2:	2303      	movs	r3, #3
 80042b4:	e004      	b.n	80042c0 <LL_TIM_OC_DisableFast+0x64>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e002      	b.n	80042c0 <LL_TIM_OC_DisableFast+0x64>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <LL_TIM_OC_DisableFast+0x64>
 80042be:	2300      	movs	r3, #0
 80042c0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3318      	adds	r3, #24
 80042c6:	461a      	mov	r2, r3
 80042c8:	4629      	mov	r1, r5
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <LL_TIM_OC_DisableFast+0x94>)
 80042cc:	5c5b      	ldrb	r3, [r3, r1]
 80042ce:	4413      	add	r3, r2
 80042d0:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80042d2:	6822      	ldr	r2, [r4, #0]
 80042d4:	4629      	mov	r1, r5
 80042d6:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <LL_TIM_OC_DisableFast+0x98>)
 80042d8:	5c5b      	ldrb	r3, [r3, r1]
 80042da:	4619      	mov	r1, r3
 80042dc:	2304      	movs	r3, #4
 80042de:	408b      	lsls	r3, r1
 80042e0:	43db      	mvns	r3, r3
 80042e2:	4013      	ands	r3, r2
 80042e4:	6023      	str	r3, [r4, #0]
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bcb0      	pop	{r4, r5, r7}
 80042ee:	4770      	bx	lr
 80042f0:	08007ee8 	.word	0x08007ee8
 80042f4:	08007ef4 	.word	0x08007ef4

080042f8 <LL_TIM_SetClockSource>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800430a:	f023 0307 	bic.w	r3, r3, #7
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	609a      	str	r2, [r3, #8]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_TIM_SetTriggerOutput>:
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <LL_TIM_DisableMasterSlaveMode>:
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_TIM_EnableIT_UPDATE>:
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08e      	sub	sp, #56	; 0x38
 800438c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800438e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	609a      	str	r2, [r3, #8]
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	2220      	movs	r2, #32
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fa8f 	bl	80048c8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80043aa:	2001      	movs	r0, #1
 80043ac:	f7ff ff1e 	bl	80041ec <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 80043b0:	f7ff fe96 	bl	80040e0 <NVIC_GetPriorityGrouping>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2202      	movs	r2, #2
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fee2 	bl	8004184 <NVIC_EncodePriority>
 80043c0:	4603      	mov	r3, r0
 80043c2:	4619      	mov	r1, r3
 80043c4:	201c      	movs	r0, #28
 80043c6:	f7ff feb3 	bl	8004130 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80043ca:	201c      	movs	r0, #28
 80043cc:	f7ff fe96 	bl	80040fc <NVIC_EnableIRQ>

  //TIM2 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 80043d0:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80043d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 80043da:	2313      	movs	r3, #19
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80043de:	2300      	movs	r3, #0
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80043e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e6:	4619      	mov	r1, r3
 80043e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80043ec:	f7fd f932 	bl	8001654 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM2);
  LL_TIM_EnableARRPreload(TIM2);
 80043f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80043f4:	f7ff ff22 	bl	800423c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80043f8:	2100      	movs	r1, #0
 80043fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80043fe:	f7ff ff7b 	bl	80042f8 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8004402:	2310      	movs	r3, #16
 8004404:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	461a      	mov	r2, r3
 800441a:	2101      	movs	r1, #1
 800441c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004420:	f7fd f98c 	bl	800173c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8004424:	2101      	movs	r1, #1
 8004426:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800442a:	f7ff ff17 	bl	800425c <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800442e:	2100      	movs	r1, #0
 8004430:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004434:	f7ff ff75 	bl	8004322 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004438:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800443c:	f7ff ff84 	bl	8004348 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM2);
 8004440:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004444:	f7ff ff90 	bl	8004368 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8004448:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800444c:	f7ff fee6 	bl	800421c <LL_TIM_EnableCounter>

}
 8004450:	bf00      	nop
 8004452:	3738      	adds	r7, #56	; 0x38
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004490 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800445c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800445e:	e003      	b.n	8004468 <LoopCopyDataInit>

08004460 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004462:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004464:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004466:	3104      	adds	r1, #4

08004468 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004468:	480b      	ldr	r0, [pc, #44]	; (8004498 <LoopForever+0xa>)
	ldr	r3, =_edata
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <LoopForever+0xe>)
	adds	r2, r0, r1
 800446c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800446e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004470:	d3f6      	bcc.n	8004460 <CopyDataInit>
	ldr	r2, =_sbss
 8004472:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004474:	e002      	b.n	800447c <LoopFillZerobss>

08004476 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004476:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004478:	f842 3b04 	str.w	r3, [r2], #4

0800447c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <LoopForever+0x16>)
	cmp	r2, r3
 800447e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004480:	d3f9      	bcc.n	8004476 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004482:	f7ff fde3 	bl	800404c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004486:	f000 f9fb 	bl	8004880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800448a:	f7ff fa31 	bl	80038f0 <main>

0800448e <LoopForever>:

LoopForever:
    b LoopForever
 800448e:	e7fe      	b.n	800448e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004490:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004494:	0800830c 	.word	0x0800830c
	ldr	r0, =_sdata
 8004498:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800449c:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 80044a0:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 80044a4:	2000028c 	.word	0x2000028c

080044a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044a8:	e7fe      	b.n	80044a8 <ADC1_2_IRQHandler>
	...

080044ac <hts221_read_byte>:

//uint8_t addres_temp = 0xBEU;
uint8_t addres1 = HTS221_DEVICE_ADDRESS_1;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres1, 0));
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <hts221_read_byte+0x30>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	79fa      	ldrb	r2, [r7, #7]
 80044c0:	f107 000f 	add.w	r0, r7, #15
 80044c4:	2100      	movs	r1, #0
 80044c6:	9100      	str	r1, [sp, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	f7fe fff1 	bl	80034b0 <i2c_master_read>
 80044ce:	4603      	mov	r3, r0
 80044d0:	781b      	ldrb	r3, [r3, #0]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000014 	.word	0x20000014

080044e0 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t cal)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	460a      	mov	r2, r1
 80044ea:	71fb      	strb	r3, [r7, #7]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(cal, reg_addr, addres1, 0);
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <hts221_write_byte+0x28>)
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	79f9      	ldrb	r1, [r7, #7]
 80044f6:	79b8      	ldrb	r0, [r7, #6]
 80044f8:	2300      	movs	r3, #0
 80044fa:	f7fe ff95 	bl	8003428 <i2c_master_write>
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000014 	.word	0x20000014

0800450c <hts221_readArray>:

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af02      	add	r7, sp, #8
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
 8004518:	4613      	mov	r3, r2
 800451a:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres1, 1);
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <hts221_readArray+0x2c>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	78b9      	ldrb	r1, [r7, #2]
 8004524:	2001      	movs	r0, #1
 8004526:	9000      	str	r0, [sp, #0]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fe ffc1 	bl	80034b0 <i2c_master_read>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000014 	.word	0x20000014

0800453c <hts221_get_te>:
	hts221_readArray(temp, HTS221_ADDRESS_TEMP, 2);

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

float hts221_get_te(){
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
	int16_t t1_degC_v;
	uint8_t data[4];
	uint8_t temp;
	float cal;

	temp = hts221_read_byte(HTS221_T1_T0);
 8004542:	2035      	movs	r0, #53	; 0x35
 8004544:	f7ff ffb2 	bl	80044ac <hts221_read_byte>
 8004548:	4603      	mov	r3, r0
 800454a:	75fb      	strb	r3, [r7, #23]
	hts221_readArray(data, HTS221_T0_DEGC_X8, 2);
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	2202      	movs	r2, #2
 8004550:	2132      	movs	r1, #50	; 0x32
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ffda 	bl	800450c <hts221_readArray>

	t1_degC_v = ((((uint16_t)(temp & 0x0C)) << 6) | ((uint16_t)data[1]))>>3;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	019b      	lsls	r3, r3, #6
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	797a      	ldrb	r2, [r7, #5]
 8004562:	4313      	orrs	r3, r2
 8004564:	10db      	asrs	r3, r3, #3
 8004566:	82bb      	strh	r3, [r7, #20]
	t0_degC_v = ((((uint16_t)(temp & 0x03)) << 8) | ((uint16_t)data[0]))>>3;
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004570:	793a      	ldrb	r2, [r7, #4]
 8004572:	4313      	orrs	r3, r2
 8004574:	10db      	asrs	r3, r3, #3
 8004576:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_TEMP_OUT_REG, 2);
 8004578:	1d3b      	adds	r3, r7, #4
 800457a:	2202      	movs	r2, #2
 800457c:	212a      	movs	r1, #42	; 0x2a
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ffc4 	bl	800450c <hts221_readArray>
	t_o = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 8004584:	797b      	ldrb	r3, [r7, #5]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	b21a      	sxth	r2, r3
 800458a:	793b      	ldrb	r3, [r7, #4]
 800458c:	b21b      	sxth	r3, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data, HTS221_T0_OUT, 4);
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	2204      	movs	r2, #4
 8004596:	213c      	movs	r1, #60	; 0x3c
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ffb7 	bl	800450c <hts221_readArray>
	t1_o = (((uint16_t)data[3])<<8) | (uint16_t)data[2];
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	b21a      	sxth	r2, r3
 80045a4:	79bb      	ldrb	r3, [r7, #6]
 80045a6:	b21b      	sxth	r3, r3
 80045a8:	4313      	orrs	r3, r2
 80045aa:	81fb      	strh	r3, [r7, #14]
	t0_o = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 80045ac:	797b      	ldrb	r3, [r7, #5]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	b21a      	sxth	r2, r3
 80045b2:	793b      	ldrb	r3, [r7, #4]
 80045b4:	b21b      	sxth	r3, r3
 80045b6:	4313      	orrs	r3, r2
 80045b8:	81bb      	strh	r3, [r7, #12]
	/*Vypocet*/
	cal = ((((int32_t)(t_o - t0_o))*((int32_t)(t1_degC_v - t0_degC_v)*10))/(t1_o - t0_o) + t0_degC_v*10)/10;
 80045ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80045be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80045c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80045cc:	1a8a      	subs	r2, r1, r2
 80045ce:	fb02 f203 	mul.w	r2, r2, r3
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4619      	mov	r1, r3
 80045dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80045e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	fb91 f1f3 	sdiv	r1, r1, r3
 80045ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	440b      	add	r3, r1
 80045f8:	4a09      	ldr	r2, [pc, #36]	; (8004620 <hts221_get_te+0xe4>)
 80045fa:	fb82 1203 	smull	r1, r2, r2, r3
 80045fe:	1092      	asrs	r2, r2, #2
 8004600:	17db      	asrs	r3, r3, #31
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800460c:	edc7 7a02 	vstr	s15, [r7, #8]

	return cal;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	ee07 3a90 	vmov	s15, r3
}
 8004616:	eeb0 0a67 	vmov.f32	s0, s15
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	66666667 	.word	0x66666667

08004624 <hts221_get_hu>:

uint16_t hts221_get_hu(){
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
	int16_t h1_t0_o;
	int16_t h_t_o;
	int16_t h0_rh;
	int16_t h1_rh;
	uint8_t data[2];
	uint16_t cal=0;
 800462a:	2300      	movs	r3, #0
 800462c:	81fb      	strh	r3, [r7, #14]

	hts221_readArray(data, HTS221_H0_RH_X2, 2);
 800462e:	463b      	mov	r3, r7
 8004630:	2202      	movs	r2, #2
 8004632:	2130      	movs	r1, #48	; 0x30
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff69 	bl	800450c <hts221_readArray>
	h0_rh = data[0]>>1;
 800463a:	783b      	ldrb	r3, [r7, #0]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	b2db      	uxtb	r3, r3
 8004640:	81bb      	strh	r3, [r7, #12]
	h1_rh = data[1]>>1;
 8004642:	787b      	ldrb	r3, [r7, #1]
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	817b      	strh	r3, [r7, #10]

	hts221_readArray(data, HTS221_HR_OUT_REG, 2);
 800464a:	463b      	mov	r3, r7
 800464c:	2202      	movs	r2, #2
 800464e:	2128      	movs	r1, #40	; 0x28
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff5b 	bl	800450c <hts221_readArray>
	h_t_o = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 8004656:	787b      	ldrb	r3, [r7, #1]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	b21a      	sxth	r2, r3
 800465c:	783b      	ldrb	r3, [r7, #0]
 800465e:	b21b      	sxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	813b      	strh	r3, [r7, #8]

	hts221_readArray(data, HTS221_H0_T0_OUT, 2);
 8004664:	463b      	mov	r3, r7
 8004666:	2202      	movs	r2, #2
 8004668:	2136      	movs	r1, #54	; 0x36
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ff4e 	bl	800450c <hts221_readArray>
	h0_t0_o = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 8004670:	787b      	ldrb	r3, [r7, #1]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	b21a      	sxth	r2, r3
 8004676:	783b      	ldrb	r3, [r7, #0]
 8004678:	b21b      	sxth	r3, r3
 800467a:	4313      	orrs	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]

	hts221_readArray(data, HTS221_H1_T0_OUT, 2);
 800467e:	463b      	mov	r3, r7
 8004680:	2202      	movs	r2, #2
 8004682:	213a      	movs	r1, #58	; 0x3a
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff41 	bl	800450c <hts221_readArray>
	h1_t0_o = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 800468a:	787b      	ldrb	r3, [r7, #1]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	b21a      	sxth	r2, r3
 8004690:	783b      	ldrb	r3, [r7, #0]
 8004692:	b21b      	sxth	r3, r3
 8004694:	4313      	orrs	r3, r2
 8004696:	80bb      	strh	r3, [r7, #4]

	/*Vypocet*/
	cal = ((int32_t)(h_t_o - h0_t0_o)) * ((int32_t)(h1_rh - h0_rh)*10)/(h1_t0_o - h0_t0_o) + h0_rh*10;
 8004698:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800469c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80046a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80046aa:	1a8a      	subs	r2, r1, r2
 80046ac:	fb02 f203 	mul.w	r2, r2, r3
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4619      	mov	r1, r3
 80046ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80046be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	fb91 f3f3 	sdiv	r3, r1, r3
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	89bb      	ldrh	r3, [r7, #12]
 80046cc:	4619      	mov	r1, r3
 80046ce:	0089      	lsls	r1, r1, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	81fb      	strh	r3, [r7, #14]

	cal=cal/10;
 80046da:	89fb      	ldrh	r3, [r7, #14]
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <hts221_get_hu+0xcc>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	08db      	lsrs	r3, r3, #3
 80046e4:	81fb      	strh	r3, [r7, #14]
	return cal;
 80046e6:	89fb      	ldrh	r3, [r7, #14]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	cccccccd 	.word	0xcccccccd

080046f4 <hts221_init>:

uint8_t hts221_init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80046fe:	2064      	movs	r0, #100	; 0x64
 8004700:	f7fd fb5c 	bl	8001dbc <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8004704:	200f      	movs	r0, #15
 8004706:	f7ff fed1 	bl	80044ac <hts221_read_byte>
 800470a:	4603      	mov	r3, r0
 800470c:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 800470e:	79bb      	ldrb	r3, [r7, #6]
 8004710:	2bbc      	cmp	r3, #188	; 0xbc
 8004712:	d102      	bne.n	800471a <hts221_init+0x26>
	{
		status = 1;
 8004714:	2301      	movs	r3, #1
 8004716:	71fb      	strb	r3, [r7, #7]
 8004718:	e00c      	b.n	8004734 <hts221_init+0x40>
	}
	else			//if the device is not found on one address, try another one
	{
		//addres_temp = addres1;
		val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 800471a:	200f      	movs	r0, #15
 800471c:	f7ff fec6 	bl	80044ac <hts221_read_byte>
 8004720:	4603      	mov	r3, r0
 8004722:	71bb      	strb	r3, [r7, #6]
		if(val == HTS221_WHO_AM_I_VALUE)
 8004724:	79bb      	ldrb	r3, [r7, #6]
 8004726:	2bbc      	cmp	r3, #188	; 0xbc
 8004728:	d102      	bne.n	8004730 <hts221_init+0x3c>
		{
			status = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	71fb      	strb	r3, [r7, #7]
 800472e:	e001      	b.n	8004734 <hts221_init+0x40>
		}
		else
		{
			status = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	hts221_write_byte(HTS221_ADDRESS_CTRL1, 0x81);
 8004734:	2181      	movs	r1, #129	; 0x81
 8004736:	2020      	movs	r0, #32
 8004738:	f7ff fed2 	bl	80044e0 <hts221_write_byte>

	return status;
 800473c:	79fb      	ldrb	r3, [r7, #7]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <lps25hb_read_byte>:
#include "i2c.h"

uint8_t addres = 0xB8;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af02      	add	r7, sp, #8
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <lps25hb_read_byte+0x30>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	79fa      	ldrb	r2, [r7, #7]
 800475c:	f107 000f 	add.w	r0, r7, #15
 8004760:	2100      	movs	r1, #0
 8004762:	9100      	str	r1, [sp, #0]
 8004764:	2101      	movs	r1, #1
 8004766:	f7fe fea3 	bl	80034b0 <i2c_master_read>
 800476a:	4603      	mov	r3, r0
 800476c:	781b      	ldrb	r3, [r3, #0]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000015 	.word	0x20000015

0800477c <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	460a      	mov	r2, r1
 8004786:	71fb      	strb	r3, [r7, #7]
 8004788:	4613      	mov	r3, r2
 800478a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <lps25hb_write_byte+0x28>)
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	79f9      	ldrb	r1, [r7, #7]
 8004792:	79b8      	ldrb	r0, [r7, #6]
 8004794:	2300      	movs	r3, #0
 8004796:	f7fe fe47 	bl	8003428 <i2c_master_write>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000015 	.word	0x20000015

080047a8 <lps25hb_get_pre>:
void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
	i2c_master_read(data, length, reg, addres, 1);
}

float lps25hb_get_pre(){
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
	uint8_t press_out_H;
	uint8_t press_out_XL;
	uint8_t press_out_L;
	float cal;

	press_out_H = lps25hb_read_byte(LPS25HB_PRESS_OUT_H);
 80047ae:	202a      	movs	r0, #42	; 0x2a
 80047b0:	f7ff ffca 	bl	8004748 <lps25hb_read_byte>
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
	press_out_XL = lps25hb_read_byte(LPS25HB_PRESS_OUT_XL);
 80047b8:	2028      	movs	r0, #40	; 0x28
 80047ba:	f7ff ffc5 	bl	8004748 <lps25hb_read_byte>
 80047be:	4603      	mov	r3, r0
 80047c0:	71bb      	strb	r3, [r7, #6]
	press_out_L = lps25hb_read_byte(LPS25HB_PRESS_OUT_L);
 80047c2:	2029      	movs	r0, #41	; 0x29
 80047c4:	f7ff ffc0 	bl	8004748 <lps25hb_read_byte>
 80047c8:	4603      	mov	r3, r0
 80047ca:	717b      	strb	r3, [r7, #5]
  /*Vypocet*/
	cal = (press_out_H << 16 | press_out_L << 8 | press_out_XL)/4096.0;
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	041a      	lsls	r2, r3, #16
 80047d0:	797b      	ldrb	r3, [r7, #5]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	431a      	orrs	r2, r3
 80047d6:	79bb      	ldrb	r3, [r7, #6]
 80047d8:	4313      	orrs	r3, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fb fea2 	bl	8000524 <__aeabi_i2d>
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <lps25hb_get_pre+0x64>)
 80047e6:	f7fc f831 	bl	800084c <__aeabi_ddiv>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f7fc f9d9 	bl	8000ba8 <__aeabi_d2f>
 80047f6:	4603      	mov	r3, r0
 80047f8:	603b      	str	r3, [r7, #0]

	return cal;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	ee07 3a90 	vmov	s15, r3
}
 8004800:	eeb0 0a67 	vmov.f32	s0, s15
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40b00000 	.word	0x40b00000

08004810 <lps25hb_init>:

uint8_t lps25hb_init(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800481a:	2064      	movs	r0, #100	; 0x64
 800481c:	f7fd face 	bl	8001dbc <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8004820:	200f      	movs	r0, #15
 8004822:	f7ff ff91 	bl	8004748 <lps25hb_read_byte>
 8004826:	4603      	mov	r3, r0
 8004828:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 800482a:	79bb      	ldrb	r3, [r7, #6]
 800482c:	2bb1      	cmp	r3, #177	; 0xb1
 800482e:	d102      	bne.n	8004836 <lps25hb_init+0x26>
	{
		status = 1;
 8004830:	2301      	movs	r3, #1
 8004832:	71fb      	strb	r3, [r7, #7]
 8004834:	e00f      	b.n	8004856 <lps25hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LPS25HB_DEVICE_ADDRESS_1;
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <lps25hb_init+0x60>)
 8004838:	22ba      	movs	r2, #186	; 0xba
 800483a:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 800483c:	200f      	movs	r0, #15
 800483e:	f7ff ff83 	bl	8004748 <lps25hb_read_byte>
 8004842:	4603      	mov	r3, r0
 8004844:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 8004846:	79bb      	ldrb	r3, [r7, #6]
 8004848:	2bb1      	cmp	r3, #177	; 0xb1
 800484a:	d102      	bne.n	8004852 <lps25hb_init+0x42>
		{
			status = 1;
 800484c:	2301      	movs	r3, #1
 800484e:	71fb      	strb	r3, [r7, #7]
 8004850:	e001      	b.n	8004856 <lps25hb_init+0x46>
		}
		else
		{
			status = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	71fb      	strb	r3, [r7, #7]
		}
	}

	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, 0x90);
 8004856:	2190      	movs	r1, #144	; 0x90
 8004858:	2020      	movs	r0, #32
 800485a:	f7ff ff8f 	bl	800477c <lps25hb_write_byte>
	LL_mDelay(100);
 800485e:	2064      	movs	r0, #100	; 0x64
 8004860:	f7fd faac 	bl	8001dbc <LL_mDelay>
	return status;
 8004864:	79fb      	ldrb	r3, [r7, #7]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000015 	.word	0x20000015

08004874 <__errno>:
 8004874:	4b01      	ldr	r3, [pc, #4]	; (800487c <__errno+0x8>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000018 	.word	0x20000018

08004880 <__libc_init_array>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	4d0d      	ldr	r5, [pc, #52]	; (80048b8 <__libc_init_array+0x38>)
 8004884:	4c0d      	ldr	r4, [pc, #52]	; (80048bc <__libc_init_array+0x3c>)
 8004886:	1b64      	subs	r4, r4, r5
 8004888:	10a4      	asrs	r4, r4, #2
 800488a:	2600      	movs	r6, #0
 800488c:	42a6      	cmp	r6, r4
 800488e:	d109      	bne.n	80048a4 <__libc_init_array+0x24>
 8004890:	4d0b      	ldr	r5, [pc, #44]	; (80048c0 <__libc_init_array+0x40>)
 8004892:	4c0c      	ldr	r4, [pc, #48]	; (80048c4 <__libc_init_array+0x44>)
 8004894:	f003 fb06 	bl	8007ea4 <_init>
 8004898:	1b64      	subs	r4, r4, r5
 800489a:	10a4      	asrs	r4, r4, #2
 800489c:	2600      	movs	r6, #0
 800489e:	42a6      	cmp	r6, r4
 80048a0:	d105      	bne.n	80048ae <__libc_init_array+0x2e>
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a8:	4798      	blx	r3
 80048aa:	3601      	adds	r6, #1
 80048ac:	e7ee      	b.n	800488c <__libc_init_array+0xc>
 80048ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b2:	4798      	blx	r3
 80048b4:	3601      	adds	r6, #1
 80048b6:	e7f2      	b.n	800489e <__libc_init_array+0x1e>
 80048b8:	08008304 	.word	0x08008304
 80048bc:	08008304 	.word	0x08008304
 80048c0:	08008304 	.word	0x08008304
 80048c4:	08008308 	.word	0x08008308

080048c8 <memset>:
 80048c8:	4402      	add	r2, r0
 80048ca:	4603      	mov	r3, r0
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d100      	bne.n	80048d2 <memset+0xa>
 80048d0:	4770      	bx	lr
 80048d2:	f803 1b01 	strb.w	r1, [r3], #1
 80048d6:	e7f9      	b.n	80048cc <memset+0x4>

080048d8 <__cvt>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	ec55 4b10 	vmov	r4, r5, d0
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	460e      	mov	r6, r1
 80048e4:	4619      	mov	r1, r3
 80048e6:	462b      	mov	r3, r5
 80048e8:	bfbb      	ittet	lt
 80048ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048ee:	461d      	movlt	r5, r3
 80048f0:	2300      	movge	r3, #0
 80048f2:	232d      	movlt	r3, #45	; 0x2d
 80048f4:	700b      	strb	r3, [r1, #0]
 80048f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048fc:	4691      	mov	r9, r2
 80048fe:	f023 0820 	bic.w	r8, r3, #32
 8004902:	bfbc      	itt	lt
 8004904:	4622      	movlt	r2, r4
 8004906:	4614      	movlt	r4, r2
 8004908:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800490c:	d005      	beq.n	800491a <__cvt+0x42>
 800490e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004912:	d100      	bne.n	8004916 <__cvt+0x3e>
 8004914:	3601      	adds	r6, #1
 8004916:	2102      	movs	r1, #2
 8004918:	e000      	b.n	800491c <__cvt+0x44>
 800491a:	2103      	movs	r1, #3
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	ab02      	add	r3, sp, #8
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	ec45 4b10 	vmov	d0, r4, r5
 8004928:	4653      	mov	r3, sl
 800492a:	4632      	mov	r2, r6
 800492c:	f000 fcf8 	bl	8005320 <_dtoa_r>
 8004930:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004934:	4607      	mov	r7, r0
 8004936:	d102      	bne.n	800493e <__cvt+0x66>
 8004938:	f019 0f01 	tst.w	r9, #1
 800493c:	d022      	beq.n	8004984 <__cvt+0xac>
 800493e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004942:	eb07 0906 	add.w	r9, r7, r6
 8004946:	d110      	bne.n	800496a <__cvt+0x92>
 8004948:	783b      	ldrb	r3, [r7, #0]
 800494a:	2b30      	cmp	r3, #48	; 0x30
 800494c:	d10a      	bne.n	8004964 <__cvt+0x8c>
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fc f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800495a:	b918      	cbnz	r0, 8004964 <__cvt+0x8c>
 800495c:	f1c6 0601 	rsb	r6, r6, #1
 8004960:	f8ca 6000 	str.w	r6, [sl]
 8004964:	f8da 3000 	ldr.w	r3, [sl]
 8004968:	4499      	add	r9, r3
 800496a:	2200      	movs	r2, #0
 800496c:	2300      	movs	r3, #0
 800496e:	4620      	mov	r0, r4
 8004970:	4629      	mov	r1, r5
 8004972:	f7fc f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004976:	b108      	cbz	r0, 800497c <__cvt+0xa4>
 8004978:	f8cd 900c 	str.w	r9, [sp, #12]
 800497c:	2230      	movs	r2, #48	; 0x30
 800497e:	9b03      	ldr	r3, [sp, #12]
 8004980:	454b      	cmp	r3, r9
 8004982:	d307      	bcc.n	8004994 <__cvt+0xbc>
 8004984:	9b03      	ldr	r3, [sp, #12]
 8004986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004988:	1bdb      	subs	r3, r3, r7
 800498a:	4638      	mov	r0, r7
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	b004      	add	sp, #16
 8004990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004994:	1c59      	adds	r1, r3, #1
 8004996:	9103      	str	r1, [sp, #12]
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e7f0      	b.n	800497e <__cvt+0xa6>

0800499c <__exponent>:
 800499c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800499e:	4603      	mov	r3, r0
 80049a0:	2900      	cmp	r1, #0
 80049a2:	bfb8      	it	lt
 80049a4:	4249      	neglt	r1, r1
 80049a6:	f803 2b02 	strb.w	r2, [r3], #2
 80049aa:	bfb4      	ite	lt
 80049ac:	222d      	movlt	r2, #45	; 0x2d
 80049ae:	222b      	movge	r2, #43	; 0x2b
 80049b0:	2909      	cmp	r1, #9
 80049b2:	7042      	strb	r2, [r0, #1]
 80049b4:	dd2a      	ble.n	8004a0c <__exponent+0x70>
 80049b6:	f10d 0407 	add.w	r4, sp, #7
 80049ba:	46a4      	mov	ip, r4
 80049bc:	270a      	movs	r7, #10
 80049be:	46a6      	mov	lr, r4
 80049c0:	460a      	mov	r2, r1
 80049c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80049c6:	fb07 1516 	mls	r5, r7, r6, r1
 80049ca:	3530      	adds	r5, #48	; 0x30
 80049cc:	2a63      	cmp	r2, #99	; 0x63
 80049ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80049d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049d6:	4631      	mov	r1, r6
 80049d8:	dcf1      	bgt.n	80049be <__exponent+0x22>
 80049da:	3130      	adds	r1, #48	; 0x30
 80049dc:	f1ae 0502 	sub.w	r5, lr, #2
 80049e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049e4:	1c44      	adds	r4, r0, #1
 80049e6:	4629      	mov	r1, r5
 80049e8:	4561      	cmp	r1, ip
 80049ea:	d30a      	bcc.n	8004a02 <__exponent+0x66>
 80049ec:	f10d 0209 	add.w	r2, sp, #9
 80049f0:	eba2 020e 	sub.w	r2, r2, lr
 80049f4:	4565      	cmp	r5, ip
 80049f6:	bf88      	it	hi
 80049f8:	2200      	movhi	r2, #0
 80049fa:	4413      	add	r3, r2
 80049fc:	1a18      	subs	r0, r3, r0
 80049fe:	b003      	add	sp, #12
 8004a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a0a:	e7ed      	b.n	80049e8 <__exponent+0x4c>
 8004a0c:	2330      	movs	r3, #48	; 0x30
 8004a0e:	3130      	adds	r1, #48	; 0x30
 8004a10:	7083      	strb	r3, [r0, #2]
 8004a12:	70c1      	strb	r1, [r0, #3]
 8004a14:	1d03      	adds	r3, r0, #4
 8004a16:	e7f1      	b.n	80049fc <__exponent+0x60>

08004a18 <_printf_float>:
 8004a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1c:	ed2d 8b02 	vpush	{d8}
 8004a20:	b08d      	sub	sp, #52	; 0x34
 8004a22:	460c      	mov	r4, r1
 8004a24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a28:	4616      	mov	r6, r2
 8004a2a:	461f      	mov	r7, r3
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	f001 fa63 	bl	8005ef8 <_localeconv_r>
 8004a32:	f8d0 a000 	ldr.w	sl, [r0]
 8004a36:	4650      	mov	r0, sl
 8004a38:	f7fb fbca 	bl	80001d0 <strlen>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	f8d8 3000 	ldr.w	r3, [r8]
 8004a48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a4c:	3307      	adds	r3, #7
 8004a4e:	f023 0307 	bic.w	r3, r3, #7
 8004a52:	f103 0208 	add.w	r2, r3, #8
 8004a56:	f8c8 2000 	str.w	r2, [r8]
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a6a:	9307      	str	r3, [sp, #28]
 8004a6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a70:	ee08 0a10 	vmov	s16, r0
 8004a74:	4b9f      	ldr	r3, [pc, #636]	; (8004cf4 <_printf_float+0x2dc>)
 8004a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	f7fc f855 	bl	8000b2c <__aeabi_dcmpun>
 8004a82:	bb88      	cbnz	r0, 8004ae8 <_printf_float+0xd0>
 8004a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a88:	4b9a      	ldr	r3, [pc, #616]	; (8004cf4 <_printf_float+0x2dc>)
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8e:	f7fc f82f 	bl	8000af0 <__aeabi_dcmple>
 8004a92:	bb48      	cbnz	r0, 8004ae8 <_printf_float+0xd0>
 8004a94:	2200      	movs	r2, #0
 8004a96:	2300      	movs	r3, #0
 8004a98:	4640      	mov	r0, r8
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	f7fc f81e 	bl	8000adc <__aeabi_dcmplt>
 8004aa0:	b110      	cbz	r0, 8004aa8 <_printf_float+0x90>
 8004aa2:	232d      	movs	r3, #45	; 0x2d
 8004aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa8:	4b93      	ldr	r3, [pc, #588]	; (8004cf8 <_printf_float+0x2e0>)
 8004aaa:	4894      	ldr	r0, [pc, #592]	; (8004cfc <_printf_float+0x2e4>)
 8004aac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ab0:	bf94      	ite	ls
 8004ab2:	4698      	movls	r8, r3
 8004ab4:	4680      	movhi	r8, r0
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	6123      	str	r3, [r4, #16]
 8004aba:	9b05      	ldr	r3, [sp, #20]
 8004abc:	f023 0204 	bic.w	r2, r3, #4
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	f04f 0900 	mov.w	r9, #0
 8004ac6:	9700      	str	r7, [sp, #0]
 8004ac8:	4633      	mov	r3, r6
 8004aca:	aa0b      	add	r2, sp, #44	; 0x2c
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 f9d8 	bl	8004e84 <_printf_common>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f040 8090 	bne.w	8004bfa <_printf_float+0x1e2>
 8004ada:	f04f 30ff 	mov.w	r0, #4294967295
 8004ade:	b00d      	add	sp, #52	; 0x34
 8004ae0:	ecbd 8b02 	vpop	{d8}
 8004ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	4640      	mov	r0, r8
 8004aee:	4649      	mov	r1, r9
 8004af0:	f7fc f81c 	bl	8000b2c <__aeabi_dcmpun>
 8004af4:	b140      	cbz	r0, 8004b08 <_printf_float+0xf0>
 8004af6:	464b      	mov	r3, r9
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bfbc      	itt	lt
 8004afc:	232d      	movlt	r3, #45	; 0x2d
 8004afe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b02:	487f      	ldr	r0, [pc, #508]	; (8004d00 <_printf_float+0x2e8>)
 8004b04:	4b7f      	ldr	r3, [pc, #508]	; (8004d04 <_printf_float+0x2ec>)
 8004b06:	e7d1      	b.n	8004aac <_printf_float+0x94>
 8004b08:	6863      	ldr	r3, [r4, #4]
 8004b0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b0e:	9206      	str	r2, [sp, #24]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	d13f      	bne.n	8004b94 <_printf_float+0x17c>
 8004b14:	2306      	movs	r3, #6
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	9b05      	ldr	r3, [sp, #20]
 8004b1a:	6861      	ldr	r1, [r4, #4]
 8004b1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b20:	2300      	movs	r3, #0
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	ab0a      	add	r3, sp, #40	; 0x28
 8004b26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b2a:	ab09      	add	r3, sp, #36	; 0x24
 8004b2c:	ec49 8b10 	vmov	d0, r8, r9
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	6022      	str	r2, [r4, #0]
 8004b34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f7ff fecd 	bl	80048d8 <__cvt>
 8004b3e:	9b06      	ldr	r3, [sp, #24]
 8004b40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b42:	2b47      	cmp	r3, #71	; 0x47
 8004b44:	4680      	mov	r8, r0
 8004b46:	d108      	bne.n	8004b5a <_printf_float+0x142>
 8004b48:	1cc8      	adds	r0, r1, #3
 8004b4a:	db02      	blt.n	8004b52 <_printf_float+0x13a>
 8004b4c:	6863      	ldr	r3, [r4, #4]
 8004b4e:	4299      	cmp	r1, r3
 8004b50:	dd41      	ble.n	8004bd6 <_printf_float+0x1be>
 8004b52:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b56:	fa5f fb8b 	uxtb.w	fp, fp
 8004b5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b5e:	d820      	bhi.n	8004ba2 <_printf_float+0x18a>
 8004b60:	3901      	subs	r1, #1
 8004b62:	465a      	mov	r2, fp
 8004b64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b68:	9109      	str	r1, [sp, #36]	; 0x24
 8004b6a:	f7ff ff17 	bl	800499c <__exponent>
 8004b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b70:	1813      	adds	r3, r2, r0
 8004b72:	2a01      	cmp	r2, #1
 8004b74:	4681      	mov	r9, r0
 8004b76:	6123      	str	r3, [r4, #16]
 8004b78:	dc02      	bgt.n	8004b80 <_printf_float+0x168>
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	07d2      	lsls	r2, r2, #31
 8004b7e:	d501      	bpl.n	8004b84 <_printf_float+0x16c>
 8004b80:	3301      	adds	r3, #1
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d09c      	beq.n	8004ac6 <_printf_float+0xae>
 8004b8c:	232d      	movs	r3, #45	; 0x2d
 8004b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b92:	e798      	b.n	8004ac6 <_printf_float+0xae>
 8004b94:	9a06      	ldr	r2, [sp, #24]
 8004b96:	2a47      	cmp	r2, #71	; 0x47
 8004b98:	d1be      	bne.n	8004b18 <_printf_float+0x100>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1bc      	bne.n	8004b18 <_printf_float+0x100>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e7b9      	b.n	8004b16 <_printf_float+0xfe>
 8004ba2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ba6:	d118      	bne.n	8004bda <_printf_float+0x1c2>
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	dd0b      	ble.n	8004bc6 <_printf_float+0x1ae>
 8004bae:	6121      	str	r1, [r4, #16]
 8004bb0:	b913      	cbnz	r3, 8004bb8 <_printf_float+0x1a0>
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	07d0      	lsls	r0, r2, #31
 8004bb6:	d502      	bpl.n	8004bbe <_printf_float+0x1a6>
 8004bb8:	3301      	adds	r3, #1
 8004bba:	440b      	add	r3, r1
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bc0:	f04f 0900 	mov.w	r9, #0
 8004bc4:	e7de      	b.n	8004b84 <_printf_float+0x16c>
 8004bc6:	b913      	cbnz	r3, 8004bce <_printf_float+0x1b6>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	07d2      	lsls	r2, r2, #31
 8004bcc:	d501      	bpl.n	8004bd2 <_printf_float+0x1ba>
 8004bce:	3302      	adds	r3, #2
 8004bd0:	e7f4      	b.n	8004bbc <_printf_float+0x1a4>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e7f2      	b.n	8004bbc <_printf_float+0x1a4>
 8004bd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bdc:	4299      	cmp	r1, r3
 8004bde:	db05      	blt.n	8004bec <_printf_float+0x1d4>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	6121      	str	r1, [r4, #16]
 8004be4:	07d8      	lsls	r0, r3, #31
 8004be6:	d5ea      	bpl.n	8004bbe <_printf_float+0x1a6>
 8004be8:	1c4b      	adds	r3, r1, #1
 8004bea:	e7e7      	b.n	8004bbc <_printf_float+0x1a4>
 8004bec:	2900      	cmp	r1, #0
 8004bee:	bfd4      	ite	le
 8004bf0:	f1c1 0202 	rsble	r2, r1, #2
 8004bf4:	2201      	movgt	r2, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	e7e0      	b.n	8004bbc <_printf_float+0x1a4>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	055a      	lsls	r2, r3, #21
 8004bfe:	d407      	bmi.n	8004c10 <_printf_float+0x1f8>
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	4642      	mov	r2, r8
 8004c04:	4631      	mov	r1, r6
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d12c      	bne.n	8004c68 <_printf_float+0x250>
 8004c0e:	e764      	b.n	8004ada <_printf_float+0xc2>
 8004c10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c14:	f240 80e0 	bls.w	8004dd8 <_printf_float+0x3c0>
 8004c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f7fb ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d034      	beq.n	8004c92 <_printf_float+0x27a>
 8004c28:	4a37      	ldr	r2, [pc, #220]	; (8004d08 <_printf_float+0x2f0>)
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	f43f af51 	beq.w	8004ada <_printf_float+0xc2>
 8004c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	db02      	blt.n	8004c46 <_printf_float+0x22e>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	07d8      	lsls	r0, r3, #31
 8004c44:	d510      	bpl.n	8004c68 <_printf_float+0x250>
 8004c46:	ee18 3a10 	vmov	r3, s16
 8004c4a:	4652      	mov	r2, sl
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f af41 	beq.w	8004ada <_printf_float+0xc2>
 8004c58:	f04f 0800 	mov.w	r8, #0
 8004c5c:	f104 091a 	add.w	r9, r4, #26
 8004c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4543      	cmp	r3, r8
 8004c66:	dc09      	bgt.n	8004c7c <_printf_float+0x264>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	079b      	lsls	r3, r3, #30
 8004c6c:	f100 8105 	bmi.w	8004e7a <_printf_float+0x462>
 8004c70:	68e0      	ldr	r0, [r4, #12]
 8004c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c74:	4298      	cmp	r0, r3
 8004c76:	bfb8      	it	lt
 8004c78:	4618      	movlt	r0, r3
 8004c7a:	e730      	b.n	8004ade <_printf_float+0xc6>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	464a      	mov	r2, r9
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f af27 	beq.w	8004ada <_printf_float+0xc2>
 8004c8c:	f108 0801 	add.w	r8, r8, #1
 8004c90:	e7e6      	b.n	8004c60 <_printf_float+0x248>
 8004c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dc39      	bgt.n	8004d0c <_printf_float+0x2f4>
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <_printf_float+0x2f0>)
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f af19 	beq.w	8004ada <_printf_float+0xc2>
 8004ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cac:	4313      	orrs	r3, r2
 8004cae:	d102      	bne.n	8004cb6 <_printf_float+0x29e>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	07d9      	lsls	r1, r3, #31
 8004cb4:	d5d8      	bpl.n	8004c68 <_printf_float+0x250>
 8004cb6:	ee18 3a10 	vmov	r3, s16
 8004cba:	4652      	mov	r2, sl
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f43f af09 	beq.w	8004ada <_printf_float+0xc2>
 8004cc8:	f04f 0900 	mov.w	r9, #0
 8004ccc:	f104 0a1a 	add.w	sl, r4, #26
 8004cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	454b      	cmp	r3, r9
 8004cd6:	dc01      	bgt.n	8004cdc <_printf_float+0x2c4>
 8004cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cda:	e792      	b.n	8004c02 <_printf_float+0x1ea>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4652      	mov	r2, sl
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f aef7 	beq.w	8004ada <_printf_float+0xc2>
 8004cec:	f109 0901 	add.w	r9, r9, #1
 8004cf0:	e7ee      	b.n	8004cd0 <_printf_float+0x2b8>
 8004cf2:	bf00      	nop
 8004cf4:	7fefffff 	.word	0x7fefffff
 8004cf8:	08007f04 	.word	0x08007f04
 8004cfc:	08007f08 	.word	0x08007f08
 8004d00:	08007f10 	.word	0x08007f10
 8004d04:	08007f0c 	.word	0x08007f0c
 8004d08:	08007f14 	.word	0x08007f14
 8004d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d10:	429a      	cmp	r2, r3
 8004d12:	bfa8      	it	ge
 8004d14:	461a      	movge	r2, r3
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	4691      	mov	r9, r2
 8004d1a:	dc37      	bgt.n	8004d8c <_printf_float+0x374>
 8004d1c:	f04f 0b00 	mov.w	fp, #0
 8004d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d24:	f104 021a 	add.w	r2, r4, #26
 8004d28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d2a:	9305      	str	r3, [sp, #20]
 8004d2c:	eba3 0309 	sub.w	r3, r3, r9
 8004d30:	455b      	cmp	r3, fp
 8004d32:	dc33      	bgt.n	8004d9c <_printf_float+0x384>
 8004d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	db3b      	blt.n	8004db4 <_printf_float+0x39c>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	07da      	lsls	r2, r3, #31
 8004d40:	d438      	bmi.n	8004db4 <_printf_float+0x39c>
 8004d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d44:	9b05      	ldr	r3, [sp, #20]
 8004d46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	eba2 0901 	sub.w	r9, r2, r1
 8004d4e:	4599      	cmp	r9, r3
 8004d50:	bfa8      	it	ge
 8004d52:	4699      	movge	r9, r3
 8004d54:	f1b9 0f00 	cmp.w	r9, #0
 8004d58:	dc35      	bgt.n	8004dc6 <_printf_float+0x3ae>
 8004d5a:	f04f 0800 	mov.w	r8, #0
 8004d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d62:	f104 0a1a 	add.w	sl, r4, #26
 8004d66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	eba3 0309 	sub.w	r3, r3, r9
 8004d70:	4543      	cmp	r3, r8
 8004d72:	f77f af79 	ble.w	8004c68 <_printf_float+0x250>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f aeaa 	beq.w	8004ada <_printf_float+0xc2>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	e7ec      	b.n	8004d66 <_printf_float+0x34e>
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4642      	mov	r2, r8
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	d1c0      	bne.n	8004d1c <_printf_float+0x304>
 8004d9a:	e69e      	b.n	8004ada <_printf_float+0xc2>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	9205      	str	r2, [sp, #20]
 8004da4:	47b8      	blx	r7
 8004da6:	3001      	adds	r0, #1
 8004da8:	f43f ae97 	beq.w	8004ada <_printf_float+0xc2>
 8004dac:	9a05      	ldr	r2, [sp, #20]
 8004dae:	f10b 0b01 	add.w	fp, fp, #1
 8004db2:	e7b9      	b.n	8004d28 <_printf_float+0x310>
 8004db4:	ee18 3a10 	vmov	r3, s16
 8004db8:	4652      	mov	r2, sl
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d1be      	bne.n	8004d42 <_printf_float+0x32a>
 8004dc4:	e689      	b.n	8004ada <_printf_float+0xc2>
 8004dc6:	9a05      	ldr	r2, [sp, #20]
 8004dc8:	464b      	mov	r3, r9
 8004dca:	4442      	add	r2, r8
 8004dcc:	4631      	mov	r1, r6
 8004dce:	4628      	mov	r0, r5
 8004dd0:	47b8      	blx	r7
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d1c1      	bne.n	8004d5a <_printf_float+0x342>
 8004dd6:	e680      	b.n	8004ada <_printf_float+0xc2>
 8004dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dda:	2a01      	cmp	r2, #1
 8004ddc:	dc01      	bgt.n	8004de2 <_printf_float+0x3ca>
 8004dde:	07db      	lsls	r3, r3, #31
 8004de0:	d538      	bpl.n	8004e54 <_printf_float+0x43c>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4642      	mov	r2, r8
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f ae74 	beq.w	8004ada <_printf_float+0xc2>
 8004df2:	ee18 3a10 	vmov	r3, s16
 8004df6:	4652      	mov	r2, sl
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	47b8      	blx	r7
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f43f ae6b 	beq.w	8004ada <_printf_float+0xc2>
 8004e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f7fb fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e10:	b9d8      	cbnz	r0, 8004e4a <_printf_float+0x432>
 8004e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e14:	f108 0201 	add.w	r2, r8, #1
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	d10e      	bne.n	8004e42 <_printf_float+0x42a>
 8004e24:	e659      	b.n	8004ada <_printf_float+0xc2>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4652      	mov	r2, sl
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f ae52 	beq.w	8004ada <_printf_float+0xc2>
 8004e36:	f108 0801 	add.w	r8, r8, #1
 8004e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	4543      	cmp	r3, r8
 8004e40:	dcf1      	bgt.n	8004e26 <_printf_float+0x40e>
 8004e42:	464b      	mov	r3, r9
 8004e44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e48:	e6dc      	b.n	8004c04 <_printf_float+0x1ec>
 8004e4a:	f04f 0800 	mov.w	r8, #0
 8004e4e:	f104 0a1a 	add.w	sl, r4, #26
 8004e52:	e7f2      	b.n	8004e3a <_printf_float+0x422>
 8004e54:	2301      	movs	r3, #1
 8004e56:	4642      	mov	r2, r8
 8004e58:	e7df      	b.n	8004e1a <_printf_float+0x402>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	464a      	mov	r2, r9
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f ae38 	beq.w	8004ada <_printf_float+0xc2>
 8004e6a:	f108 0801 	add.w	r8, r8, #1
 8004e6e:	68e3      	ldr	r3, [r4, #12]
 8004e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e72:	1a5b      	subs	r3, r3, r1
 8004e74:	4543      	cmp	r3, r8
 8004e76:	dcf0      	bgt.n	8004e5a <_printf_float+0x442>
 8004e78:	e6fa      	b.n	8004c70 <_printf_float+0x258>
 8004e7a:	f04f 0800 	mov.w	r8, #0
 8004e7e:	f104 0919 	add.w	r9, r4, #25
 8004e82:	e7f4      	b.n	8004e6e <_printf_float+0x456>

08004e84 <_printf_common>:
 8004e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	4616      	mov	r6, r2
 8004e8a:	4699      	mov	r9, r3
 8004e8c:	688a      	ldr	r2, [r1, #8]
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bfb8      	it	lt
 8004e98:	4613      	movlt	r3, r2
 8004e9a:	6033      	str	r3, [r6, #0]
 8004e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	b10a      	cbz	r2, 8004eaa <_printf_common+0x26>
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	0699      	lsls	r1, r3, #26
 8004eae:	bf42      	ittt	mi
 8004eb0:	6833      	ldrmi	r3, [r6, #0]
 8004eb2:	3302      	addmi	r3, #2
 8004eb4:	6033      	strmi	r3, [r6, #0]
 8004eb6:	6825      	ldr	r5, [r4, #0]
 8004eb8:	f015 0506 	ands.w	r5, r5, #6
 8004ebc:	d106      	bne.n	8004ecc <_printf_common+0x48>
 8004ebe:	f104 0a19 	add.w	sl, r4, #25
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	6832      	ldr	r2, [r6, #0]
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	42ab      	cmp	r3, r5
 8004eca:	dc26      	bgt.n	8004f1a <_printf_common+0x96>
 8004ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ed0:	1e13      	subs	r3, r2, #0
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	bf18      	it	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	0692      	lsls	r2, r2, #26
 8004eda:	d42b      	bmi.n	8004f34 <_printf_common+0xb0>
 8004edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	47c0      	blx	r8
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d01e      	beq.n	8004f28 <_printf_common+0xa4>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	68e5      	ldr	r5, [r4, #12]
 8004eee:	6832      	ldr	r2, [r6, #0]
 8004ef0:	f003 0306 	and.w	r3, r3, #6
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	bf08      	it	eq
 8004ef8:	1aad      	subeq	r5, r5, r2
 8004efa:	68a3      	ldr	r3, [r4, #8]
 8004efc:	6922      	ldr	r2, [r4, #16]
 8004efe:	bf0c      	ite	eq
 8004f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f04:	2500      	movne	r5, #0
 8004f06:	4293      	cmp	r3, r2
 8004f08:	bfc4      	itt	gt
 8004f0a:	1a9b      	subgt	r3, r3, r2
 8004f0c:	18ed      	addgt	r5, r5, r3
 8004f0e:	2600      	movs	r6, #0
 8004f10:	341a      	adds	r4, #26
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xc8>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xa8>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4638      	mov	r0, r7
 8004f22:	47c0      	blx	r8
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xac>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c6      	b.n	8004ec2 <_printf_common+0x3e>
 8004f34:	18e1      	adds	r1, r4, r3
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	2030      	movs	r0, #48	; 0x30
 8004f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f3e:	4422      	add	r2, r4
 8004f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f48:	3302      	adds	r3, #2
 8004f4a:	e7c7      	b.n	8004edc <_printf_common+0x58>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4649      	mov	r1, r9
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xa4>
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d9      	b.n	8004f12 <_printf_common+0x8e>
	...

08004f60 <_printf_i>:
 8004f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	460c      	mov	r4, r1
 8004f66:	4691      	mov	r9, r2
 8004f68:	7e27      	ldrb	r7, [r4, #24]
 8004f6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f6c:	2f78      	cmp	r7, #120	; 0x78
 8004f6e:	4680      	mov	r8, r0
 8004f70:	469a      	mov	sl, r3
 8004f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f76:	d807      	bhi.n	8004f88 <_printf_i+0x28>
 8004f78:	2f62      	cmp	r7, #98	; 0x62
 8004f7a:	d80a      	bhi.n	8004f92 <_printf_i+0x32>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 80d8 	beq.w	8005132 <_printf_i+0x1d2>
 8004f82:	2f58      	cmp	r7, #88	; 0x58
 8004f84:	f000 80a3 	beq.w	80050ce <_printf_i+0x16e>
 8004f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f90:	e03a      	b.n	8005008 <_printf_i+0xa8>
 8004f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f96:	2b15      	cmp	r3, #21
 8004f98:	d8f6      	bhi.n	8004f88 <_printf_i+0x28>
 8004f9a:	a001      	add	r0, pc, #4	; (adr r0, 8004fa0 <_printf_i+0x40>)
 8004f9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08004f89 	.word	0x08004f89
 8004fac:	08004f89 	.word	0x08004f89
 8004fb0:	08004f89 	.word	0x08004f89
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f89 	.word	0x08004f89
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	08005119 	.word	0x08005119
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	080050fb 	.word	0x080050fb
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	08004f89 	.word	0x08004f89
 8004fe0:	0800513b 	.word	0x0800513b
 8004fe4:	08004f89 	.word	0x08004f89
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004f89 	.word	0x08004f89
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	08005103 	.word	0x08005103
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	600a      	str	r2, [r1, #0]
 8005000:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005008:	2301      	movs	r3, #1
 800500a:	e0a3      	b.n	8005154 <_printf_i+0x1f4>
 800500c:	6825      	ldr	r5, [r4, #0]
 800500e:	6808      	ldr	r0, [r1, #0]
 8005010:	062e      	lsls	r6, r5, #24
 8005012:	f100 0304 	add.w	r3, r0, #4
 8005016:	d50a      	bpl.n	800502e <_printf_i+0xce>
 8005018:	6805      	ldr	r5, [r0, #0]
 800501a:	600b      	str	r3, [r1, #0]
 800501c:	2d00      	cmp	r5, #0
 800501e:	da03      	bge.n	8005028 <_printf_i+0xc8>
 8005020:	232d      	movs	r3, #45	; 0x2d
 8005022:	426d      	negs	r5, r5
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005028:	485e      	ldr	r0, [pc, #376]	; (80051a4 <_printf_i+0x244>)
 800502a:	230a      	movs	r3, #10
 800502c:	e019      	b.n	8005062 <_printf_i+0x102>
 800502e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005032:	6805      	ldr	r5, [r0, #0]
 8005034:	600b      	str	r3, [r1, #0]
 8005036:	bf18      	it	ne
 8005038:	b22d      	sxthne	r5, r5
 800503a:	e7ef      	b.n	800501c <_printf_i+0xbc>
 800503c:	680b      	ldr	r3, [r1, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	1d18      	adds	r0, r3, #4
 8005042:	6008      	str	r0, [r1, #0]
 8005044:	0628      	lsls	r0, r5, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xec>
 8005048:	681d      	ldr	r5, [r3, #0]
 800504a:	e002      	b.n	8005052 <_printf_i+0xf2>
 800504c:	0669      	lsls	r1, r5, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xe8>
 8005050:	881d      	ldrh	r5, [r3, #0]
 8005052:	4854      	ldr	r0, [pc, #336]	; (80051a4 <_printf_i+0x244>)
 8005054:	2f6f      	cmp	r7, #111	; 0x6f
 8005056:	bf0c      	ite	eq
 8005058:	2308      	moveq	r3, #8
 800505a:	230a      	movne	r3, #10
 800505c:	2100      	movs	r1, #0
 800505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005062:	6866      	ldr	r6, [r4, #4]
 8005064:	60a6      	str	r6, [r4, #8]
 8005066:	2e00      	cmp	r6, #0
 8005068:	bfa2      	ittt	ge
 800506a:	6821      	ldrge	r1, [r4, #0]
 800506c:	f021 0104 	bicge.w	r1, r1, #4
 8005070:	6021      	strge	r1, [r4, #0]
 8005072:	b90d      	cbnz	r5, 8005078 <_printf_i+0x118>
 8005074:	2e00      	cmp	r6, #0
 8005076:	d04d      	beq.n	8005114 <_printf_i+0x1b4>
 8005078:	4616      	mov	r6, r2
 800507a:	fbb5 f1f3 	udiv	r1, r5, r3
 800507e:	fb03 5711 	mls	r7, r3, r1, r5
 8005082:	5dc7      	ldrb	r7, [r0, r7]
 8005084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005088:	462f      	mov	r7, r5
 800508a:	42bb      	cmp	r3, r7
 800508c:	460d      	mov	r5, r1
 800508e:	d9f4      	bls.n	800507a <_printf_i+0x11a>
 8005090:	2b08      	cmp	r3, #8
 8005092:	d10b      	bne.n	80050ac <_printf_i+0x14c>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	07df      	lsls	r7, r3, #31
 8005098:	d508      	bpl.n	80050ac <_printf_i+0x14c>
 800509a:	6923      	ldr	r3, [r4, #16]
 800509c:	6861      	ldr	r1, [r4, #4]
 800509e:	4299      	cmp	r1, r3
 80050a0:	bfde      	ittt	le
 80050a2:	2330      	movle	r3, #48	; 0x30
 80050a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ac:	1b92      	subs	r2, r2, r6
 80050ae:	6122      	str	r2, [r4, #16]
 80050b0:	f8cd a000 	str.w	sl, [sp]
 80050b4:	464b      	mov	r3, r9
 80050b6:	aa03      	add	r2, sp, #12
 80050b8:	4621      	mov	r1, r4
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7ff fee2 	bl	8004e84 <_printf_common>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d14c      	bne.n	800515e <_printf_i+0x1fe>
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	b004      	add	sp, #16
 80050ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ce:	4835      	ldr	r0, [pc, #212]	; (80051a4 <_printf_i+0x244>)
 80050d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	680e      	ldr	r6, [r1, #0]
 80050d8:	061f      	lsls	r7, r3, #24
 80050da:	f856 5b04 	ldr.w	r5, [r6], #4
 80050de:	600e      	str	r6, [r1, #0]
 80050e0:	d514      	bpl.n	800510c <_printf_i+0x1ac>
 80050e2:	07d9      	lsls	r1, r3, #31
 80050e4:	bf44      	itt	mi
 80050e6:	f043 0320 	orrmi.w	r3, r3, #32
 80050ea:	6023      	strmi	r3, [r4, #0]
 80050ec:	b91d      	cbnz	r5, 80050f6 <_printf_i+0x196>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f023 0320 	bic.w	r3, r3, #32
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	2310      	movs	r3, #16
 80050f8:	e7b0      	b.n	800505c <_printf_i+0xfc>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	f043 0320 	orr.w	r3, r3, #32
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	2378      	movs	r3, #120	; 0x78
 8005104:	4828      	ldr	r0, [pc, #160]	; (80051a8 <_printf_i+0x248>)
 8005106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510a:	e7e3      	b.n	80050d4 <_printf_i+0x174>
 800510c:	065e      	lsls	r6, r3, #25
 800510e:	bf48      	it	mi
 8005110:	b2ad      	uxthmi	r5, r5
 8005112:	e7e6      	b.n	80050e2 <_printf_i+0x182>
 8005114:	4616      	mov	r6, r2
 8005116:	e7bb      	b.n	8005090 <_printf_i+0x130>
 8005118:	680b      	ldr	r3, [r1, #0]
 800511a:	6826      	ldr	r6, [r4, #0]
 800511c:	6960      	ldr	r0, [r4, #20]
 800511e:	1d1d      	adds	r5, r3, #4
 8005120:	600d      	str	r5, [r1, #0]
 8005122:	0635      	lsls	r5, r6, #24
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	d501      	bpl.n	800512c <_printf_i+0x1cc>
 8005128:	6018      	str	r0, [r3, #0]
 800512a:	e002      	b.n	8005132 <_printf_i+0x1d2>
 800512c:	0671      	lsls	r1, r6, #25
 800512e:	d5fb      	bpl.n	8005128 <_printf_i+0x1c8>
 8005130:	8018      	strh	r0, [r3, #0]
 8005132:	2300      	movs	r3, #0
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	4616      	mov	r6, r2
 8005138:	e7ba      	b.n	80050b0 <_printf_i+0x150>
 800513a:	680b      	ldr	r3, [r1, #0]
 800513c:	1d1a      	adds	r2, r3, #4
 800513e:	600a      	str	r2, [r1, #0]
 8005140:	681e      	ldr	r6, [r3, #0]
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	2100      	movs	r1, #0
 8005146:	4630      	mov	r0, r6
 8005148:	f7fb f84a 	bl	80001e0 <memchr>
 800514c:	b108      	cbz	r0, 8005152 <_printf_i+0x1f2>
 800514e:	1b80      	subs	r0, r0, r6
 8005150:	6060      	str	r0, [r4, #4]
 8005152:	6863      	ldr	r3, [r4, #4]
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	2300      	movs	r3, #0
 8005158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515c:	e7a8      	b.n	80050b0 <_printf_i+0x150>
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	4632      	mov	r2, r6
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	47d0      	blx	sl
 8005168:	3001      	adds	r0, #1
 800516a:	d0ab      	beq.n	80050c4 <_printf_i+0x164>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	079b      	lsls	r3, r3, #30
 8005170:	d413      	bmi.n	800519a <_printf_i+0x23a>
 8005172:	68e0      	ldr	r0, [r4, #12]
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	4298      	cmp	r0, r3
 8005178:	bfb8      	it	lt
 800517a:	4618      	movlt	r0, r3
 800517c:	e7a4      	b.n	80050c8 <_printf_i+0x168>
 800517e:	2301      	movs	r3, #1
 8005180:	4632      	mov	r2, r6
 8005182:	4649      	mov	r1, r9
 8005184:	4640      	mov	r0, r8
 8005186:	47d0      	blx	sl
 8005188:	3001      	adds	r0, #1
 800518a:	d09b      	beq.n	80050c4 <_printf_i+0x164>
 800518c:	3501      	adds	r5, #1
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	9903      	ldr	r1, [sp, #12]
 8005192:	1a5b      	subs	r3, r3, r1
 8005194:	42ab      	cmp	r3, r5
 8005196:	dcf2      	bgt.n	800517e <_printf_i+0x21e>
 8005198:	e7eb      	b.n	8005172 <_printf_i+0x212>
 800519a:	2500      	movs	r5, #0
 800519c:	f104 0619 	add.w	r6, r4, #25
 80051a0:	e7f5      	b.n	800518e <_printf_i+0x22e>
 80051a2:	bf00      	nop
 80051a4:	08007f16 	.word	0x08007f16
 80051a8:	08007f27 	.word	0x08007f27

080051ac <siprintf>:
 80051ac:	b40e      	push	{r1, r2, r3}
 80051ae:	b500      	push	{lr}
 80051b0:	b09c      	sub	sp, #112	; 0x70
 80051b2:	ab1d      	add	r3, sp, #116	; 0x74
 80051b4:	9002      	str	r0, [sp, #8]
 80051b6:	9006      	str	r0, [sp, #24]
 80051b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051bc:	4809      	ldr	r0, [pc, #36]	; (80051e4 <siprintf+0x38>)
 80051be:	9107      	str	r1, [sp, #28]
 80051c0:	9104      	str	r1, [sp, #16]
 80051c2:	4909      	ldr	r1, [pc, #36]	; (80051e8 <siprintf+0x3c>)
 80051c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c8:	9105      	str	r1, [sp, #20]
 80051ca:	6800      	ldr	r0, [r0, #0]
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	a902      	add	r1, sp, #8
 80051d0:	f001 fb40 	bl	8006854 <_svfiprintf_r>
 80051d4:	9b02      	ldr	r3, [sp, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	b01c      	add	sp, #112	; 0x70
 80051dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e0:	b003      	add	sp, #12
 80051e2:	4770      	bx	lr
 80051e4:	20000018 	.word	0x20000018
 80051e8:	ffff0208 	.word	0xffff0208

080051ec <strcat>:
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4602      	mov	r2, r0
 80051f0:	7814      	ldrb	r4, [r2, #0]
 80051f2:	4613      	mov	r3, r2
 80051f4:	3201      	adds	r2, #1
 80051f6:	2c00      	cmp	r4, #0
 80051f8:	d1fa      	bne.n	80051f0 <strcat+0x4>
 80051fa:	3b01      	subs	r3, #1
 80051fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005200:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005204:	2a00      	cmp	r2, #0
 8005206:	d1f9      	bne.n	80051fc <strcat+0x10>
 8005208:	bd10      	pop	{r4, pc}

0800520a <quorem>:
 800520a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520e:	6903      	ldr	r3, [r0, #16]
 8005210:	690c      	ldr	r4, [r1, #16]
 8005212:	42a3      	cmp	r3, r4
 8005214:	4607      	mov	r7, r0
 8005216:	f2c0 8081 	blt.w	800531c <quorem+0x112>
 800521a:	3c01      	subs	r4, #1
 800521c:	f101 0814 	add.w	r8, r1, #20
 8005220:	f100 0514 	add.w	r5, r0, #20
 8005224:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800522e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005232:	3301      	adds	r3, #1
 8005234:	429a      	cmp	r2, r3
 8005236:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800523a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800523e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005242:	d331      	bcc.n	80052a8 <quorem+0x9e>
 8005244:	f04f 0e00 	mov.w	lr, #0
 8005248:	4640      	mov	r0, r8
 800524a:	46ac      	mov	ip, r5
 800524c:	46f2      	mov	sl, lr
 800524e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005252:	b293      	uxth	r3, r2
 8005254:	fb06 e303 	mla	r3, r6, r3, lr
 8005258:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800525c:	b29b      	uxth	r3, r3
 800525e:	ebaa 0303 	sub.w	r3, sl, r3
 8005262:	0c12      	lsrs	r2, r2, #16
 8005264:	f8dc a000 	ldr.w	sl, [ip]
 8005268:	fb06 e202 	mla	r2, r6, r2, lr
 800526c:	fa13 f38a 	uxtah	r3, r3, sl
 8005270:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005274:	fa1f fa82 	uxth.w	sl, r2
 8005278:	f8dc 2000 	ldr.w	r2, [ip]
 800527c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005284:	b29b      	uxth	r3, r3
 8005286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800528a:	4581      	cmp	r9, r0
 800528c:	f84c 3b04 	str.w	r3, [ip], #4
 8005290:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005294:	d2db      	bcs.n	800524e <quorem+0x44>
 8005296:	f855 300b 	ldr.w	r3, [r5, fp]
 800529a:	b92b      	cbnz	r3, 80052a8 <quorem+0x9e>
 800529c:	9b01      	ldr	r3, [sp, #4]
 800529e:	3b04      	subs	r3, #4
 80052a0:	429d      	cmp	r5, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	d32e      	bcc.n	8005304 <quorem+0xfa>
 80052a6:	613c      	str	r4, [r7, #16]
 80052a8:	4638      	mov	r0, r7
 80052aa:	f001 f8bd 	bl	8006428 <__mcmp>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	db24      	blt.n	80052fc <quorem+0xf2>
 80052b2:	3601      	adds	r6, #1
 80052b4:	4628      	mov	r0, r5
 80052b6:	f04f 0c00 	mov.w	ip, #0
 80052ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80052be:	f8d0 e000 	ldr.w	lr, [r0]
 80052c2:	b293      	uxth	r3, r2
 80052c4:	ebac 0303 	sub.w	r3, ip, r3
 80052c8:	0c12      	lsrs	r2, r2, #16
 80052ca:	fa13 f38e 	uxtah	r3, r3, lr
 80052ce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052dc:	45c1      	cmp	r9, r8
 80052de:	f840 3b04 	str.w	r3, [r0], #4
 80052e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052e6:	d2e8      	bcs.n	80052ba <quorem+0xb0>
 80052e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052f0:	b922      	cbnz	r2, 80052fc <quorem+0xf2>
 80052f2:	3b04      	subs	r3, #4
 80052f4:	429d      	cmp	r5, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	d30a      	bcc.n	8005310 <quorem+0x106>
 80052fa:	613c      	str	r4, [r7, #16]
 80052fc:	4630      	mov	r0, r6
 80052fe:	b003      	add	sp, #12
 8005300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	3b04      	subs	r3, #4
 8005308:	2a00      	cmp	r2, #0
 800530a:	d1cc      	bne.n	80052a6 <quorem+0x9c>
 800530c:	3c01      	subs	r4, #1
 800530e:	e7c7      	b.n	80052a0 <quorem+0x96>
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	3b04      	subs	r3, #4
 8005314:	2a00      	cmp	r2, #0
 8005316:	d1f0      	bne.n	80052fa <quorem+0xf0>
 8005318:	3c01      	subs	r4, #1
 800531a:	e7eb      	b.n	80052f4 <quorem+0xea>
 800531c:	2000      	movs	r0, #0
 800531e:	e7ee      	b.n	80052fe <quorem+0xf4>

08005320 <_dtoa_r>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	ed2d 8b02 	vpush	{d8}
 8005328:	ec57 6b10 	vmov	r6, r7, d0
 800532c:	b095      	sub	sp, #84	; 0x54
 800532e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005330:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005334:	9105      	str	r1, [sp, #20]
 8005336:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800533a:	4604      	mov	r4, r0
 800533c:	9209      	str	r2, [sp, #36]	; 0x24
 800533e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005340:	b975      	cbnz	r5, 8005360 <_dtoa_r+0x40>
 8005342:	2010      	movs	r0, #16
 8005344:	f000 fddc 	bl	8005f00 <malloc>
 8005348:	4602      	mov	r2, r0
 800534a:	6260      	str	r0, [r4, #36]	; 0x24
 800534c:	b920      	cbnz	r0, 8005358 <_dtoa_r+0x38>
 800534e:	4bb2      	ldr	r3, [pc, #712]	; (8005618 <_dtoa_r+0x2f8>)
 8005350:	21ea      	movs	r1, #234	; 0xea
 8005352:	48b2      	ldr	r0, [pc, #712]	; (800561c <_dtoa_r+0x2fc>)
 8005354:	f001 fb8e 	bl	8006a74 <__assert_func>
 8005358:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800535c:	6005      	str	r5, [r0, #0]
 800535e:	60c5      	str	r5, [r0, #12]
 8005360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	b151      	cbz	r1, 800537c <_dtoa_r+0x5c>
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	604a      	str	r2, [r1, #4]
 800536a:	2301      	movs	r3, #1
 800536c:	4093      	lsls	r3, r2
 800536e:	608b      	str	r3, [r1, #8]
 8005370:	4620      	mov	r0, r4
 8005372:	f000 fe1b 	bl	8005fac <_Bfree>
 8005376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	1e3b      	subs	r3, r7, #0
 800537e:	bfb9      	ittee	lt
 8005380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005384:	9303      	strlt	r3, [sp, #12]
 8005386:	2300      	movge	r3, #0
 8005388:	f8c8 3000 	strge.w	r3, [r8]
 800538c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005390:	4ba3      	ldr	r3, [pc, #652]	; (8005620 <_dtoa_r+0x300>)
 8005392:	bfbc      	itt	lt
 8005394:	2201      	movlt	r2, #1
 8005396:	f8c8 2000 	strlt.w	r2, [r8]
 800539a:	ea33 0309 	bics.w	r3, r3, r9
 800539e:	d11b      	bne.n	80053d8 <_dtoa_r+0xb8>
 80053a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053ac:	4333      	orrs	r3, r6
 80053ae:	f000 857a 	beq.w	8005ea6 <_dtoa_r+0xb86>
 80053b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053b4:	b963      	cbnz	r3, 80053d0 <_dtoa_r+0xb0>
 80053b6:	4b9b      	ldr	r3, [pc, #620]	; (8005624 <_dtoa_r+0x304>)
 80053b8:	e024      	b.n	8005404 <_dtoa_r+0xe4>
 80053ba:	4b9b      	ldr	r3, [pc, #620]	; (8005628 <_dtoa_r+0x308>)
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	9800      	ldr	r0, [sp, #0]
 80053c6:	b015      	add	sp, #84	; 0x54
 80053c8:	ecbd 8b02 	vpop	{d8}
 80053cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d0:	4b94      	ldr	r3, [pc, #592]	; (8005624 <_dtoa_r+0x304>)
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	3303      	adds	r3, #3
 80053d6:	e7f3      	b.n	80053c0 <_dtoa_r+0xa0>
 80053d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053dc:	2200      	movs	r2, #0
 80053de:	ec51 0b17 	vmov	r0, r1, d7
 80053e2:	2300      	movs	r3, #0
 80053e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80053e8:	f7fb fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80053ec:	4680      	mov	r8, r0
 80053ee:	b158      	cbz	r0, 8005408 <_dtoa_r+0xe8>
 80053f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053f2:	2301      	movs	r3, #1
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8551 	beq.w	8005ea0 <_dtoa_r+0xb80>
 80053fe:	488b      	ldr	r0, [pc, #556]	; (800562c <_dtoa_r+0x30c>)
 8005400:	6018      	str	r0, [r3, #0]
 8005402:	1e43      	subs	r3, r0, #1
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	e7dd      	b.n	80053c4 <_dtoa_r+0xa4>
 8005408:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800540c:	aa12      	add	r2, sp, #72	; 0x48
 800540e:	a913      	add	r1, sp, #76	; 0x4c
 8005410:	4620      	mov	r0, r4
 8005412:	f001 f8ad 	bl	8006570 <__d2b>
 8005416:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800541a:	4683      	mov	fp, r0
 800541c:	2d00      	cmp	r5, #0
 800541e:	d07c      	beq.n	800551a <_dtoa_r+0x1fa>
 8005420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005422:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800542a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800542e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800543a:	4b7d      	ldr	r3, [pc, #500]	; (8005630 <_dtoa_r+0x310>)
 800543c:	2200      	movs	r2, #0
 800543e:	4630      	mov	r0, r6
 8005440:	4639      	mov	r1, r7
 8005442:	f7fa ff21 	bl	8000288 <__aeabi_dsub>
 8005446:	a36e      	add	r3, pc, #440	; (adr r3, 8005600 <_dtoa_r+0x2e0>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f7fb f8d4 	bl	80005f8 <__aeabi_dmul>
 8005450:	a36d      	add	r3, pc, #436	; (adr r3, 8005608 <_dtoa_r+0x2e8>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fa ff19 	bl	800028c <__adddf3>
 800545a:	4606      	mov	r6, r0
 800545c:	4628      	mov	r0, r5
 800545e:	460f      	mov	r7, r1
 8005460:	f7fb f860 	bl	8000524 <__aeabi_i2d>
 8005464:	a36a      	add	r3, pc, #424	; (adr r3, 8005610 <_dtoa_r+0x2f0>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	f7fb f8c5 	bl	80005f8 <__aeabi_dmul>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4630      	mov	r0, r6
 8005474:	4639      	mov	r1, r7
 8005476:	f7fa ff09 	bl	800028c <__adddf3>
 800547a:	4606      	mov	r6, r0
 800547c:	460f      	mov	r7, r1
 800547e:	f7fb fb6b 	bl	8000b58 <__aeabi_d2iz>
 8005482:	2200      	movs	r2, #0
 8005484:	4682      	mov	sl, r0
 8005486:	2300      	movs	r3, #0
 8005488:	4630      	mov	r0, r6
 800548a:	4639      	mov	r1, r7
 800548c:	f7fb fb26 	bl	8000adc <__aeabi_dcmplt>
 8005490:	b148      	cbz	r0, 80054a6 <_dtoa_r+0x186>
 8005492:	4650      	mov	r0, sl
 8005494:	f7fb f846 	bl	8000524 <__aeabi_i2d>
 8005498:	4632      	mov	r2, r6
 800549a:	463b      	mov	r3, r7
 800549c:	f7fb fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80054a0:	b908      	cbnz	r0, 80054a6 <_dtoa_r+0x186>
 80054a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054a6:	f1ba 0f16 	cmp.w	sl, #22
 80054aa:	d854      	bhi.n	8005556 <_dtoa_r+0x236>
 80054ac:	4b61      	ldr	r3, [pc, #388]	; (8005634 <_dtoa_r+0x314>)
 80054ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054ba:	f7fb fb0f 	bl	8000adc <__aeabi_dcmplt>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d04b      	beq.n	800555a <_dtoa_r+0x23a>
 80054c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054c6:	2300      	movs	r3, #0
 80054c8:	930e      	str	r3, [sp, #56]	; 0x38
 80054ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054cc:	1b5d      	subs	r5, r3, r5
 80054ce:	1e6b      	subs	r3, r5, #1
 80054d0:	9304      	str	r3, [sp, #16]
 80054d2:	bf43      	ittte	mi
 80054d4:	2300      	movmi	r3, #0
 80054d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80054da:	9304      	strmi	r3, [sp, #16]
 80054dc:	f04f 0800 	movpl.w	r8, #0
 80054e0:	f1ba 0f00 	cmp.w	sl, #0
 80054e4:	db3b      	blt.n	800555e <_dtoa_r+0x23e>
 80054e6:	9b04      	ldr	r3, [sp, #16]
 80054e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80054ec:	4453      	add	r3, sl
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9306      	str	r3, [sp, #24]
 80054f4:	9b05      	ldr	r3, [sp, #20]
 80054f6:	2b09      	cmp	r3, #9
 80054f8:	d869      	bhi.n	80055ce <_dtoa_r+0x2ae>
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	bfc4      	itt	gt
 80054fe:	3b04      	subgt	r3, #4
 8005500:	9305      	strgt	r3, [sp, #20]
 8005502:	9b05      	ldr	r3, [sp, #20]
 8005504:	f1a3 0302 	sub.w	r3, r3, #2
 8005508:	bfcc      	ite	gt
 800550a:	2500      	movgt	r5, #0
 800550c:	2501      	movle	r5, #1
 800550e:	2b03      	cmp	r3, #3
 8005510:	d869      	bhi.n	80055e6 <_dtoa_r+0x2c6>
 8005512:	e8df f003 	tbb	[pc, r3]
 8005516:	4e2c      	.short	0x4e2c
 8005518:	5a4c      	.short	0x5a4c
 800551a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800551e:	441d      	add	r5, r3
 8005520:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005524:	2b20      	cmp	r3, #32
 8005526:	bfc1      	itttt	gt
 8005528:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800552c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005530:	fa09 f303 	lslgt.w	r3, r9, r3
 8005534:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005538:	bfda      	itte	le
 800553a:	f1c3 0320 	rsble	r3, r3, #32
 800553e:	fa06 f003 	lslle.w	r0, r6, r3
 8005542:	4318      	orrgt	r0, r3
 8005544:	f7fa ffde 	bl	8000504 <__aeabi_ui2d>
 8005548:	2301      	movs	r3, #1
 800554a:	4606      	mov	r6, r0
 800554c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005550:	3d01      	subs	r5, #1
 8005552:	9310      	str	r3, [sp, #64]	; 0x40
 8005554:	e771      	b.n	800543a <_dtoa_r+0x11a>
 8005556:	2301      	movs	r3, #1
 8005558:	e7b6      	b.n	80054c8 <_dtoa_r+0x1a8>
 800555a:	900e      	str	r0, [sp, #56]	; 0x38
 800555c:	e7b5      	b.n	80054ca <_dtoa_r+0x1aa>
 800555e:	f1ca 0300 	rsb	r3, sl, #0
 8005562:	9306      	str	r3, [sp, #24]
 8005564:	2300      	movs	r3, #0
 8005566:	eba8 080a 	sub.w	r8, r8, sl
 800556a:	930d      	str	r3, [sp, #52]	; 0x34
 800556c:	e7c2      	b.n	80054f4 <_dtoa_r+0x1d4>
 800556e:	2300      	movs	r3, #0
 8005570:	9308      	str	r3, [sp, #32]
 8005572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	dc39      	bgt.n	80055ec <_dtoa_r+0x2cc>
 8005578:	f04f 0901 	mov.w	r9, #1
 800557c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005580:	464b      	mov	r3, r9
 8005582:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005586:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005588:	2200      	movs	r2, #0
 800558a:	6042      	str	r2, [r0, #4]
 800558c:	2204      	movs	r2, #4
 800558e:	f102 0614 	add.w	r6, r2, #20
 8005592:	429e      	cmp	r6, r3
 8005594:	6841      	ldr	r1, [r0, #4]
 8005596:	d92f      	bls.n	80055f8 <_dtoa_r+0x2d8>
 8005598:	4620      	mov	r0, r4
 800559a:	f000 fcc7 	bl	8005f2c <_Balloc>
 800559e:	9000      	str	r0, [sp, #0]
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d14b      	bne.n	800563c <_dtoa_r+0x31c>
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <_dtoa_r+0x318>)
 80055a6:	4602      	mov	r2, r0
 80055a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055ac:	e6d1      	b.n	8005352 <_dtoa_r+0x32>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e7de      	b.n	8005570 <_dtoa_r+0x250>
 80055b2:	2300      	movs	r3, #0
 80055b4:	9308      	str	r3, [sp, #32]
 80055b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b8:	eb0a 0903 	add.w	r9, sl, r3
 80055bc:	f109 0301 	add.w	r3, r9, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	bfb8      	it	lt
 80055c6:	2301      	movlt	r3, #1
 80055c8:	e7dd      	b.n	8005586 <_dtoa_r+0x266>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e7f2      	b.n	80055b4 <_dtoa_r+0x294>
 80055ce:	2501      	movs	r5, #1
 80055d0:	2300      	movs	r3, #0
 80055d2:	9305      	str	r3, [sp, #20]
 80055d4:	9508      	str	r5, [sp, #32]
 80055d6:	f04f 39ff 	mov.w	r9, #4294967295
 80055da:	2200      	movs	r2, #0
 80055dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80055e0:	2312      	movs	r3, #18
 80055e2:	9209      	str	r2, [sp, #36]	; 0x24
 80055e4:	e7cf      	b.n	8005586 <_dtoa_r+0x266>
 80055e6:	2301      	movs	r3, #1
 80055e8:	9308      	str	r3, [sp, #32]
 80055ea:	e7f4      	b.n	80055d6 <_dtoa_r+0x2b6>
 80055ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80055f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80055f4:	464b      	mov	r3, r9
 80055f6:	e7c6      	b.n	8005586 <_dtoa_r+0x266>
 80055f8:	3101      	adds	r1, #1
 80055fa:	6041      	str	r1, [r0, #4]
 80055fc:	0052      	lsls	r2, r2, #1
 80055fe:	e7c6      	b.n	800558e <_dtoa_r+0x26e>
 8005600:	636f4361 	.word	0x636f4361
 8005604:	3fd287a7 	.word	0x3fd287a7
 8005608:	8b60c8b3 	.word	0x8b60c8b3
 800560c:	3fc68a28 	.word	0x3fc68a28
 8005610:	509f79fb 	.word	0x509f79fb
 8005614:	3fd34413 	.word	0x3fd34413
 8005618:	08007f45 	.word	0x08007f45
 800561c:	08007f5c 	.word	0x08007f5c
 8005620:	7ff00000 	.word	0x7ff00000
 8005624:	08007f41 	.word	0x08007f41
 8005628:	08007f38 	.word	0x08007f38
 800562c:	08007f15 	.word	0x08007f15
 8005630:	3ff80000 	.word	0x3ff80000
 8005634:	08008058 	.word	0x08008058
 8005638:	08007fbb 	.word	0x08007fbb
 800563c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800563e:	9a00      	ldr	r2, [sp, #0]
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	9b01      	ldr	r3, [sp, #4]
 8005644:	2b0e      	cmp	r3, #14
 8005646:	f200 80ad 	bhi.w	80057a4 <_dtoa_r+0x484>
 800564a:	2d00      	cmp	r5, #0
 800564c:	f000 80aa 	beq.w	80057a4 <_dtoa_r+0x484>
 8005650:	f1ba 0f00 	cmp.w	sl, #0
 8005654:	dd36      	ble.n	80056c4 <_dtoa_r+0x3a4>
 8005656:	4ac3      	ldr	r2, [pc, #780]	; (8005964 <_dtoa_r+0x644>)
 8005658:	f00a 030f 	and.w	r3, sl, #15
 800565c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005660:	ed93 7b00 	vldr	d7, [r3]
 8005664:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005668:	ea4f 172a 	mov.w	r7, sl, asr #4
 800566c:	eeb0 8a47 	vmov.f32	s16, s14
 8005670:	eef0 8a67 	vmov.f32	s17, s15
 8005674:	d016      	beq.n	80056a4 <_dtoa_r+0x384>
 8005676:	4bbc      	ldr	r3, [pc, #752]	; (8005968 <_dtoa_r+0x648>)
 8005678:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800567c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005680:	f7fb f8e4 	bl	800084c <__aeabi_ddiv>
 8005684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005688:	f007 070f 	and.w	r7, r7, #15
 800568c:	2503      	movs	r5, #3
 800568e:	4eb6      	ldr	r6, [pc, #728]	; (8005968 <_dtoa_r+0x648>)
 8005690:	b957      	cbnz	r7, 80056a8 <_dtoa_r+0x388>
 8005692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005696:	ec53 2b18 	vmov	r2, r3, d8
 800569a:	f7fb f8d7 	bl	800084c <__aeabi_ddiv>
 800569e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056a2:	e029      	b.n	80056f8 <_dtoa_r+0x3d8>
 80056a4:	2502      	movs	r5, #2
 80056a6:	e7f2      	b.n	800568e <_dtoa_r+0x36e>
 80056a8:	07f9      	lsls	r1, r7, #31
 80056aa:	d508      	bpl.n	80056be <_dtoa_r+0x39e>
 80056ac:	ec51 0b18 	vmov	r0, r1, d8
 80056b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056b4:	f7fa ffa0 	bl	80005f8 <__aeabi_dmul>
 80056b8:	ec41 0b18 	vmov	d8, r0, r1
 80056bc:	3501      	adds	r5, #1
 80056be:	107f      	asrs	r7, r7, #1
 80056c0:	3608      	adds	r6, #8
 80056c2:	e7e5      	b.n	8005690 <_dtoa_r+0x370>
 80056c4:	f000 80a6 	beq.w	8005814 <_dtoa_r+0x4f4>
 80056c8:	f1ca 0600 	rsb	r6, sl, #0
 80056cc:	4ba5      	ldr	r3, [pc, #660]	; (8005964 <_dtoa_r+0x644>)
 80056ce:	4fa6      	ldr	r7, [pc, #664]	; (8005968 <_dtoa_r+0x648>)
 80056d0:	f006 020f 	and.w	r2, r6, #15
 80056d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056e0:	f7fa ff8a 	bl	80005f8 <__aeabi_dmul>
 80056e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056e8:	1136      	asrs	r6, r6, #4
 80056ea:	2300      	movs	r3, #0
 80056ec:	2502      	movs	r5, #2
 80056ee:	2e00      	cmp	r6, #0
 80056f0:	f040 8085 	bne.w	80057fe <_dtoa_r+0x4de>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1d2      	bne.n	800569e <_dtoa_r+0x37e>
 80056f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 808c 	beq.w	8005818 <_dtoa_r+0x4f8>
 8005700:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005704:	4b99      	ldr	r3, [pc, #612]	; (800596c <_dtoa_r+0x64c>)
 8005706:	2200      	movs	r2, #0
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f7fb f9e6 	bl	8000adc <__aeabi_dcmplt>
 8005710:	2800      	cmp	r0, #0
 8005712:	f000 8081 	beq.w	8005818 <_dtoa_r+0x4f8>
 8005716:	9b01      	ldr	r3, [sp, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d07d      	beq.n	8005818 <_dtoa_r+0x4f8>
 800571c:	f1b9 0f00 	cmp.w	r9, #0
 8005720:	dd3c      	ble.n	800579c <_dtoa_r+0x47c>
 8005722:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005726:	9307      	str	r3, [sp, #28]
 8005728:	2200      	movs	r2, #0
 800572a:	4b91      	ldr	r3, [pc, #580]	; (8005970 <_dtoa_r+0x650>)
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa ff62 	bl	80005f8 <__aeabi_dmul>
 8005734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005738:	3501      	adds	r5, #1
 800573a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800573e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005742:	4628      	mov	r0, r5
 8005744:	f7fa feee 	bl	8000524 <__aeabi_i2d>
 8005748:	4632      	mov	r2, r6
 800574a:	463b      	mov	r3, r7
 800574c:	f7fa ff54 	bl	80005f8 <__aeabi_dmul>
 8005750:	4b88      	ldr	r3, [pc, #544]	; (8005974 <_dtoa_r+0x654>)
 8005752:	2200      	movs	r2, #0
 8005754:	f7fa fd9a 	bl	800028c <__adddf3>
 8005758:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800575c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005760:	9303      	str	r3, [sp, #12]
 8005762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	d15c      	bne.n	8005822 <_dtoa_r+0x502>
 8005768:	4b83      	ldr	r3, [pc, #524]	; (8005978 <_dtoa_r+0x658>)
 800576a:	2200      	movs	r2, #0
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fa fd8a 	bl	8000288 <__aeabi_dsub>
 8005774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	f7fb f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8005780:	2800      	cmp	r0, #0
 8005782:	f040 8296 	bne.w	8005cb2 <_dtoa_r+0x992>
 8005786:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800578a:	4630      	mov	r0, r6
 800578c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005790:	4639      	mov	r1, r7
 8005792:	f7fb f9a3 	bl	8000adc <__aeabi_dcmplt>
 8005796:	2800      	cmp	r0, #0
 8005798:	f040 8288 	bne.w	8005cac <_dtoa_r+0x98c>
 800579c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f2c0 8158 	blt.w	8005a5c <_dtoa_r+0x73c>
 80057ac:	f1ba 0f0e 	cmp.w	sl, #14
 80057b0:	f300 8154 	bgt.w	8005a5c <_dtoa_r+0x73c>
 80057b4:	4b6b      	ldr	r3, [pc, #428]	; (8005964 <_dtoa_r+0x644>)
 80057b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f280 80e3 	bge.w	800598c <_dtoa_r+0x66c>
 80057c6:	9b01      	ldr	r3, [sp, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f300 80df 	bgt.w	800598c <_dtoa_r+0x66c>
 80057ce:	f040 826d 	bne.w	8005cac <_dtoa_r+0x98c>
 80057d2:	4b69      	ldr	r3, [pc, #420]	; (8005978 <_dtoa_r+0x658>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	4640      	mov	r0, r8
 80057d8:	4649      	mov	r1, r9
 80057da:	f7fa ff0d 	bl	80005f8 <__aeabi_dmul>
 80057de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057e2:	f7fb f98f 	bl	8000b04 <__aeabi_dcmpge>
 80057e6:	9e01      	ldr	r6, [sp, #4]
 80057e8:	4637      	mov	r7, r6
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f040 8243 	bne.w	8005c76 <_dtoa_r+0x956>
 80057f0:	9d00      	ldr	r5, [sp, #0]
 80057f2:	2331      	movs	r3, #49	; 0x31
 80057f4:	f805 3b01 	strb.w	r3, [r5], #1
 80057f8:	f10a 0a01 	add.w	sl, sl, #1
 80057fc:	e23f      	b.n	8005c7e <_dtoa_r+0x95e>
 80057fe:	07f2      	lsls	r2, r6, #31
 8005800:	d505      	bpl.n	800580e <_dtoa_r+0x4ee>
 8005802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005806:	f7fa fef7 	bl	80005f8 <__aeabi_dmul>
 800580a:	3501      	adds	r5, #1
 800580c:	2301      	movs	r3, #1
 800580e:	1076      	asrs	r6, r6, #1
 8005810:	3708      	adds	r7, #8
 8005812:	e76c      	b.n	80056ee <_dtoa_r+0x3ce>
 8005814:	2502      	movs	r5, #2
 8005816:	e76f      	b.n	80056f8 <_dtoa_r+0x3d8>
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	f8cd a01c 	str.w	sl, [sp, #28]
 800581e:	930c      	str	r3, [sp, #48]	; 0x30
 8005820:	e78d      	b.n	800573e <_dtoa_r+0x41e>
 8005822:	9900      	ldr	r1, [sp, #0]
 8005824:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005828:	4b4e      	ldr	r3, [pc, #312]	; (8005964 <_dtoa_r+0x644>)
 800582a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800582e:	4401      	add	r1, r0
 8005830:	9102      	str	r1, [sp, #8]
 8005832:	9908      	ldr	r1, [sp, #32]
 8005834:	eeb0 8a47 	vmov.f32	s16, s14
 8005838:	eef0 8a67 	vmov.f32	s17, s15
 800583c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005840:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005844:	2900      	cmp	r1, #0
 8005846:	d045      	beq.n	80058d4 <_dtoa_r+0x5b4>
 8005848:	494c      	ldr	r1, [pc, #304]	; (800597c <_dtoa_r+0x65c>)
 800584a:	2000      	movs	r0, #0
 800584c:	f7fa fffe 	bl	800084c <__aeabi_ddiv>
 8005850:	ec53 2b18 	vmov	r2, r3, d8
 8005854:	f7fa fd18 	bl	8000288 <__aeabi_dsub>
 8005858:	9d00      	ldr	r5, [sp, #0]
 800585a:	ec41 0b18 	vmov	d8, r0, r1
 800585e:	4639      	mov	r1, r7
 8005860:	4630      	mov	r0, r6
 8005862:	f7fb f979 	bl	8000b58 <__aeabi_d2iz>
 8005866:	900c      	str	r0, [sp, #48]	; 0x30
 8005868:	f7fa fe5c 	bl	8000524 <__aeabi_i2d>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4630      	mov	r0, r6
 8005872:	4639      	mov	r1, r7
 8005874:	f7fa fd08 	bl	8000288 <__aeabi_dsub>
 8005878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800587a:	3330      	adds	r3, #48	; 0x30
 800587c:	f805 3b01 	strb.w	r3, [r5], #1
 8005880:	ec53 2b18 	vmov	r2, r3, d8
 8005884:	4606      	mov	r6, r0
 8005886:	460f      	mov	r7, r1
 8005888:	f7fb f928 	bl	8000adc <__aeabi_dcmplt>
 800588c:	2800      	cmp	r0, #0
 800588e:	d165      	bne.n	800595c <_dtoa_r+0x63c>
 8005890:	4632      	mov	r2, r6
 8005892:	463b      	mov	r3, r7
 8005894:	4935      	ldr	r1, [pc, #212]	; (800596c <_dtoa_r+0x64c>)
 8005896:	2000      	movs	r0, #0
 8005898:	f7fa fcf6 	bl	8000288 <__aeabi_dsub>
 800589c:	ec53 2b18 	vmov	r2, r3, d8
 80058a0:	f7fb f91c 	bl	8000adc <__aeabi_dcmplt>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f040 80b9 	bne.w	8005a1c <_dtoa_r+0x6fc>
 80058aa:	9b02      	ldr	r3, [sp, #8]
 80058ac:	429d      	cmp	r5, r3
 80058ae:	f43f af75 	beq.w	800579c <_dtoa_r+0x47c>
 80058b2:	4b2f      	ldr	r3, [pc, #188]	; (8005970 <_dtoa_r+0x650>)
 80058b4:	ec51 0b18 	vmov	r0, r1, d8
 80058b8:	2200      	movs	r2, #0
 80058ba:	f7fa fe9d 	bl	80005f8 <__aeabi_dmul>
 80058be:	4b2c      	ldr	r3, [pc, #176]	; (8005970 <_dtoa_r+0x650>)
 80058c0:	ec41 0b18 	vmov	d8, r0, r1
 80058c4:	2200      	movs	r2, #0
 80058c6:	4630      	mov	r0, r6
 80058c8:	4639      	mov	r1, r7
 80058ca:	f7fa fe95 	bl	80005f8 <__aeabi_dmul>
 80058ce:	4606      	mov	r6, r0
 80058d0:	460f      	mov	r7, r1
 80058d2:	e7c4      	b.n	800585e <_dtoa_r+0x53e>
 80058d4:	ec51 0b17 	vmov	r0, r1, d7
 80058d8:	f7fa fe8e 	bl	80005f8 <__aeabi_dmul>
 80058dc:	9b02      	ldr	r3, [sp, #8]
 80058de:	9d00      	ldr	r5, [sp, #0]
 80058e0:	930c      	str	r3, [sp, #48]	; 0x30
 80058e2:	ec41 0b18 	vmov	d8, r0, r1
 80058e6:	4639      	mov	r1, r7
 80058e8:	4630      	mov	r0, r6
 80058ea:	f7fb f935 	bl	8000b58 <__aeabi_d2iz>
 80058ee:	9011      	str	r0, [sp, #68]	; 0x44
 80058f0:	f7fa fe18 	bl	8000524 <__aeabi_i2d>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4630      	mov	r0, r6
 80058fa:	4639      	mov	r1, r7
 80058fc:	f7fa fcc4 	bl	8000288 <__aeabi_dsub>
 8005900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005902:	3330      	adds	r3, #48	; 0x30
 8005904:	f805 3b01 	strb.w	r3, [r5], #1
 8005908:	9b02      	ldr	r3, [sp, #8]
 800590a:	429d      	cmp	r5, r3
 800590c:	4606      	mov	r6, r0
 800590e:	460f      	mov	r7, r1
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	d134      	bne.n	8005980 <_dtoa_r+0x660>
 8005916:	4b19      	ldr	r3, [pc, #100]	; (800597c <_dtoa_r+0x65c>)
 8005918:	ec51 0b18 	vmov	r0, r1, d8
 800591c:	f7fa fcb6 	bl	800028c <__adddf3>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4630      	mov	r0, r6
 8005926:	4639      	mov	r1, r7
 8005928:	f7fb f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 800592c:	2800      	cmp	r0, #0
 800592e:	d175      	bne.n	8005a1c <_dtoa_r+0x6fc>
 8005930:	ec53 2b18 	vmov	r2, r3, d8
 8005934:	4911      	ldr	r1, [pc, #68]	; (800597c <_dtoa_r+0x65c>)
 8005936:	2000      	movs	r0, #0
 8005938:	f7fa fca6 	bl	8000288 <__aeabi_dsub>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fb f8ca 	bl	8000adc <__aeabi_dcmplt>
 8005948:	2800      	cmp	r0, #0
 800594a:	f43f af27 	beq.w	800579c <_dtoa_r+0x47c>
 800594e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005950:	1e6b      	subs	r3, r5, #1
 8005952:	930c      	str	r3, [sp, #48]	; 0x30
 8005954:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005958:	2b30      	cmp	r3, #48	; 0x30
 800595a:	d0f8      	beq.n	800594e <_dtoa_r+0x62e>
 800595c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005960:	e04a      	b.n	80059f8 <_dtoa_r+0x6d8>
 8005962:	bf00      	nop
 8005964:	08008058 	.word	0x08008058
 8005968:	08008030 	.word	0x08008030
 800596c:	3ff00000 	.word	0x3ff00000
 8005970:	40240000 	.word	0x40240000
 8005974:	401c0000 	.word	0x401c0000
 8005978:	40140000 	.word	0x40140000
 800597c:	3fe00000 	.word	0x3fe00000
 8005980:	4baf      	ldr	r3, [pc, #700]	; (8005c40 <_dtoa_r+0x920>)
 8005982:	f7fa fe39 	bl	80005f8 <__aeabi_dmul>
 8005986:	4606      	mov	r6, r0
 8005988:	460f      	mov	r7, r1
 800598a:	e7ac      	b.n	80058e6 <_dtoa_r+0x5c6>
 800598c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005990:	9d00      	ldr	r5, [sp, #0]
 8005992:	4642      	mov	r2, r8
 8005994:	464b      	mov	r3, r9
 8005996:	4630      	mov	r0, r6
 8005998:	4639      	mov	r1, r7
 800599a:	f7fa ff57 	bl	800084c <__aeabi_ddiv>
 800599e:	f7fb f8db 	bl	8000b58 <__aeabi_d2iz>
 80059a2:	9002      	str	r0, [sp, #8]
 80059a4:	f7fa fdbe 	bl	8000524 <__aeabi_i2d>
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	f7fa fe24 	bl	80005f8 <__aeabi_dmul>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4630      	mov	r0, r6
 80059b6:	4639      	mov	r1, r7
 80059b8:	f7fa fc66 	bl	8000288 <__aeabi_dsub>
 80059bc:	9e02      	ldr	r6, [sp, #8]
 80059be:	9f01      	ldr	r7, [sp, #4]
 80059c0:	3630      	adds	r6, #48	; 0x30
 80059c2:	f805 6b01 	strb.w	r6, [r5], #1
 80059c6:	9e00      	ldr	r6, [sp, #0]
 80059c8:	1bae      	subs	r6, r5, r6
 80059ca:	42b7      	cmp	r7, r6
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	d137      	bne.n	8005a42 <_dtoa_r+0x722>
 80059d2:	f7fa fc5b 	bl	800028c <__adddf3>
 80059d6:	4642      	mov	r2, r8
 80059d8:	464b      	mov	r3, r9
 80059da:	4606      	mov	r6, r0
 80059dc:	460f      	mov	r7, r1
 80059de:	f7fb f89b 	bl	8000b18 <__aeabi_dcmpgt>
 80059e2:	b9c8      	cbnz	r0, 8005a18 <_dtoa_r+0x6f8>
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	4630      	mov	r0, r6
 80059ea:	4639      	mov	r1, r7
 80059ec:	f7fb f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80059f0:	b110      	cbz	r0, 80059f8 <_dtoa_r+0x6d8>
 80059f2:	9b02      	ldr	r3, [sp, #8]
 80059f4:	07d9      	lsls	r1, r3, #31
 80059f6:	d40f      	bmi.n	8005a18 <_dtoa_r+0x6f8>
 80059f8:	4620      	mov	r0, r4
 80059fa:	4659      	mov	r1, fp
 80059fc:	f000 fad6 	bl	8005fac <_Bfree>
 8005a00:	2300      	movs	r3, #0
 8005a02:	702b      	strb	r3, [r5, #0]
 8005a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a06:	f10a 0001 	add.w	r0, sl, #1
 8005a0a:	6018      	str	r0, [r3, #0]
 8005a0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f43f acd8 	beq.w	80053c4 <_dtoa_r+0xa4>
 8005a14:	601d      	str	r5, [r3, #0]
 8005a16:	e4d5      	b.n	80053c4 <_dtoa_r+0xa4>
 8005a18:	f8cd a01c 	str.w	sl, [sp, #28]
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	461d      	mov	r5, r3
 8005a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a24:	2a39      	cmp	r2, #57	; 0x39
 8005a26:	d108      	bne.n	8005a3a <_dtoa_r+0x71a>
 8005a28:	9a00      	ldr	r2, [sp, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d1f7      	bne.n	8005a1e <_dtoa_r+0x6fe>
 8005a2e:	9a07      	ldr	r2, [sp, #28]
 8005a30:	9900      	ldr	r1, [sp, #0]
 8005a32:	3201      	adds	r2, #1
 8005a34:	9207      	str	r2, [sp, #28]
 8005a36:	2230      	movs	r2, #48	; 0x30
 8005a38:	700a      	strb	r2, [r1, #0]
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e78c      	b.n	800595c <_dtoa_r+0x63c>
 8005a42:	4b7f      	ldr	r3, [pc, #508]	; (8005c40 <_dtoa_r+0x920>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	f7fa fdd7 	bl	80005f8 <__aeabi_dmul>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4606      	mov	r6, r0
 8005a50:	460f      	mov	r7, r1
 8005a52:	f7fb f839 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d09b      	beq.n	8005992 <_dtoa_r+0x672>
 8005a5a:	e7cd      	b.n	80059f8 <_dtoa_r+0x6d8>
 8005a5c:	9a08      	ldr	r2, [sp, #32]
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	f000 80c4 	beq.w	8005bec <_dtoa_r+0x8cc>
 8005a64:	9a05      	ldr	r2, [sp, #20]
 8005a66:	2a01      	cmp	r2, #1
 8005a68:	f300 80a8 	bgt.w	8005bbc <_dtoa_r+0x89c>
 8005a6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	f000 80a0 	beq.w	8005bb4 <_dtoa_r+0x894>
 8005a74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a78:	9e06      	ldr	r6, [sp, #24]
 8005a7a:	4645      	mov	r5, r8
 8005a7c:	9a04      	ldr	r2, [sp, #16]
 8005a7e:	2101      	movs	r1, #1
 8005a80:	441a      	add	r2, r3
 8005a82:	4620      	mov	r0, r4
 8005a84:	4498      	add	r8, r3
 8005a86:	9204      	str	r2, [sp, #16]
 8005a88:	f000 fb4c 	bl	8006124 <__i2b>
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	2d00      	cmp	r5, #0
 8005a90:	dd0b      	ble.n	8005aaa <_dtoa_r+0x78a>
 8005a92:	9b04      	ldr	r3, [sp, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dd08      	ble.n	8005aaa <_dtoa_r+0x78a>
 8005a98:	42ab      	cmp	r3, r5
 8005a9a:	9a04      	ldr	r2, [sp, #16]
 8005a9c:	bfa8      	it	ge
 8005a9e:	462b      	movge	r3, r5
 8005aa0:	eba8 0803 	sub.w	r8, r8, r3
 8005aa4:	1aed      	subs	r5, r5, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	9b06      	ldr	r3, [sp, #24]
 8005aac:	b1fb      	cbz	r3, 8005aee <_dtoa_r+0x7ce>
 8005aae:	9b08      	ldr	r3, [sp, #32]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 809f 	beq.w	8005bf4 <_dtoa_r+0x8d4>
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	dd11      	ble.n	8005ade <_dtoa_r+0x7be>
 8005aba:	4639      	mov	r1, r7
 8005abc:	4632      	mov	r2, r6
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fbec 	bl	800629c <__pow5mult>
 8005ac4:	465a      	mov	r2, fp
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4607      	mov	r7, r0
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fb40 	bl	8006150 <__multiply>
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	9007      	str	r0, [sp, #28]
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fa69 	bl	8005fac <_Bfree>
 8005ada:	9b07      	ldr	r3, [sp, #28]
 8005adc:	469b      	mov	fp, r3
 8005ade:	9b06      	ldr	r3, [sp, #24]
 8005ae0:	1b9a      	subs	r2, r3, r6
 8005ae2:	d004      	beq.n	8005aee <_dtoa_r+0x7ce>
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fbd8 	bl	800629c <__pow5mult>
 8005aec:	4683      	mov	fp, r0
 8005aee:	2101      	movs	r1, #1
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 fb17 	bl	8006124 <__i2b>
 8005af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	4606      	mov	r6, r0
 8005afc:	dd7c      	ble.n	8005bf8 <_dtoa_r+0x8d8>
 8005afe:	461a      	mov	r2, r3
 8005b00:	4601      	mov	r1, r0
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 fbca 	bl	800629c <__pow5mult>
 8005b08:	9b05      	ldr	r3, [sp, #20]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	dd76      	ble.n	8005bfe <_dtoa_r+0x8de>
 8005b10:	2300      	movs	r3, #0
 8005b12:	9306      	str	r3, [sp, #24]
 8005b14:	6933      	ldr	r3, [r6, #16]
 8005b16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b1a:	6918      	ldr	r0, [r3, #16]
 8005b1c:	f000 fab2 	bl	8006084 <__hi0bits>
 8005b20:	f1c0 0020 	rsb	r0, r0, #32
 8005b24:	9b04      	ldr	r3, [sp, #16]
 8005b26:	4418      	add	r0, r3
 8005b28:	f010 001f 	ands.w	r0, r0, #31
 8005b2c:	f000 8086 	beq.w	8005c3c <_dtoa_r+0x91c>
 8005b30:	f1c0 0320 	rsb	r3, r0, #32
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	dd7f      	ble.n	8005c38 <_dtoa_r+0x918>
 8005b38:	f1c0 001c 	rsb	r0, r0, #28
 8005b3c:	9b04      	ldr	r3, [sp, #16]
 8005b3e:	4403      	add	r3, r0
 8005b40:	4480      	add	r8, r0
 8005b42:	4405      	add	r5, r0
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	f1b8 0f00 	cmp.w	r8, #0
 8005b4a:	dd05      	ble.n	8005b58 <_dtoa_r+0x838>
 8005b4c:	4659      	mov	r1, fp
 8005b4e:	4642      	mov	r2, r8
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 fbfd 	bl	8006350 <__lshift>
 8005b56:	4683      	mov	fp, r0
 8005b58:	9b04      	ldr	r3, [sp, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	dd05      	ble.n	8005b6a <_dtoa_r+0x84a>
 8005b5e:	4631      	mov	r1, r6
 8005b60:	461a      	mov	r2, r3
 8005b62:	4620      	mov	r0, r4
 8005b64:	f000 fbf4 	bl	8006350 <__lshift>
 8005b68:	4606      	mov	r6, r0
 8005b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d069      	beq.n	8005c44 <_dtoa_r+0x924>
 8005b70:	4631      	mov	r1, r6
 8005b72:	4658      	mov	r0, fp
 8005b74:	f000 fc58 	bl	8006428 <__mcmp>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	da63      	bge.n	8005c44 <_dtoa_r+0x924>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	4659      	mov	r1, fp
 8005b80:	220a      	movs	r2, #10
 8005b82:	4620      	mov	r0, r4
 8005b84:	f000 fa34 	bl	8005ff0 <__multadd>
 8005b88:	9b08      	ldr	r3, [sp, #32]
 8005b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b8e:	4683      	mov	fp, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 818f 	beq.w	8005eb4 <_dtoa_r+0xb94>
 8005b96:	4639      	mov	r1, r7
 8005b98:	2300      	movs	r3, #0
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 fa27 	bl	8005ff0 <__multadd>
 8005ba2:	f1b9 0f00 	cmp.w	r9, #0
 8005ba6:	4607      	mov	r7, r0
 8005ba8:	f300 808e 	bgt.w	8005cc8 <_dtoa_r+0x9a8>
 8005bac:	9b05      	ldr	r3, [sp, #20]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	dc50      	bgt.n	8005c54 <_dtoa_r+0x934>
 8005bb2:	e089      	b.n	8005cc8 <_dtoa_r+0x9a8>
 8005bb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bba:	e75d      	b.n	8005a78 <_dtoa_r+0x758>
 8005bbc:	9b01      	ldr	r3, [sp, #4]
 8005bbe:	1e5e      	subs	r6, r3, #1
 8005bc0:	9b06      	ldr	r3, [sp, #24]
 8005bc2:	42b3      	cmp	r3, r6
 8005bc4:	bfbf      	itttt	lt
 8005bc6:	9b06      	ldrlt	r3, [sp, #24]
 8005bc8:	9606      	strlt	r6, [sp, #24]
 8005bca:	1af2      	sublt	r2, r6, r3
 8005bcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005bce:	bfb6      	itet	lt
 8005bd0:	189b      	addlt	r3, r3, r2
 8005bd2:	1b9e      	subge	r6, r3, r6
 8005bd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005bd6:	9b01      	ldr	r3, [sp, #4]
 8005bd8:	bfb8      	it	lt
 8005bda:	2600      	movlt	r6, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfb5      	itete	lt
 8005be0:	eba8 0503 	sublt.w	r5, r8, r3
 8005be4:	9b01      	ldrge	r3, [sp, #4]
 8005be6:	2300      	movlt	r3, #0
 8005be8:	4645      	movge	r5, r8
 8005bea:	e747      	b.n	8005a7c <_dtoa_r+0x75c>
 8005bec:	9e06      	ldr	r6, [sp, #24]
 8005bee:	9f08      	ldr	r7, [sp, #32]
 8005bf0:	4645      	mov	r5, r8
 8005bf2:	e74c      	b.n	8005a8e <_dtoa_r+0x76e>
 8005bf4:	9a06      	ldr	r2, [sp, #24]
 8005bf6:	e775      	b.n	8005ae4 <_dtoa_r+0x7c4>
 8005bf8:	9b05      	ldr	r3, [sp, #20]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	dc18      	bgt.n	8005c30 <_dtoa_r+0x910>
 8005bfe:	9b02      	ldr	r3, [sp, #8]
 8005c00:	b9b3      	cbnz	r3, 8005c30 <_dtoa_r+0x910>
 8005c02:	9b03      	ldr	r3, [sp, #12]
 8005c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c08:	b9a3      	cbnz	r3, 8005c34 <_dtoa_r+0x914>
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c10:	0d1b      	lsrs	r3, r3, #20
 8005c12:	051b      	lsls	r3, r3, #20
 8005c14:	b12b      	cbz	r3, 8005c22 <_dtoa_r+0x902>
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	f108 0801 	add.w	r8, r8, #1
 8005c20:	2301      	movs	r3, #1
 8005c22:	9306      	str	r3, [sp, #24]
 8005c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f47f af74 	bne.w	8005b14 <_dtoa_r+0x7f4>
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	e779      	b.n	8005b24 <_dtoa_r+0x804>
 8005c30:	2300      	movs	r3, #0
 8005c32:	e7f6      	b.n	8005c22 <_dtoa_r+0x902>
 8005c34:	9b02      	ldr	r3, [sp, #8]
 8005c36:	e7f4      	b.n	8005c22 <_dtoa_r+0x902>
 8005c38:	d085      	beq.n	8005b46 <_dtoa_r+0x826>
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	301c      	adds	r0, #28
 8005c3e:	e77d      	b.n	8005b3c <_dtoa_r+0x81c>
 8005c40:	40240000 	.word	0x40240000
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	dc38      	bgt.n	8005cbc <_dtoa_r+0x99c>
 8005c4a:	9b05      	ldr	r3, [sp, #20]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	dd35      	ble.n	8005cbc <_dtoa_r+0x99c>
 8005c50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c54:	f1b9 0f00 	cmp.w	r9, #0
 8005c58:	d10d      	bne.n	8005c76 <_dtoa_r+0x956>
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	2205      	movs	r2, #5
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f9c5 	bl	8005ff0 <__multadd>
 8005c66:	4601      	mov	r1, r0
 8005c68:	4606      	mov	r6, r0
 8005c6a:	4658      	mov	r0, fp
 8005c6c:	f000 fbdc 	bl	8006428 <__mcmp>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f73f adbd 	bgt.w	80057f0 <_dtoa_r+0x4d0>
 8005c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c78:	9d00      	ldr	r5, [sp, #0]
 8005c7a:	ea6f 0a03 	mvn.w	sl, r3
 8005c7e:	f04f 0800 	mov.w	r8, #0
 8005c82:	4631      	mov	r1, r6
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 f991 	bl	8005fac <_Bfree>
 8005c8a:	2f00      	cmp	r7, #0
 8005c8c:	f43f aeb4 	beq.w	80059f8 <_dtoa_r+0x6d8>
 8005c90:	f1b8 0f00 	cmp.w	r8, #0
 8005c94:	d005      	beq.n	8005ca2 <_dtoa_r+0x982>
 8005c96:	45b8      	cmp	r8, r7
 8005c98:	d003      	beq.n	8005ca2 <_dtoa_r+0x982>
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f000 f985 	bl	8005fac <_Bfree>
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 f981 	bl	8005fac <_Bfree>
 8005caa:	e6a5      	b.n	80059f8 <_dtoa_r+0x6d8>
 8005cac:	2600      	movs	r6, #0
 8005cae:	4637      	mov	r7, r6
 8005cb0:	e7e1      	b.n	8005c76 <_dtoa_r+0x956>
 8005cb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005cb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005cb8:	4637      	mov	r7, r6
 8005cba:	e599      	b.n	80057f0 <_dtoa_r+0x4d0>
 8005cbc:	9b08      	ldr	r3, [sp, #32]
 8005cbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80fd 	beq.w	8005ec2 <_dtoa_r+0xba2>
 8005cc8:	2d00      	cmp	r5, #0
 8005cca:	dd05      	ble.n	8005cd8 <_dtoa_r+0x9b8>
 8005ccc:	4639      	mov	r1, r7
 8005cce:	462a      	mov	r2, r5
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fb3d 	bl	8006350 <__lshift>
 8005cd6:	4607      	mov	r7, r0
 8005cd8:	9b06      	ldr	r3, [sp, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d05c      	beq.n	8005d98 <_dtoa_r+0xa78>
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 f923 	bl	8005f2c <_Balloc>
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	b928      	cbnz	r0, 8005cf6 <_dtoa_r+0x9d6>
 8005cea:	4b80      	ldr	r3, [pc, #512]	; (8005eec <_dtoa_r+0xbcc>)
 8005cec:	4602      	mov	r2, r0
 8005cee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cf2:	f7ff bb2e 	b.w	8005352 <_dtoa_r+0x32>
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	3202      	adds	r2, #2
 8005cfa:	0092      	lsls	r2, r2, #2
 8005cfc:	f107 010c 	add.w	r1, r7, #12
 8005d00:	300c      	adds	r0, #12
 8005d02:	f000 f905 	bl	8005f10 <memcpy>
 8005d06:	2201      	movs	r2, #1
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f000 fb20 	bl	8006350 <__lshift>
 8005d10:	9b00      	ldr	r3, [sp, #0]
 8005d12:	3301      	adds	r3, #1
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	9b00      	ldr	r3, [sp, #0]
 8005d18:	444b      	add	r3, r9
 8005d1a:	9307      	str	r3, [sp, #28]
 8005d1c:	9b02      	ldr	r3, [sp, #8]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	46b8      	mov	r8, r7
 8005d24:	9306      	str	r3, [sp, #24]
 8005d26:	4607      	mov	r7, r0
 8005d28:	9b01      	ldr	r3, [sp, #4]
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4658      	mov	r0, fp
 8005d30:	9302      	str	r3, [sp, #8]
 8005d32:	f7ff fa6a 	bl	800520a <quorem>
 8005d36:	4603      	mov	r3, r0
 8005d38:	3330      	adds	r3, #48	; 0x30
 8005d3a:	9004      	str	r0, [sp, #16]
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	4658      	mov	r0, fp
 8005d40:	9308      	str	r3, [sp, #32]
 8005d42:	f000 fb71 	bl	8006428 <__mcmp>
 8005d46:	463a      	mov	r2, r7
 8005d48:	4681      	mov	r9, r0
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 fb87 	bl	8006460 <__mdiff>
 8005d52:	68c2      	ldr	r2, [r0, #12]
 8005d54:	9b08      	ldr	r3, [sp, #32]
 8005d56:	4605      	mov	r5, r0
 8005d58:	bb02      	cbnz	r2, 8005d9c <_dtoa_r+0xa7c>
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	4658      	mov	r0, fp
 8005d5e:	f000 fb63 	bl	8006428 <__mcmp>
 8005d62:	9b08      	ldr	r3, [sp, #32]
 8005d64:	4602      	mov	r2, r0
 8005d66:	4629      	mov	r1, r5
 8005d68:	4620      	mov	r0, r4
 8005d6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005d6e:	f000 f91d 	bl	8005fac <_Bfree>
 8005d72:	9b05      	ldr	r3, [sp, #20]
 8005d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d76:	9d01      	ldr	r5, [sp, #4]
 8005d78:	ea43 0102 	orr.w	r1, r3, r2
 8005d7c:	9b06      	ldr	r3, [sp, #24]
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	9b08      	ldr	r3, [sp, #32]
 8005d82:	d10d      	bne.n	8005da0 <_dtoa_r+0xa80>
 8005d84:	2b39      	cmp	r3, #57	; 0x39
 8005d86:	d029      	beq.n	8005ddc <_dtoa_r+0xabc>
 8005d88:	f1b9 0f00 	cmp.w	r9, #0
 8005d8c:	dd01      	ble.n	8005d92 <_dtoa_r+0xa72>
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	3331      	adds	r3, #49	; 0x31
 8005d92:	9a02      	ldr	r2, [sp, #8]
 8005d94:	7013      	strb	r3, [r2, #0]
 8005d96:	e774      	b.n	8005c82 <_dtoa_r+0x962>
 8005d98:	4638      	mov	r0, r7
 8005d9a:	e7b9      	b.n	8005d10 <_dtoa_r+0x9f0>
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	e7e2      	b.n	8005d66 <_dtoa_r+0xa46>
 8005da0:	f1b9 0f00 	cmp.w	r9, #0
 8005da4:	db06      	blt.n	8005db4 <_dtoa_r+0xa94>
 8005da6:	9905      	ldr	r1, [sp, #20]
 8005da8:	ea41 0909 	orr.w	r9, r1, r9
 8005dac:	9906      	ldr	r1, [sp, #24]
 8005dae:	ea59 0101 	orrs.w	r1, r9, r1
 8005db2:	d120      	bne.n	8005df6 <_dtoa_r+0xad6>
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	ddec      	ble.n	8005d92 <_dtoa_r+0xa72>
 8005db8:	4659      	mov	r1, fp
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	9301      	str	r3, [sp, #4]
 8005dc0:	f000 fac6 	bl	8006350 <__lshift>
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4683      	mov	fp, r0
 8005dc8:	f000 fb2e 	bl	8006428 <__mcmp>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	dc02      	bgt.n	8005dd8 <_dtoa_r+0xab8>
 8005dd2:	d1de      	bne.n	8005d92 <_dtoa_r+0xa72>
 8005dd4:	07da      	lsls	r2, r3, #31
 8005dd6:	d5dc      	bpl.n	8005d92 <_dtoa_r+0xa72>
 8005dd8:	2b39      	cmp	r3, #57	; 0x39
 8005dda:	d1d8      	bne.n	8005d8e <_dtoa_r+0xa6e>
 8005ddc:	9a02      	ldr	r2, [sp, #8]
 8005dde:	2339      	movs	r3, #57	; 0x39
 8005de0:	7013      	strb	r3, [r2, #0]
 8005de2:	462b      	mov	r3, r5
 8005de4:	461d      	mov	r5, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005dec:	2a39      	cmp	r2, #57	; 0x39
 8005dee:	d050      	beq.n	8005e92 <_dtoa_r+0xb72>
 8005df0:	3201      	adds	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e745      	b.n	8005c82 <_dtoa_r+0x962>
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	dd03      	ble.n	8005e02 <_dtoa_r+0xae2>
 8005dfa:	2b39      	cmp	r3, #57	; 0x39
 8005dfc:	d0ee      	beq.n	8005ddc <_dtoa_r+0xabc>
 8005dfe:	3301      	adds	r3, #1
 8005e00:	e7c7      	b.n	8005d92 <_dtoa_r+0xa72>
 8005e02:	9a01      	ldr	r2, [sp, #4]
 8005e04:	9907      	ldr	r1, [sp, #28]
 8005e06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e0a:	428a      	cmp	r2, r1
 8005e0c:	d02a      	beq.n	8005e64 <_dtoa_r+0xb44>
 8005e0e:	4659      	mov	r1, fp
 8005e10:	2300      	movs	r3, #0
 8005e12:	220a      	movs	r2, #10
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 f8eb 	bl	8005ff0 <__multadd>
 8005e1a:	45b8      	cmp	r8, r7
 8005e1c:	4683      	mov	fp, r0
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	f04f 020a 	mov.w	r2, #10
 8005e26:	4641      	mov	r1, r8
 8005e28:	4620      	mov	r0, r4
 8005e2a:	d107      	bne.n	8005e3c <_dtoa_r+0xb1c>
 8005e2c:	f000 f8e0 	bl	8005ff0 <__multadd>
 8005e30:	4680      	mov	r8, r0
 8005e32:	4607      	mov	r7, r0
 8005e34:	9b01      	ldr	r3, [sp, #4]
 8005e36:	3301      	adds	r3, #1
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	e775      	b.n	8005d28 <_dtoa_r+0xa08>
 8005e3c:	f000 f8d8 	bl	8005ff0 <__multadd>
 8005e40:	4639      	mov	r1, r7
 8005e42:	4680      	mov	r8, r0
 8005e44:	2300      	movs	r3, #0
 8005e46:	220a      	movs	r2, #10
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 f8d1 	bl	8005ff0 <__multadd>
 8005e4e:	4607      	mov	r7, r0
 8005e50:	e7f0      	b.n	8005e34 <_dtoa_r+0xb14>
 8005e52:	f1b9 0f00 	cmp.w	r9, #0
 8005e56:	9a00      	ldr	r2, [sp, #0]
 8005e58:	bfcc      	ite	gt
 8005e5a:	464d      	movgt	r5, r9
 8005e5c:	2501      	movle	r5, #1
 8005e5e:	4415      	add	r5, r2
 8005e60:	f04f 0800 	mov.w	r8, #0
 8005e64:	4659      	mov	r1, fp
 8005e66:	2201      	movs	r2, #1
 8005e68:	4620      	mov	r0, r4
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	f000 fa70 	bl	8006350 <__lshift>
 8005e70:	4631      	mov	r1, r6
 8005e72:	4683      	mov	fp, r0
 8005e74:	f000 fad8 	bl	8006428 <__mcmp>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	dcb2      	bgt.n	8005de2 <_dtoa_r+0xac2>
 8005e7c:	d102      	bne.n	8005e84 <_dtoa_r+0xb64>
 8005e7e:	9b01      	ldr	r3, [sp, #4]
 8005e80:	07db      	lsls	r3, r3, #31
 8005e82:	d4ae      	bmi.n	8005de2 <_dtoa_r+0xac2>
 8005e84:	462b      	mov	r3, r5
 8005e86:	461d      	mov	r5, r3
 8005e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e8c:	2a30      	cmp	r2, #48	; 0x30
 8005e8e:	d0fa      	beq.n	8005e86 <_dtoa_r+0xb66>
 8005e90:	e6f7      	b.n	8005c82 <_dtoa_r+0x962>
 8005e92:	9a00      	ldr	r2, [sp, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d1a5      	bne.n	8005de4 <_dtoa_r+0xac4>
 8005e98:	f10a 0a01 	add.w	sl, sl, #1
 8005e9c:	2331      	movs	r3, #49	; 0x31
 8005e9e:	e779      	b.n	8005d94 <_dtoa_r+0xa74>
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <_dtoa_r+0xbd0>)
 8005ea2:	f7ff baaf 	b.w	8005404 <_dtoa_r+0xe4>
 8005ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f47f aa86 	bne.w	80053ba <_dtoa_r+0x9a>
 8005eae:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <_dtoa_r+0xbd4>)
 8005eb0:	f7ff baa8 	b.w	8005404 <_dtoa_r+0xe4>
 8005eb4:	f1b9 0f00 	cmp.w	r9, #0
 8005eb8:	dc03      	bgt.n	8005ec2 <_dtoa_r+0xba2>
 8005eba:	9b05      	ldr	r3, [sp, #20]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	f73f aec9 	bgt.w	8005c54 <_dtoa_r+0x934>
 8005ec2:	9d00      	ldr	r5, [sp, #0]
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4658      	mov	r0, fp
 8005ec8:	f7ff f99f 	bl	800520a <quorem>
 8005ecc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ed4:	9a00      	ldr	r2, [sp, #0]
 8005ed6:	1aaa      	subs	r2, r5, r2
 8005ed8:	4591      	cmp	r9, r2
 8005eda:	ddba      	ble.n	8005e52 <_dtoa_r+0xb32>
 8005edc:	4659      	mov	r1, fp
 8005ede:	2300      	movs	r3, #0
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f884 	bl	8005ff0 <__multadd>
 8005ee8:	4683      	mov	fp, r0
 8005eea:	e7eb      	b.n	8005ec4 <_dtoa_r+0xba4>
 8005eec:	08007fbb 	.word	0x08007fbb
 8005ef0:	08007f14 	.word	0x08007f14
 8005ef4:	08007f38 	.word	0x08007f38

08005ef8 <_localeconv_r>:
 8005ef8:	4800      	ldr	r0, [pc, #0]	; (8005efc <_localeconv_r+0x4>)
 8005efa:	4770      	bx	lr
 8005efc:	2000016c 	.word	0x2000016c

08005f00 <malloc>:
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <malloc+0xc>)
 8005f02:	4601      	mov	r1, r0
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f000 bbef 	b.w	80066e8 <_malloc_r>
 8005f0a:	bf00      	nop
 8005f0c:	20000018 	.word	0x20000018

08005f10 <memcpy>:
 8005f10:	440a      	add	r2, r1
 8005f12:	4291      	cmp	r1, r2
 8005f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f18:	d100      	bne.n	8005f1c <memcpy+0xc>
 8005f1a:	4770      	bx	lr
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f26:	4291      	cmp	r1, r2
 8005f28:	d1f9      	bne.n	8005f1e <memcpy+0xe>
 8005f2a:	bd10      	pop	{r4, pc}

08005f2c <_Balloc>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f30:	4604      	mov	r4, r0
 8005f32:	460d      	mov	r5, r1
 8005f34:	b976      	cbnz	r6, 8005f54 <_Balloc+0x28>
 8005f36:	2010      	movs	r0, #16
 8005f38:	f7ff ffe2 	bl	8005f00 <malloc>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8005f40:	b920      	cbnz	r0, 8005f4c <_Balloc+0x20>
 8005f42:	4b18      	ldr	r3, [pc, #96]	; (8005fa4 <_Balloc+0x78>)
 8005f44:	4818      	ldr	r0, [pc, #96]	; (8005fa8 <_Balloc+0x7c>)
 8005f46:	2166      	movs	r1, #102	; 0x66
 8005f48:	f000 fd94 	bl	8006a74 <__assert_func>
 8005f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f50:	6006      	str	r6, [r0, #0]
 8005f52:	60c6      	str	r6, [r0, #12]
 8005f54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f56:	68f3      	ldr	r3, [r6, #12]
 8005f58:	b183      	cbz	r3, 8005f7c <_Balloc+0x50>
 8005f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f62:	b9b8      	cbnz	r0, 8005f94 <_Balloc+0x68>
 8005f64:	2101      	movs	r1, #1
 8005f66:	fa01 f605 	lsl.w	r6, r1, r5
 8005f6a:	1d72      	adds	r2, r6, #5
 8005f6c:	0092      	lsls	r2, r2, #2
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 fb5a 	bl	8006628 <_calloc_r>
 8005f74:	b160      	cbz	r0, 8005f90 <_Balloc+0x64>
 8005f76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f7a:	e00e      	b.n	8005f9a <_Balloc+0x6e>
 8005f7c:	2221      	movs	r2, #33	; 0x21
 8005f7e:	2104      	movs	r1, #4
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fb51 	bl	8006628 <_calloc_r>
 8005f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f88:	60f0      	str	r0, [r6, #12]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e4      	bne.n	8005f5a <_Balloc+0x2e>
 8005f90:	2000      	movs	r0, #0
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	6802      	ldr	r2, [r0, #0]
 8005f96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fa0:	e7f7      	b.n	8005f92 <_Balloc+0x66>
 8005fa2:	bf00      	nop
 8005fa4:	08007f45 	.word	0x08007f45
 8005fa8:	08007fcc 	.word	0x08007fcc

08005fac <_Bfree>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	b976      	cbnz	r6, 8005fd4 <_Bfree+0x28>
 8005fb6:	2010      	movs	r0, #16
 8005fb8:	f7ff ffa2 	bl	8005f00 <malloc>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6268      	str	r0, [r5, #36]	; 0x24
 8005fc0:	b920      	cbnz	r0, 8005fcc <_Bfree+0x20>
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <_Bfree+0x3c>)
 8005fc4:	4809      	ldr	r0, [pc, #36]	; (8005fec <_Bfree+0x40>)
 8005fc6:	218a      	movs	r1, #138	; 0x8a
 8005fc8:	f000 fd54 	bl	8006a74 <__assert_func>
 8005fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fd0:	6006      	str	r6, [r0, #0]
 8005fd2:	60c6      	str	r6, [r0, #12]
 8005fd4:	b13c      	cbz	r4, 8005fe6 <_Bfree+0x3a>
 8005fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fd8:	6862      	ldr	r2, [r4, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fe0:	6021      	str	r1, [r4, #0]
 8005fe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	08007f45 	.word	0x08007f45
 8005fec:	08007fcc 	.word	0x08007fcc

08005ff0 <__multadd>:
 8005ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff4:	690e      	ldr	r6, [r1, #16]
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	4698      	mov	r8, r3
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f101 0014 	add.w	r0, r1, #20
 8006000:	2300      	movs	r3, #0
 8006002:	6805      	ldr	r5, [r0, #0]
 8006004:	b2a9      	uxth	r1, r5
 8006006:	fb02 8101 	mla	r1, r2, r1, r8
 800600a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800600e:	0c2d      	lsrs	r5, r5, #16
 8006010:	fb02 c505 	mla	r5, r2, r5, ip
 8006014:	b289      	uxth	r1, r1
 8006016:	3301      	adds	r3, #1
 8006018:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800601c:	429e      	cmp	r6, r3
 800601e:	f840 1b04 	str.w	r1, [r0], #4
 8006022:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006026:	dcec      	bgt.n	8006002 <__multadd+0x12>
 8006028:	f1b8 0f00 	cmp.w	r8, #0
 800602c:	d022      	beq.n	8006074 <__multadd+0x84>
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	42b3      	cmp	r3, r6
 8006032:	dc19      	bgt.n	8006068 <__multadd+0x78>
 8006034:	6861      	ldr	r1, [r4, #4]
 8006036:	4638      	mov	r0, r7
 8006038:	3101      	adds	r1, #1
 800603a:	f7ff ff77 	bl	8005f2c <_Balloc>
 800603e:	4605      	mov	r5, r0
 8006040:	b928      	cbnz	r0, 800604e <__multadd+0x5e>
 8006042:	4602      	mov	r2, r0
 8006044:	4b0d      	ldr	r3, [pc, #52]	; (800607c <__multadd+0x8c>)
 8006046:	480e      	ldr	r0, [pc, #56]	; (8006080 <__multadd+0x90>)
 8006048:	21b5      	movs	r1, #181	; 0xb5
 800604a:	f000 fd13 	bl	8006a74 <__assert_func>
 800604e:	6922      	ldr	r2, [r4, #16]
 8006050:	3202      	adds	r2, #2
 8006052:	f104 010c 	add.w	r1, r4, #12
 8006056:	0092      	lsls	r2, r2, #2
 8006058:	300c      	adds	r0, #12
 800605a:	f7ff ff59 	bl	8005f10 <memcpy>
 800605e:	4621      	mov	r1, r4
 8006060:	4638      	mov	r0, r7
 8006062:	f7ff ffa3 	bl	8005fac <_Bfree>
 8006066:	462c      	mov	r4, r5
 8006068:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800606c:	3601      	adds	r6, #1
 800606e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006072:	6126      	str	r6, [r4, #16]
 8006074:	4620      	mov	r0, r4
 8006076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607a:	bf00      	nop
 800607c:	08007fbb 	.word	0x08007fbb
 8006080:	08007fcc 	.word	0x08007fcc

08006084 <__hi0bits>:
 8006084:	0c03      	lsrs	r3, r0, #16
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	b9d3      	cbnz	r3, 80060c0 <__hi0bits+0x3c>
 800608a:	0400      	lsls	r0, r0, #16
 800608c:	2310      	movs	r3, #16
 800608e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006092:	bf04      	itt	eq
 8006094:	0200      	lsleq	r0, r0, #8
 8006096:	3308      	addeq	r3, #8
 8006098:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800609c:	bf04      	itt	eq
 800609e:	0100      	lsleq	r0, r0, #4
 80060a0:	3304      	addeq	r3, #4
 80060a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060a6:	bf04      	itt	eq
 80060a8:	0080      	lsleq	r0, r0, #2
 80060aa:	3302      	addeq	r3, #2
 80060ac:	2800      	cmp	r0, #0
 80060ae:	db05      	blt.n	80060bc <__hi0bits+0x38>
 80060b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060b4:	f103 0301 	add.w	r3, r3, #1
 80060b8:	bf08      	it	eq
 80060ba:	2320      	moveq	r3, #32
 80060bc:	4618      	mov	r0, r3
 80060be:	4770      	bx	lr
 80060c0:	2300      	movs	r3, #0
 80060c2:	e7e4      	b.n	800608e <__hi0bits+0xa>

080060c4 <__lo0bits>:
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	f013 0207 	ands.w	r2, r3, #7
 80060ca:	4601      	mov	r1, r0
 80060cc:	d00b      	beq.n	80060e6 <__lo0bits+0x22>
 80060ce:	07da      	lsls	r2, r3, #31
 80060d0:	d424      	bmi.n	800611c <__lo0bits+0x58>
 80060d2:	0798      	lsls	r0, r3, #30
 80060d4:	bf49      	itett	mi
 80060d6:	085b      	lsrmi	r3, r3, #1
 80060d8:	089b      	lsrpl	r3, r3, #2
 80060da:	2001      	movmi	r0, #1
 80060dc:	600b      	strmi	r3, [r1, #0]
 80060de:	bf5c      	itt	pl
 80060e0:	600b      	strpl	r3, [r1, #0]
 80060e2:	2002      	movpl	r0, #2
 80060e4:	4770      	bx	lr
 80060e6:	b298      	uxth	r0, r3
 80060e8:	b9b0      	cbnz	r0, 8006118 <__lo0bits+0x54>
 80060ea:	0c1b      	lsrs	r3, r3, #16
 80060ec:	2010      	movs	r0, #16
 80060ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060f2:	bf04      	itt	eq
 80060f4:	0a1b      	lsreq	r3, r3, #8
 80060f6:	3008      	addeq	r0, #8
 80060f8:	071a      	lsls	r2, r3, #28
 80060fa:	bf04      	itt	eq
 80060fc:	091b      	lsreq	r3, r3, #4
 80060fe:	3004      	addeq	r0, #4
 8006100:	079a      	lsls	r2, r3, #30
 8006102:	bf04      	itt	eq
 8006104:	089b      	lsreq	r3, r3, #2
 8006106:	3002      	addeq	r0, #2
 8006108:	07da      	lsls	r2, r3, #31
 800610a:	d403      	bmi.n	8006114 <__lo0bits+0x50>
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	f100 0001 	add.w	r0, r0, #1
 8006112:	d005      	beq.n	8006120 <__lo0bits+0x5c>
 8006114:	600b      	str	r3, [r1, #0]
 8006116:	4770      	bx	lr
 8006118:	4610      	mov	r0, r2
 800611a:	e7e8      	b.n	80060ee <__lo0bits+0x2a>
 800611c:	2000      	movs	r0, #0
 800611e:	4770      	bx	lr
 8006120:	2020      	movs	r0, #32
 8006122:	4770      	bx	lr

08006124 <__i2b>:
 8006124:	b510      	push	{r4, lr}
 8006126:	460c      	mov	r4, r1
 8006128:	2101      	movs	r1, #1
 800612a:	f7ff feff 	bl	8005f2c <_Balloc>
 800612e:	4602      	mov	r2, r0
 8006130:	b928      	cbnz	r0, 800613e <__i2b+0x1a>
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <__i2b+0x24>)
 8006134:	4805      	ldr	r0, [pc, #20]	; (800614c <__i2b+0x28>)
 8006136:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800613a:	f000 fc9b 	bl	8006a74 <__assert_func>
 800613e:	2301      	movs	r3, #1
 8006140:	6144      	str	r4, [r0, #20]
 8006142:	6103      	str	r3, [r0, #16]
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop
 8006148:	08007fbb 	.word	0x08007fbb
 800614c:	08007fcc 	.word	0x08007fcc

08006150 <__multiply>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	4614      	mov	r4, r2
 8006156:	690a      	ldr	r2, [r1, #16]
 8006158:	6923      	ldr	r3, [r4, #16]
 800615a:	429a      	cmp	r2, r3
 800615c:	bfb8      	it	lt
 800615e:	460b      	movlt	r3, r1
 8006160:	460d      	mov	r5, r1
 8006162:	bfbc      	itt	lt
 8006164:	4625      	movlt	r5, r4
 8006166:	461c      	movlt	r4, r3
 8006168:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800616c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006170:	68ab      	ldr	r3, [r5, #8]
 8006172:	6869      	ldr	r1, [r5, #4]
 8006174:	eb0a 0709 	add.w	r7, sl, r9
 8006178:	42bb      	cmp	r3, r7
 800617a:	b085      	sub	sp, #20
 800617c:	bfb8      	it	lt
 800617e:	3101      	addlt	r1, #1
 8006180:	f7ff fed4 	bl	8005f2c <_Balloc>
 8006184:	b930      	cbnz	r0, 8006194 <__multiply+0x44>
 8006186:	4602      	mov	r2, r0
 8006188:	4b42      	ldr	r3, [pc, #264]	; (8006294 <__multiply+0x144>)
 800618a:	4843      	ldr	r0, [pc, #268]	; (8006298 <__multiply+0x148>)
 800618c:	f240 115d 	movw	r1, #349	; 0x15d
 8006190:	f000 fc70 	bl	8006a74 <__assert_func>
 8006194:	f100 0614 	add.w	r6, r0, #20
 8006198:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800619c:	4633      	mov	r3, r6
 800619e:	2200      	movs	r2, #0
 80061a0:	4543      	cmp	r3, r8
 80061a2:	d31e      	bcc.n	80061e2 <__multiply+0x92>
 80061a4:	f105 0c14 	add.w	ip, r5, #20
 80061a8:	f104 0314 	add.w	r3, r4, #20
 80061ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80061b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80061b4:	9202      	str	r2, [sp, #8]
 80061b6:	ebac 0205 	sub.w	r2, ip, r5
 80061ba:	3a15      	subs	r2, #21
 80061bc:	f022 0203 	bic.w	r2, r2, #3
 80061c0:	3204      	adds	r2, #4
 80061c2:	f105 0115 	add.w	r1, r5, #21
 80061c6:	458c      	cmp	ip, r1
 80061c8:	bf38      	it	cc
 80061ca:	2204      	movcc	r2, #4
 80061cc:	9201      	str	r2, [sp, #4]
 80061ce:	9a02      	ldr	r2, [sp, #8]
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d808      	bhi.n	80061e8 <__multiply+0x98>
 80061d6:	2f00      	cmp	r7, #0
 80061d8:	dc55      	bgt.n	8006286 <__multiply+0x136>
 80061da:	6107      	str	r7, [r0, #16]
 80061dc:	b005      	add	sp, #20
 80061de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e2:	f843 2b04 	str.w	r2, [r3], #4
 80061e6:	e7db      	b.n	80061a0 <__multiply+0x50>
 80061e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80061ec:	f1ba 0f00 	cmp.w	sl, #0
 80061f0:	d020      	beq.n	8006234 <__multiply+0xe4>
 80061f2:	f105 0e14 	add.w	lr, r5, #20
 80061f6:	46b1      	mov	r9, r6
 80061f8:	2200      	movs	r2, #0
 80061fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80061fe:	f8d9 b000 	ldr.w	fp, [r9]
 8006202:	b2a1      	uxth	r1, r4
 8006204:	fa1f fb8b 	uxth.w	fp, fp
 8006208:	fb0a b101 	mla	r1, sl, r1, fp
 800620c:	4411      	add	r1, r2
 800620e:	f8d9 2000 	ldr.w	r2, [r9]
 8006212:	0c24      	lsrs	r4, r4, #16
 8006214:	0c12      	lsrs	r2, r2, #16
 8006216:	fb0a 2404 	mla	r4, sl, r4, r2
 800621a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800621e:	b289      	uxth	r1, r1
 8006220:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006224:	45f4      	cmp	ip, lr
 8006226:	f849 1b04 	str.w	r1, [r9], #4
 800622a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800622e:	d8e4      	bhi.n	80061fa <__multiply+0xaa>
 8006230:	9901      	ldr	r1, [sp, #4]
 8006232:	5072      	str	r2, [r6, r1]
 8006234:	9a03      	ldr	r2, [sp, #12]
 8006236:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800623a:	3304      	adds	r3, #4
 800623c:	f1b9 0f00 	cmp.w	r9, #0
 8006240:	d01f      	beq.n	8006282 <__multiply+0x132>
 8006242:	6834      	ldr	r4, [r6, #0]
 8006244:	f105 0114 	add.w	r1, r5, #20
 8006248:	46b6      	mov	lr, r6
 800624a:	f04f 0a00 	mov.w	sl, #0
 800624e:	880a      	ldrh	r2, [r1, #0]
 8006250:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006254:	fb09 b202 	mla	r2, r9, r2, fp
 8006258:	4492      	add	sl, r2
 800625a:	b2a4      	uxth	r4, r4
 800625c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006260:	f84e 4b04 	str.w	r4, [lr], #4
 8006264:	f851 4b04 	ldr.w	r4, [r1], #4
 8006268:	f8be 2000 	ldrh.w	r2, [lr]
 800626c:	0c24      	lsrs	r4, r4, #16
 800626e:	fb09 2404 	mla	r4, r9, r4, r2
 8006272:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006276:	458c      	cmp	ip, r1
 8006278:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800627c:	d8e7      	bhi.n	800624e <__multiply+0xfe>
 800627e:	9a01      	ldr	r2, [sp, #4]
 8006280:	50b4      	str	r4, [r6, r2]
 8006282:	3604      	adds	r6, #4
 8006284:	e7a3      	b.n	80061ce <__multiply+0x7e>
 8006286:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1a5      	bne.n	80061da <__multiply+0x8a>
 800628e:	3f01      	subs	r7, #1
 8006290:	e7a1      	b.n	80061d6 <__multiply+0x86>
 8006292:	bf00      	nop
 8006294:	08007fbb 	.word	0x08007fbb
 8006298:	08007fcc 	.word	0x08007fcc

0800629c <__pow5mult>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	4615      	mov	r5, r2
 80062a2:	f012 0203 	ands.w	r2, r2, #3
 80062a6:	4606      	mov	r6, r0
 80062a8:	460f      	mov	r7, r1
 80062aa:	d007      	beq.n	80062bc <__pow5mult+0x20>
 80062ac:	4c25      	ldr	r4, [pc, #148]	; (8006344 <__pow5mult+0xa8>)
 80062ae:	3a01      	subs	r2, #1
 80062b0:	2300      	movs	r3, #0
 80062b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062b6:	f7ff fe9b 	bl	8005ff0 <__multadd>
 80062ba:	4607      	mov	r7, r0
 80062bc:	10ad      	asrs	r5, r5, #2
 80062be:	d03d      	beq.n	800633c <__pow5mult+0xa0>
 80062c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062c2:	b97c      	cbnz	r4, 80062e4 <__pow5mult+0x48>
 80062c4:	2010      	movs	r0, #16
 80062c6:	f7ff fe1b 	bl	8005f00 <malloc>
 80062ca:	4602      	mov	r2, r0
 80062cc:	6270      	str	r0, [r6, #36]	; 0x24
 80062ce:	b928      	cbnz	r0, 80062dc <__pow5mult+0x40>
 80062d0:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <__pow5mult+0xac>)
 80062d2:	481e      	ldr	r0, [pc, #120]	; (800634c <__pow5mult+0xb0>)
 80062d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062d8:	f000 fbcc 	bl	8006a74 <__assert_func>
 80062dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e0:	6004      	str	r4, [r0, #0]
 80062e2:	60c4      	str	r4, [r0, #12]
 80062e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062ec:	b94c      	cbnz	r4, 8006302 <__pow5mult+0x66>
 80062ee:	f240 2171 	movw	r1, #625	; 0x271
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff ff16 	bl	8006124 <__i2b>
 80062f8:	2300      	movs	r3, #0
 80062fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80062fe:	4604      	mov	r4, r0
 8006300:	6003      	str	r3, [r0, #0]
 8006302:	f04f 0900 	mov.w	r9, #0
 8006306:	07eb      	lsls	r3, r5, #31
 8006308:	d50a      	bpl.n	8006320 <__pow5mult+0x84>
 800630a:	4639      	mov	r1, r7
 800630c:	4622      	mov	r2, r4
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ff1e 	bl	8006150 <__multiply>
 8006314:	4639      	mov	r1, r7
 8006316:	4680      	mov	r8, r0
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff fe47 	bl	8005fac <_Bfree>
 800631e:	4647      	mov	r7, r8
 8006320:	106d      	asrs	r5, r5, #1
 8006322:	d00b      	beq.n	800633c <__pow5mult+0xa0>
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	b938      	cbnz	r0, 8006338 <__pow5mult+0x9c>
 8006328:	4622      	mov	r2, r4
 800632a:	4621      	mov	r1, r4
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff ff0f 	bl	8006150 <__multiply>
 8006332:	6020      	str	r0, [r4, #0]
 8006334:	f8c0 9000 	str.w	r9, [r0]
 8006338:	4604      	mov	r4, r0
 800633a:	e7e4      	b.n	8006306 <__pow5mult+0x6a>
 800633c:	4638      	mov	r0, r7
 800633e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006342:	bf00      	nop
 8006344:	08008120 	.word	0x08008120
 8006348:	08007f45 	.word	0x08007f45
 800634c:	08007fcc 	.word	0x08007fcc

08006350 <__lshift>:
 8006350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	460c      	mov	r4, r1
 8006356:	6849      	ldr	r1, [r1, #4]
 8006358:	6923      	ldr	r3, [r4, #16]
 800635a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	4607      	mov	r7, r0
 8006362:	4691      	mov	r9, r2
 8006364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006368:	f108 0601 	add.w	r6, r8, #1
 800636c:	42b3      	cmp	r3, r6
 800636e:	db0b      	blt.n	8006388 <__lshift+0x38>
 8006370:	4638      	mov	r0, r7
 8006372:	f7ff fddb 	bl	8005f2c <_Balloc>
 8006376:	4605      	mov	r5, r0
 8006378:	b948      	cbnz	r0, 800638e <__lshift+0x3e>
 800637a:	4602      	mov	r2, r0
 800637c:	4b28      	ldr	r3, [pc, #160]	; (8006420 <__lshift+0xd0>)
 800637e:	4829      	ldr	r0, [pc, #164]	; (8006424 <__lshift+0xd4>)
 8006380:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006384:	f000 fb76 	bl	8006a74 <__assert_func>
 8006388:	3101      	adds	r1, #1
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	e7ee      	b.n	800636c <__lshift+0x1c>
 800638e:	2300      	movs	r3, #0
 8006390:	f100 0114 	add.w	r1, r0, #20
 8006394:	f100 0210 	add.w	r2, r0, #16
 8006398:	4618      	mov	r0, r3
 800639a:	4553      	cmp	r3, sl
 800639c:	db33      	blt.n	8006406 <__lshift+0xb6>
 800639e:	6920      	ldr	r0, [r4, #16]
 80063a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063a4:	f104 0314 	add.w	r3, r4, #20
 80063a8:	f019 091f 	ands.w	r9, r9, #31
 80063ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063b4:	d02b      	beq.n	800640e <__lshift+0xbe>
 80063b6:	f1c9 0e20 	rsb	lr, r9, #32
 80063ba:	468a      	mov	sl, r1
 80063bc:	2200      	movs	r2, #0
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	fa00 f009 	lsl.w	r0, r0, r9
 80063c4:	4302      	orrs	r2, r0
 80063c6:	f84a 2b04 	str.w	r2, [sl], #4
 80063ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ce:	459c      	cmp	ip, r3
 80063d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80063d4:	d8f3      	bhi.n	80063be <__lshift+0x6e>
 80063d6:	ebac 0304 	sub.w	r3, ip, r4
 80063da:	3b15      	subs	r3, #21
 80063dc:	f023 0303 	bic.w	r3, r3, #3
 80063e0:	3304      	adds	r3, #4
 80063e2:	f104 0015 	add.w	r0, r4, #21
 80063e6:	4584      	cmp	ip, r0
 80063e8:	bf38      	it	cc
 80063ea:	2304      	movcc	r3, #4
 80063ec:	50ca      	str	r2, [r1, r3]
 80063ee:	b10a      	cbz	r2, 80063f4 <__lshift+0xa4>
 80063f0:	f108 0602 	add.w	r6, r8, #2
 80063f4:	3e01      	subs	r6, #1
 80063f6:	4638      	mov	r0, r7
 80063f8:	612e      	str	r6, [r5, #16]
 80063fa:	4621      	mov	r1, r4
 80063fc:	f7ff fdd6 	bl	8005fac <_Bfree>
 8006400:	4628      	mov	r0, r5
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	f842 0f04 	str.w	r0, [r2, #4]!
 800640a:	3301      	adds	r3, #1
 800640c:	e7c5      	b.n	800639a <__lshift+0x4a>
 800640e:	3904      	subs	r1, #4
 8006410:	f853 2b04 	ldr.w	r2, [r3], #4
 8006414:	f841 2f04 	str.w	r2, [r1, #4]!
 8006418:	459c      	cmp	ip, r3
 800641a:	d8f9      	bhi.n	8006410 <__lshift+0xc0>
 800641c:	e7ea      	b.n	80063f4 <__lshift+0xa4>
 800641e:	bf00      	nop
 8006420:	08007fbb 	.word	0x08007fbb
 8006424:	08007fcc 	.word	0x08007fcc

08006428 <__mcmp>:
 8006428:	b530      	push	{r4, r5, lr}
 800642a:	6902      	ldr	r2, [r0, #16]
 800642c:	690c      	ldr	r4, [r1, #16]
 800642e:	1b12      	subs	r2, r2, r4
 8006430:	d10e      	bne.n	8006450 <__mcmp+0x28>
 8006432:	f100 0314 	add.w	r3, r0, #20
 8006436:	3114      	adds	r1, #20
 8006438:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800643c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006440:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006444:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006448:	42a5      	cmp	r5, r4
 800644a:	d003      	beq.n	8006454 <__mcmp+0x2c>
 800644c:	d305      	bcc.n	800645a <__mcmp+0x32>
 800644e:	2201      	movs	r2, #1
 8006450:	4610      	mov	r0, r2
 8006452:	bd30      	pop	{r4, r5, pc}
 8006454:	4283      	cmp	r3, r0
 8006456:	d3f3      	bcc.n	8006440 <__mcmp+0x18>
 8006458:	e7fa      	b.n	8006450 <__mcmp+0x28>
 800645a:	f04f 32ff 	mov.w	r2, #4294967295
 800645e:	e7f7      	b.n	8006450 <__mcmp+0x28>

08006460 <__mdiff>:
 8006460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	460c      	mov	r4, r1
 8006466:	4606      	mov	r6, r0
 8006468:	4611      	mov	r1, r2
 800646a:	4620      	mov	r0, r4
 800646c:	4617      	mov	r7, r2
 800646e:	f7ff ffdb 	bl	8006428 <__mcmp>
 8006472:	1e05      	subs	r5, r0, #0
 8006474:	d110      	bne.n	8006498 <__mdiff+0x38>
 8006476:	4629      	mov	r1, r5
 8006478:	4630      	mov	r0, r6
 800647a:	f7ff fd57 	bl	8005f2c <_Balloc>
 800647e:	b930      	cbnz	r0, 800648e <__mdiff+0x2e>
 8006480:	4b39      	ldr	r3, [pc, #228]	; (8006568 <__mdiff+0x108>)
 8006482:	4602      	mov	r2, r0
 8006484:	f240 2132 	movw	r1, #562	; 0x232
 8006488:	4838      	ldr	r0, [pc, #224]	; (800656c <__mdiff+0x10c>)
 800648a:	f000 faf3 	bl	8006a74 <__assert_func>
 800648e:	2301      	movs	r3, #1
 8006490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006498:	bfa4      	itt	ge
 800649a:	463b      	movge	r3, r7
 800649c:	4627      	movge	r7, r4
 800649e:	4630      	mov	r0, r6
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	bfa6      	itte	ge
 80064a4:	461c      	movge	r4, r3
 80064a6:	2500      	movge	r5, #0
 80064a8:	2501      	movlt	r5, #1
 80064aa:	f7ff fd3f 	bl	8005f2c <_Balloc>
 80064ae:	b920      	cbnz	r0, 80064ba <__mdiff+0x5a>
 80064b0:	4b2d      	ldr	r3, [pc, #180]	; (8006568 <__mdiff+0x108>)
 80064b2:	4602      	mov	r2, r0
 80064b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80064b8:	e7e6      	b.n	8006488 <__mdiff+0x28>
 80064ba:	693e      	ldr	r6, [r7, #16]
 80064bc:	60c5      	str	r5, [r0, #12]
 80064be:	6925      	ldr	r5, [r4, #16]
 80064c0:	f107 0114 	add.w	r1, r7, #20
 80064c4:	f104 0914 	add.w	r9, r4, #20
 80064c8:	f100 0e14 	add.w	lr, r0, #20
 80064cc:	f107 0210 	add.w	r2, r7, #16
 80064d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80064d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80064d8:	46f2      	mov	sl, lr
 80064da:	2700      	movs	r7, #0
 80064dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80064e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80064e4:	fa1f f883 	uxth.w	r8, r3
 80064e8:	fa17 f78b 	uxtah	r7, r7, fp
 80064ec:	0c1b      	lsrs	r3, r3, #16
 80064ee:	eba7 0808 	sub.w	r8, r7, r8
 80064f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80064fa:	fa1f f888 	uxth.w	r8, r8
 80064fe:	141f      	asrs	r7, r3, #16
 8006500:	454d      	cmp	r5, r9
 8006502:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006506:	f84a 3b04 	str.w	r3, [sl], #4
 800650a:	d8e7      	bhi.n	80064dc <__mdiff+0x7c>
 800650c:	1b2b      	subs	r3, r5, r4
 800650e:	3b15      	subs	r3, #21
 8006510:	f023 0303 	bic.w	r3, r3, #3
 8006514:	3304      	adds	r3, #4
 8006516:	3415      	adds	r4, #21
 8006518:	42a5      	cmp	r5, r4
 800651a:	bf38      	it	cc
 800651c:	2304      	movcc	r3, #4
 800651e:	4419      	add	r1, r3
 8006520:	4473      	add	r3, lr
 8006522:	469e      	mov	lr, r3
 8006524:	460d      	mov	r5, r1
 8006526:	4565      	cmp	r5, ip
 8006528:	d30e      	bcc.n	8006548 <__mdiff+0xe8>
 800652a:	f10c 0203 	add.w	r2, ip, #3
 800652e:	1a52      	subs	r2, r2, r1
 8006530:	f022 0203 	bic.w	r2, r2, #3
 8006534:	3903      	subs	r1, #3
 8006536:	458c      	cmp	ip, r1
 8006538:	bf38      	it	cc
 800653a:	2200      	movcc	r2, #0
 800653c:	441a      	add	r2, r3
 800653e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006542:	b17b      	cbz	r3, 8006564 <__mdiff+0x104>
 8006544:	6106      	str	r6, [r0, #16]
 8006546:	e7a5      	b.n	8006494 <__mdiff+0x34>
 8006548:	f855 8b04 	ldr.w	r8, [r5], #4
 800654c:	fa17 f488 	uxtah	r4, r7, r8
 8006550:	1422      	asrs	r2, r4, #16
 8006552:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006556:	b2a4      	uxth	r4, r4
 8006558:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800655c:	f84e 4b04 	str.w	r4, [lr], #4
 8006560:	1417      	asrs	r7, r2, #16
 8006562:	e7e0      	b.n	8006526 <__mdiff+0xc6>
 8006564:	3e01      	subs	r6, #1
 8006566:	e7ea      	b.n	800653e <__mdiff+0xde>
 8006568:	08007fbb 	.word	0x08007fbb
 800656c:	08007fcc 	.word	0x08007fcc

08006570 <__d2b>:
 8006570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006574:	4689      	mov	r9, r1
 8006576:	2101      	movs	r1, #1
 8006578:	ec57 6b10 	vmov	r6, r7, d0
 800657c:	4690      	mov	r8, r2
 800657e:	f7ff fcd5 	bl	8005f2c <_Balloc>
 8006582:	4604      	mov	r4, r0
 8006584:	b930      	cbnz	r0, 8006594 <__d2b+0x24>
 8006586:	4602      	mov	r2, r0
 8006588:	4b25      	ldr	r3, [pc, #148]	; (8006620 <__d2b+0xb0>)
 800658a:	4826      	ldr	r0, [pc, #152]	; (8006624 <__d2b+0xb4>)
 800658c:	f240 310a 	movw	r1, #778	; 0x30a
 8006590:	f000 fa70 	bl	8006a74 <__assert_func>
 8006594:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800659c:	bb35      	cbnz	r5, 80065ec <__d2b+0x7c>
 800659e:	2e00      	cmp	r6, #0
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	d028      	beq.n	80065f6 <__d2b+0x86>
 80065a4:	4668      	mov	r0, sp
 80065a6:	9600      	str	r6, [sp, #0]
 80065a8:	f7ff fd8c 	bl	80060c4 <__lo0bits>
 80065ac:	9900      	ldr	r1, [sp, #0]
 80065ae:	b300      	cbz	r0, 80065f2 <__d2b+0x82>
 80065b0:	9a01      	ldr	r2, [sp, #4]
 80065b2:	f1c0 0320 	rsb	r3, r0, #32
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	430b      	orrs	r3, r1
 80065bc:	40c2      	lsrs	r2, r0
 80065be:	6163      	str	r3, [r4, #20]
 80065c0:	9201      	str	r2, [sp, #4]
 80065c2:	9b01      	ldr	r3, [sp, #4]
 80065c4:	61a3      	str	r3, [r4, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bf14      	ite	ne
 80065ca:	2202      	movne	r2, #2
 80065cc:	2201      	moveq	r2, #1
 80065ce:	6122      	str	r2, [r4, #16]
 80065d0:	b1d5      	cbz	r5, 8006608 <__d2b+0x98>
 80065d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80065d6:	4405      	add	r5, r0
 80065d8:	f8c9 5000 	str.w	r5, [r9]
 80065dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065e0:	f8c8 0000 	str.w	r0, [r8]
 80065e4:	4620      	mov	r0, r4
 80065e6:	b003      	add	sp, #12
 80065e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f0:	e7d5      	b.n	800659e <__d2b+0x2e>
 80065f2:	6161      	str	r1, [r4, #20]
 80065f4:	e7e5      	b.n	80065c2 <__d2b+0x52>
 80065f6:	a801      	add	r0, sp, #4
 80065f8:	f7ff fd64 	bl	80060c4 <__lo0bits>
 80065fc:	9b01      	ldr	r3, [sp, #4]
 80065fe:	6163      	str	r3, [r4, #20]
 8006600:	2201      	movs	r2, #1
 8006602:	6122      	str	r2, [r4, #16]
 8006604:	3020      	adds	r0, #32
 8006606:	e7e3      	b.n	80065d0 <__d2b+0x60>
 8006608:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800660c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006610:	f8c9 0000 	str.w	r0, [r9]
 8006614:	6918      	ldr	r0, [r3, #16]
 8006616:	f7ff fd35 	bl	8006084 <__hi0bits>
 800661a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800661e:	e7df      	b.n	80065e0 <__d2b+0x70>
 8006620:	08007fbb 	.word	0x08007fbb
 8006624:	08007fcc 	.word	0x08007fcc

08006628 <_calloc_r>:
 8006628:	b513      	push	{r0, r1, r4, lr}
 800662a:	434a      	muls	r2, r1
 800662c:	4611      	mov	r1, r2
 800662e:	9201      	str	r2, [sp, #4]
 8006630:	f000 f85a 	bl	80066e8 <_malloc_r>
 8006634:	4604      	mov	r4, r0
 8006636:	b118      	cbz	r0, 8006640 <_calloc_r+0x18>
 8006638:	9a01      	ldr	r2, [sp, #4]
 800663a:	2100      	movs	r1, #0
 800663c:	f7fe f944 	bl	80048c8 <memset>
 8006640:	4620      	mov	r0, r4
 8006642:	b002      	add	sp, #8
 8006644:	bd10      	pop	{r4, pc}
	...

08006648 <_free_r>:
 8006648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800664a:	2900      	cmp	r1, #0
 800664c:	d048      	beq.n	80066e0 <_free_r+0x98>
 800664e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006652:	9001      	str	r0, [sp, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f1a1 0404 	sub.w	r4, r1, #4
 800665a:	bfb8      	it	lt
 800665c:	18e4      	addlt	r4, r4, r3
 800665e:	f000 fa65 	bl	8006b2c <__malloc_lock>
 8006662:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <_free_r+0x9c>)
 8006664:	9801      	ldr	r0, [sp, #4]
 8006666:	6813      	ldr	r3, [r2, #0]
 8006668:	4615      	mov	r5, r2
 800666a:	b933      	cbnz	r3, 800667a <_free_r+0x32>
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	6014      	str	r4, [r2, #0]
 8006670:	b003      	add	sp, #12
 8006672:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006676:	f000 ba5f 	b.w	8006b38 <__malloc_unlock>
 800667a:	42a3      	cmp	r3, r4
 800667c:	d90b      	bls.n	8006696 <_free_r+0x4e>
 800667e:	6821      	ldr	r1, [r4, #0]
 8006680:	1862      	adds	r2, r4, r1
 8006682:	4293      	cmp	r3, r2
 8006684:	bf04      	itt	eq
 8006686:	681a      	ldreq	r2, [r3, #0]
 8006688:	685b      	ldreq	r3, [r3, #4]
 800668a:	6063      	str	r3, [r4, #4]
 800668c:	bf04      	itt	eq
 800668e:	1852      	addeq	r2, r2, r1
 8006690:	6022      	streq	r2, [r4, #0]
 8006692:	602c      	str	r4, [r5, #0]
 8006694:	e7ec      	b.n	8006670 <_free_r+0x28>
 8006696:	461a      	mov	r2, r3
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b10b      	cbz	r3, 80066a0 <_free_r+0x58>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d9fa      	bls.n	8006696 <_free_r+0x4e>
 80066a0:	6811      	ldr	r1, [r2, #0]
 80066a2:	1855      	adds	r5, r2, r1
 80066a4:	42a5      	cmp	r5, r4
 80066a6:	d10b      	bne.n	80066c0 <_free_r+0x78>
 80066a8:	6824      	ldr	r4, [r4, #0]
 80066aa:	4421      	add	r1, r4
 80066ac:	1854      	adds	r4, r2, r1
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	d1dd      	bne.n	8006670 <_free_r+0x28>
 80066b4:	681c      	ldr	r4, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	6053      	str	r3, [r2, #4]
 80066ba:	4421      	add	r1, r4
 80066bc:	6011      	str	r1, [r2, #0]
 80066be:	e7d7      	b.n	8006670 <_free_r+0x28>
 80066c0:	d902      	bls.n	80066c8 <_free_r+0x80>
 80066c2:	230c      	movs	r3, #12
 80066c4:	6003      	str	r3, [r0, #0]
 80066c6:	e7d3      	b.n	8006670 <_free_r+0x28>
 80066c8:	6825      	ldr	r5, [r4, #0]
 80066ca:	1961      	adds	r1, r4, r5
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf04      	itt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	6063      	str	r3, [r4, #4]
 80066d6:	bf04      	itt	eq
 80066d8:	1949      	addeq	r1, r1, r5
 80066da:	6021      	streq	r1, [r4, #0]
 80066dc:	6054      	str	r4, [r2, #4]
 80066de:	e7c7      	b.n	8006670 <_free_r+0x28>
 80066e0:	b003      	add	sp, #12
 80066e2:	bd30      	pop	{r4, r5, pc}
 80066e4:	20000238 	.word	0x20000238

080066e8 <_malloc_r>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	1ccd      	adds	r5, r1, #3
 80066ec:	f025 0503 	bic.w	r5, r5, #3
 80066f0:	3508      	adds	r5, #8
 80066f2:	2d0c      	cmp	r5, #12
 80066f4:	bf38      	it	cc
 80066f6:	250c      	movcc	r5, #12
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	4606      	mov	r6, r0
 80066fc:	db01      	blt.n	8006702 <_malloc_r+0x1a>
 80066fe:	42a9      	cmp	r1, r5
 8006700:	d903      	bls.n	800670a <_malloc_r+0x22>
 8006702:	230c      	movs	r3, #12
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	2000      	movs	r0, #0
 8006708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670a:	f000 fa0f 	bl	8006b2c <__malloc_lock>
 800670e:	4921      	ldr	r1, [pc, #132]	; (8006794 <_malloc_r+0xac>)
 8006710:	680a      	ldr	r2, [r1, #0]
 8006712:	4614      	mov	r4, r2
 8006714:	b99c      	cbnz	r4, 800673e <_malloc_r+0x56>
 8006716:	4f20      	ldr	r7, [pc, #128]	; (8006798 <_malloc_r+0xb0>)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	b923      	cbnz	r3, 8006726 <_malloc_r+0x3e>
 800671c:	4621      	mov	r1, r4
 800671e:	4630      	mov	r0, r6
 8006720:	f000 f998 	bl	8006a54 <_sbrk_r>
 8006724:	6038      	str	r0, [r7, #0]
 8006726:	4629      	mov	r1, r5
 8006728:	4630      	mov	r0, r6
 800672a:	f000 f993 	bl	8006a54 <_sbrk_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d123      	bne.n	800677a <_malloc_r+0x92>
 8006732:	230c      	movs	r3, #12
 8006734:	6033      	str	r3, [r6, #0]
 8006736:	4630      	mov	r0, r6
 8006738:	f000 f9fe 	bl	8006b38 <__malloc_unlock>
 800673c:	e7e3      	b.n	8006706 <_malloc_r+0x1e>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	1b5b      	subs	r3, r3, r5
 8006742:	d417      	bmi.n	8006774 <_malloc_r+0x8c>
 8006744:	2b0b      	cmp	r3, #11
 8006746:	d903      	bls.n	8006750 <_malloc_r+0x68>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	441c      	add	r4, r3
 800674c:	6025      	str	r5, [r4, #0]
 800674e:	e004      	b.n	800675a <_malloc_r+0x72>
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	42a2      	cmp	r2, r4
 8006754:	bf0c      	ite	eq
 8006756:	600b      	streq	r3, [r1, #0]
 8006758:	6053      	strne	r3, [r2, #4]
 800675a:	4630      	mov	r0, r6
 800675c:	f000 f9ec 	bl	8006b38 <__malloc_unlock>
 8006760:	f104 000b 	add.w	r0, r4, #11
 8006764:	1d23      	adds	r3, r4, #4
 8006766:	f020 0007 	bic.w	r0, r0, #7
 800676a:	1ac2      	subs	r2, r0, r3
 800676c:	d0cc      	beq.n	8006708 <_malloc_r+0x20>
 800676e:	1a1b      	subs	r3, r3, r0
 8006770:	50a3      	str	r3, [r4, r2]
 8006772:	e7c9      	b.n	8006708 <_malloc_r+0x20>
 8006774:	4622      	mov	r2, r4
 8006776:	6864      	ldr	r4, [r4, #4]
 8006778:	e7cc      	b.n	8006714 <_malloc_r+0x2c>
 800677a:	1cc4      	adds	r4, r0, #3
 800677c:	f024 0403 	bic.w	r4, r4, #3
 8006780:	42a0      	cmp	r0, r4
 8006782:	d0e3      	beq.n	800674c <_malloc_r+0x64>
 8006784:	1a21      	subs	r1, r4, r0
 8006786:	4630      	mov	r0, r6
 8006788:	f000 f964 	bl	8006a54 <_sbrk_r>
 800678c:	3001      	adds	r0, #1
 800678e:	d1dd      	bne.n	800674c <_malloc_r+0x64>
 8006790:	e7cf      	b.n	8006732 <_malloc_r+0x4a>
 8006792:	bf00      	nop
 8006794:	20000238 	.word	0x20000238
 8006798:	2000023c 	.word	0x2000023c

0800679c <__ssputs_r>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	688e      	ldr	r6, [r1, #8]
 80067a2:	429e      	cmp	r6, r3
 80067a4:	4682      	mov	sl, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	4690      	mov	r8, r2
 80067aa:	461f      	mov	r7, r3
 80067ac:	d838      	bhi.n	8006820 <__ssputs_r+0x84>
 80067ae:	898a      	ldrh	r2, [r1, #12]
 80067b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b4:	d032      	beq.n	800681c <__ssputs_r+0x80>
 80067b6:	6825      	ldr	r5, [r4, #0]
 80067b8:	6909      	ldr	r1, [r1, #16]
 80067ba:	eba5 0901 	sub.w	r9, r5, r1
 80067be:	6965      	ldr	r5, [r4, #20]
 80067c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067c8:	3301      	adds	r3, #1
 80067ca:	444b      	add	r3, r9
 80067cc:	106d      	asrs	r5, r5, #1
 80067ce:	429d      	cmp	r5, r3
 80067d0:	bf38      	it	cc
 80067d2:	461d      	movcc	r5, r3
 80067d4:	0553      	lsls	r3, r2, #21
 80067d6:	d531      	bpl.n	800683c <__ssputs_r+0xa0>
 80067d8:	4629      	mov	r1, r5
 80067da:	f7ff ff85 	bl	80066e8 <_malloc_r>
 80067de:	4606      	mov	r6, r0
 80067e0:	b950      	cbnz	r0, 80067f8 <__ssputs_r+0x5c>
 80067e2:	230c      	movs	r3, #12
 80067e4:	f8ca 3000 	str.w	r3, [sl]
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	6921      	ldr	r1, [r4, #16]
 80067fa:	464a      	mov	r2, r9
 80067fc:	f7ff fb88 	bl	8005f10 <memcpy>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	6126      	str	r6, [r4, #16]
 800680e:	6165      	str	r5, [r4, #20]
 8006810:	444e      	add	r6, r9
 8006812:	eba5 0509 	sub.w	r5, r5, r9
 8006816:	6026      	str	r6, [r4, #0]
 8006818:	60a5      	str	r5, [r4, #8]
 800681a:	463e      	mov	r6, r7
 800681c:	42be      	cmp	r6, r7
 800681e:	d900      	bls.n	8006822 <__ssputs_r+0x86>
 8006820:	463e      	mov	r6, r7
 8006822:	4632      	mov	r2, r6
 8006824:	6820      	ldr	r0, [r4, #0]
 8006826:	4641      	mov	r1, r8
 8006828:	f000 f966 	bl	8006af8 <memmove>
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	1b9b      	subs	r3, r3, r6
 8006832:	4432      	add	r2, r6
 8006834:	60a3      	str	r3, [r4, #8]
 8006836:	6022      	str	r2, [r4, #0]
 8006838:	2000      	movs	r0, #0
 800683a:	e7db      	b.n	80067f4 <__ssputs_r+0x58>
 800683c:	462a      	mov	r2, r5
 800683e:	f000 f981 	bl	8006b44 <_realloc_r>
 8006842:	4606      	mov	r6, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	d1e1      	bne.n	800680c <__ssputs_r+0x70>
 8006848:	6921      	ldr	r1, [r4, #16]
 800684a:	4650      	mov	r0, sl
 800684c:	f7ff fefc 	bl	8006648 <_free_r>
 8006850:	e7c7      	b.n	80067e2 <__ssputs_r+0x46>
	...

08006854 <_svfiprintf_r>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4698      	mov	r8, r3
 800685a:	898b      	ldrh	r3, [r1, #12]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	b09d      	sub	sp, #116	; 0x74
 8006860:	4607      	mov	r7, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4614      	mov	r4, r2
 8006866:	d50e      	bpl.n	8006886 <_svfiprintf_r+0x32>
 8006868:	690b      	ldr	r3, [r1, #16]
 800686a:	b963      	cbnz	r3, 8006886 <_svfiprintf_r+0x32>
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	f7ff ff3b 	bl	80066e8 <_malloc_r>
 8006872:	6028      	str	r0, [r5, #0]
 8006874:	6128      	str	r0, [r5, #16]
 8006876:	b920      	cbnz	r0, 8006882 <_svfiprintf_r+0x2e>
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e0d1      	b.n	8006a26 <_svfiprintf_r+0x1d2>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	616b      	str	r3, [r5, #20]
 8006886:	2300      	movs	r3, #0
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	2320      	movs	r3, #32
 800688c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006890:	f8cd 800c 	str.w	r8, [sp, #12]
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a40 <_svfiprintf_r+0x1ec>
 800689a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800689e:	f04f 0901 	mov.w	r9, #1
 80068a2:	4623      	mov	r3, r4
 80068a4:	469a      	mov	sl, r3
 80068a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068aa:	b10a      	cbz	r2, 80068b0 <_svfiprintf_r+0x5c>
 80068ac:	2a25      	cmp	r2, #37	; 0x25
 80068ae:	d1f9      	bne.n	80068a4 <_svfiprintf_r+0x50>
 80068b0:	ebba 0b04 	subs.w	fp, sl, r4
 80068b4:	d00b      	beq.n	80068ce <_svfiprintf_r+0x7a>
 80068b6:	465b      	mov	r3, fp
 80068b8:	4622      	mov	r2, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff ff6d 	bl	800679c <__ssputs_r>
 80068c2:	3001      	adds	r0, #1
 80068c4:	f000 80aa 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ca:	445a      	add	r2, fp
 80068cc:	9209      	str	r2, [sp, #36]	; 0x24
 80068ce:	f89a 3000 	ldrb.w	r3, [sl]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a2 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068d8:	2300      	movs	r3, #0
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e2:	f10a 0a01 	add.w	sl, sl, #1
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	9307      	str	r3, [sp, #28]
 80068ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ee:	931a      	str	r3, [sp, #104]	; 0x68
 80068f0:	4654      	mov	r4, sl
 80068f2:	2205      	movs	r2, #5
 80068f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f8:	4851      	ldr	r0, [pc, #324]	; (8006a40 <_svfiprintf_r+0x1ec>)
 80068fa:	f7f9 fc71 	bl	80001e0 <memchr>
 80068fe:	9a04      	ldr	r2, [sp, #16]
 8006900:	b9d8      	cbnz	r0, 800693a <_svfiprintf_r+0xe6>
 8006902:	06d0      	lsls	r0, r2, #27
 8006904:	bf44      	itt	mi
 8006906:	2320      	movmi	r3, #32
 8006908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690c:	0711      	lsls	r1, r2, #28
 800690e:	bf44      	itt	mi
 8006910:	232b      	movmi	r3, #43	; 0x2b
 8006912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006916:	f89a 3000 	ldrb.w	r3, [sl]
 800691a:	2b2a      	cmp	r3, #42	; 0x2a
 800691c:	d015      	beq.n	800694a <_svfiprintf_r+0xf6>
 800691e:	9a07      	ldr	r2, [sp, #28]
 8006920:	4654      	mov	r4, sl
 8006922:	2000      	movs	r0, #0
 8006924:	f04f 0c0a 	mov.w	ip, #10
 8006928:	4621      	mov	r1, r4
 800692a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692e:	3b30      	subs	r3, #48	; 0x30
 8006930:	2b09      	cmp	r3, #9
 8006932:	d94e      	bls.n	80069d2 <_svfiprintf_r+0x17e>
 8006934:	b1b0      	cbz	r0, 8006964 <_svfiprintf_r+0x110>
 8006936:	9207      	str	r2, [sp, #28]
 8006938:	e014      	b.n	8006964 <_svfiprintf_r+0x110>
 800693a:	eba0 0308 	sub.w	r3, r0, r8
 800693e:	fa09 f303 	lsl.w	r3, r9, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	9304      	str	r3, [sp, #16]
 8006946:	46a2      	mov	sl, r4
 8006948:	e7d2      	b.n	80068f0 <_svfiprintf_r+0x9c>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfbb      	ittet	lt
 8006956:	425b      	neglt	r3, r3
 8006958:	f042 0202 	orrlt.w	r2, r2, #2
 800695c:	9307      	strge	r3, [sp, #28]
 800695e:	9307      	strlt	r3, [sp, #28]
 8006960:	bfb8      	it	lt
 8006962:	9204      	strlt	r2, [sp, #16]
 8006964:	7823      	ldrb	r3, [r4, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d10c      	bne.n	8006984 <_svfiprintf_r+0x130>
 800696a:	7863      	ldrb	r3, [r4, #1]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d135      	bne.n	80069dc <_svfiprintf_r+0x188>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	1d1a      	adds	r2, r3, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	9203      	str	r2, [sp, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfb8      	it	lt
 800697c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006980:	3402      	adds	r4, #2
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a50 <_svfiprintf_r+0x1fc>
 8006988:	7821      	ldrb	r1, [r4, #0]
 800698a:	2203      	movs	r2, #3
 800698c:	4650      	mov	r0, sl
 800698e:	f7f9 fc27 	bl	80001e0 <memchr>
 8006992:	b140      	cbz	r0, 80069a6 <_svfiprintf_r+0x152>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	eba0 000a 	sub.w	r0, r0, sl
 800699a:	fa03 f000 	lsl.w	r0, r3, r0
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	4303      	orrs	r3, r0
 80069a2:	3401      	adds	r4, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069aa:	4826      	ldr	r0, [pc, #152]	; (8006a44 <_svfiprintf_r+0x1f0>)
 80069ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b0:	2206      	movs	r2, #6
 80069b2:	f7f9 fc15 	bl	80001e0 <memchr>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d038      	beq.n	8006a2c <_svfiprintf_r+0x1d8>
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <_svfiprintf_r+0x1f4>)
 80069bc:	bb1b      	cbnz	r3, 8006a06 <_svfiprintf_r+0x1b2>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	3308      	adds	r3, #8
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	4433      	add	r3, r6
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	e767      	b.n	80068a2 <_svfiprintf_r+0x4e>
 80069d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069d6:	460c      	mov	r4, r1
 80069d8:	2001      	movs	r0, #1
 80069da:	e7a5      	b.n	8006928 <_svfiprintf_r+0xd4>
 80069dc:	2300      	movs	r3, #0
 80069de:	3401      	adds	r4, #1
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	4619      	mov	r1, r3
 80069e4:	f04f 0c0a 	mov.w	ip, #10
 80069e8:	4620      	mov	r0, r4
 80069ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ee:	3a30      	subs	r2, #48	; 0x30
 80069f0:	2a09      	cmp	r2, #9
 80069f2:	d903      	bls.n	80069fc <_svfiprintf_r+0x1a8>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c5      	beq.n	8006984 <_svfiprintf_r+0x130>
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	e7c3      	b.n	8006984 <_svfiprintf_r+0x130>
 80069fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a00:	4604      	mov	r4, r0
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7f0      	b.n	80069e8 <_svfiprintf_r+0x194>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a0e:	a904      	add	r1, sp, #16
 8006a10:	4638      	mov	r0, r7
 8006a12:	f7fe f801 	bl	8004a18 <_printf_float>
 8006a16:	1c42      	adds	r2, r0, #1
 8006a18:	4606      	mov	r6, r0
 8006a1a:	d1d6      	bne.n	80069ca <_svfiprintf_r+0x176>
 8006a1c:	89ab      	ldrh	r3, [r5, #12]
 8006a1e:	065b      	lsls	r3, r3, #25
 8006a20:	f53f af2c 	bmi.w	800687c <_svfiprintf_r+0x28>
 8006a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a26:	b01d      	add	sp, #116	; 0x74
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	ab03      	add	r3, sp, #12
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462a      	mov	r2, r5
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a34:	a904      	add	r1, sp, #16
 8006a36:	4638      	mov	r0, r7
 8006a38:	f7fe fa92 	bl	8004f60 <_printf_i>
 8006a3c:	e7eb      	b.n	8006a16 <_svfiprintf_r+0x1c2>
 8006a3e:	bf00      	nop
 8006a40:	0800812c 	.word	0x0800812c
 8006a44:	08008136 	.word	0x08008136
 8006a48:	08004a19 	.word	0x08004a19
 8006a4c:	0800679d 	.word	0x0800679d
 8006a50:	08008132 	.word	0x08008132

08006a54 <_sbrk_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d06      	ldr	r5, [pc, #24]	; (8006a70 <_sbrk_r+0x1c>)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	f7fd fac8 	bl	8003ff4 <_sbrk>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_sbrk_r+0x1a>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_sbrk_r+0x1a>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	2000027c 	.word	0x2000027c

08006a74 <__assert_func>:
 8006a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a76:	4614      	mov	r4, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <__assert_func+0x2c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4605      	mov	r5, r0
 8006a80:	68d8      	ldr	r0, [r3, #12]
 8006a82:	b14c      	cbz	r4, 8006a98 <__assert_func+0x24>
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <__assert_func+0x30>)
 8006a86:	9100      	str	r1, [sp, #0]
 8006a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a8c:	4906      	ldr	r1, [pc, #24]	; (8006aa8 <__assert_func+0x34>)
 8006a8e:	462b      	mov	r3, r5
 8006a90:	f000 f80e 	bl	8006ab0 <fiprintf>
 8006a94:	f000 faa4 	bl	8006fe0 <abort>
 8006a98:	4b04      	ldr	r3, [pc, #16]	; (8006aac <__assert_func+0x38>)
 8006a9a:	461c      	mov	r4, r3
 8006a9c:	e7f3      	b.n	8006a86 <__assert_func+0x12>
 8006a9e:	bf00      	nop
 8006aa0:	20000018 	.word	0x20000018
 8006aa4:	0800813d 	.word	0x0800813d
 8006aa8:	0800814a 	.word	0x0800814a
 8006aac:	08008178 	.word	0x08008178

08006ab0 <fiprintf>:
 8006ab0:	b40e      	push	{r1, r2, r3}
 8006ab2:	b503      	push	{r0, r1, lr}
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	ab03      	add	r3, sp, #12
 8006ab8:	4805      	ldr	r0, [pc, #20]	; (8006ad0 <fiprintf+0x20>)
 8006aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abe:	6800      	ldr	r0, [r0, #0]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	f000 f88f 	bl	8006be4 <_vfiprintf_r>
 8006ac6:	b002      	add	sp, #8
 8006ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006acc:	b003      	add	sp, #12
 8006ace:	4770      	bx	lr
 8006ad0:	20000018 	.word	0x20000018

08006ad4 <__ascii_mbtowc>:
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	b901      	cbnz	r1, 8006ada <__ascii_mbtowc+0x6>
 8006ad8:	a901      	add	r1, sp, #4
 8006ada:	b142      	cbz	r2, 8006aee <__ascii_mbtowc+0x1a>
 8006adc:	b14b      	cbz	r3, 8006af2 <__ascii_mbtowc+0x1e>
 8006ade:	7813      	ldrb	r3, [r2, #0]
 8006ae0:	600b      	str	r3, [r1, #0]
 8006ae2:	7812      	ldrb	r2, [r2, #0]
 8006ae4:	1e10      	subs	r0, r2, #0
 8006ae6:	bf18      	it	ne
 8006ae8:	2001      	movne	r0, #1
 8006aea:	b002      	add	sp, #8
 8006aec:	4770      	bx	lr
 8006aee:	4610      	mov	r0, r2
 8006af0:	e7fb      	b.n	8006aea <__ascii_mbtowc+0x16>
 8006af2:	f06f 0001 	mvn.w	r0, #1
 8006af6:	e7f8      	b.n	8006aea <__ascii_mbtowc+0x16>

08006af8 <memmove>:
 8006af8:	4288      	cmp	r0, r1
 8006afa:	b510      	push	{r4, lr}
 8006afc:	eb01 0402 	add.w	r4, r1, r2
 8006b00:	d902      	bls.n	8006b08 <memmove+0x10>
 8006b02:	4284      	cmp	r4, r0
 8006b04:	4623      	mov	r3, r4
 8006b06:	d807      	bhi.n	8006b18 <memmove+0x20>
 8006b08:	1e43      	subs	r3, r0, #1
 8006b0a:	42a1      	cmp	r1, r4
 8006b0c:	d008      	beq.n	8006b20 <memmove+0x28>
 8006b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b16:	e7f8      	b.n	8006b0a <memmove+0x12>
 8006b18:	4402      	add	r2, r0
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	428a      	cmp	r2, r1
 8006b1e:	d100      	bne.n	8006b22 <memmove+0x2a>
 8006b20:	bd10      	pop	{r4, pc}
 8006b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b2a:	e7f7      	b.n	8006b1c <memmove+0x24>

08006b2c <__malloc_lock>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__malloc_lock+0x8>)
 8006b2e:	f000 bc17 	b.w	8007360 <__retarget_lock_acquire_recursive>
 8006b32:	bf00      	nop
 8006b34:	20000284 	.word	0x20000284

08006b38 <__malloc_unlock>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__malloc_unlock+0x8>)
 8006b3a:	f000 bc12 	b.w	8007362 <__retarget_lock_release_recursive>
 8006b3e:	bf00      	nop
 8006b40:	20000284 	.word	0x20000284

08006b44 <_realloc_r>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	4607      	mov	r7, r0
 8006b48:	4614      	mov	r4, r2
 8006b4a:	460e      	mov	r6, r1
 8006b4c:	b921      	cbnz	r1, 8006b58 <_realloc_r+0x14>
 8006b4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b52:	4611      	mov	r1, r2
 8006b54:	f7ff bdc8 	b.w	80066e8 <_malloc_r>
 8006b58:	b922      	cbnz	r2, 8006b64 <_realloc_r+0x20>
 8006b5a:	f7ff fd75 	bl	8006648 <_free_r>
 8006b5e:	4625      	mov	r5, r4
 8006b60:	4628      	mov	r0, r5
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b64:	f000 fc62 	bl	800742c <_malloc_usable_size_r>
 8006b68:	42a0      	cmp	r0, r4
 8006b6a:	d20f      	bcs.n	8006b8c <_realloc_r+0x48>
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f7ff fdba 	bl	80066e8 <_malloc_r>
 8006b74:	4605      	mov	r5, r0
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d0f2      	beq.n	8006b60 <_realloc_r+0x1c>
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	f7ff f9c7 	bl	8005f10 <memcpy>
 8006b82:	4631      	mov	r1, r6
 8006b84:	4638      	mov	r0, r7
 8006b86:	f7ff fd5f 	bl	8006648 <_free_r>
 8006b8a:	e7e9      	b.n	8006b60 <_realloc_r+0x1c>
 8006b8c:	4635      	mov	r5, r6
 8006b8e:	e7e7      	b.n	8006b60 <_realloc_r+0x1c>

08006b90 <__sfputc_r>:
 8006b90:	6893      	ldr	r3, [r2, #8]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	b410      	push	{r4}
 8006b98:	6093      	str	r3, [r2, #8]
 8006b9a:	da08      	bge.n	8006bae <__sfputc_r+0x1e>
 8006b9c:	6994      	ldr	r4, [r2, #24]
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	db01      	blt.n	8006ba6 <__sfputc_r+0x16>
 8006ba2:	290a      	cmp	r1, #10
 8006ba4:	d103      	bne.n	8006bae <__sfputc_r+0x1e>
 8006ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006baa:	f000 b94b 	b.w	8006e44 <__swbuf_r>
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	1c58      	adds	r0, r3, #1
 8006bb2:	6010      	str	r0, [r2, #0]
 8006bb4:	7019      	strb	r1, [r3, #0]
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <__sfputs_r>:
 8006bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	18d5      	adds	r5, r2, r3
 8006bc8:	42ac      	cmp	r4, r5
 8006bca:	d101      	bne.n	8006bd0 <__sfputs_r+0x12>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e007      	b.n	8006be0 <__sfputs_r+0x22>
 8006bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd4:	463a      	mov	r2, r7
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f7ff ffda 	bl	8006b90 <__sfputc_r>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d1f3      	bne.n	8006bc8 <__sfputs_r+0xa>
 8006be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006be4 <_vfiprintf_r>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	460d      	mov	r5, r1
 8006bea:	b09d      	sub	sp, #116	; 0x74
 8006bec:	4614      	mov	r4, r2
 8006bee:	4698      	mov	r8, r3
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	b118      	cbz	r0, 8006bfc <_vfiprintf_r+0x18>
 8006bf4:	6983      	ldr	r3, [r0, #24]
 8006bf6:	b90b      	cbnz	r3, 8006bfc <_vfiprintf_r+0x18>
 8006bf8:	f000 fb14 	bl	8007224 <__sinit>
 8006bfc:	4b89      	ldr	r3, [pc, #548]	; (8006e24 <_vfiprintf_r+0x240>)
 8006bfe:	429d      	cmp	r5, r3
 8006c00:	d11b      	bne.n	8006c3a <_vfiprintf_r+0x56>
 8006c02:	6875      	ldr	r5, [r6, #4]
 8006c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c06:	07d9      	lsls	r1, r3, #31
 8006c08:	d405      	bmi.n	8006c16 <_vfiprintf_r+0x32>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	059a      	lsls	r2, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_vfiprintf_r+0x32>
 8006c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c12:	f000 fba5 	bl	8007360 <__retarget_lock_acquire_recursive>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	071b      	lsls	r3, r3, #28
 8006c1a:	d501      	bpl.n	8006c20 <_vfiprintf_r+0x3c>
 8006c1c:	692b      	ldr	r3, [r5, #16]
 8006c1e:	b9eb      	cbnz	r3, 8006c5c <_vfiprintf_r+0x78>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f96e 	bl	8006f04 <__swsetup_r>
 8006c28:	b1c0      	cbz	r0, 8006c5c <_vfiprintf_r+0x78>
 8006c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c2c:	07dc      	lsls	r4, r3, #31
 8006c2e:	d50e      	bpl.n	8006c4e <_vfiprintf_r+0x6a>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	b01d      	add	sp, #116	; 0x74
 8006c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3a:	4b7b      	ldr	r3, [pc, #492]	; (8006e28 <_vfiprintf_r+0x244>)
 8006c3c:	429d      	cmp	r5, r3
 8006c3e:	d101      	bne.n	8006c44 <_vfiprintf_r+0x60>
 8006c40:	68b5      	ldr	r5, [r6, #8]
 8006c42:	e7df      	b.n	8006c04 <_vfiprintf_r+0x20>
 8006c44:	4b79      	ldr	r3, [pc, #484]	; (8006e2c <_vfiprintf_r+0x248>)
 8006c46:	429d      	cmp	r5, r3
 8006c48:	bf08      	it	eq
 8006c4a:	68f5      	ldreq	r5, [r6, #12]
 8006c4c:	e7da      	b.n	8006c04 <_vfiprintf_r+0x20>
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	0598      	lsls	r0, r3, #22
 8006c52:	d4ed      	bmi.n	8006c30 <_vfiprintf_r+0x4c>
 8006c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c56:	f000 fb84 	bl	8007362 <__retarget_lock_release_recursive>
 8006c5a:	e7e9      	b.n	8006c30 <_vfiprintf_r+0x4c>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c60:	2320      	movs	r3, #32
 8006c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c6a:	2330      	movs	r3, #48	; 0x30
 8006c6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e30 <_vfiprintf_r+0x24c>
 8006c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c74:	f04f 0901 	mov.w	r9, #1
 8006c78:	4623      	mov	r3, r4
 8006c7a:	469a      	mov	sl, r3
 8006c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c80:	b10a      	cbz	r2, 8006c86 <_vfiprintf_r+0xa2>
 8006c82:	2a25      	cmp	r2, #37	; 0x25
 8006c84:	d1f9      	bne.n	8006c7a <_vfiprintf_r+0x96>
 8006c86:	ebba 0b04 	subs.w	fp, sl, r4
 8006c8a:	d00b      	beq.n	8006ca4 <_vfiprintf_r+0xc0>
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	4622      	mov	r2, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7ff ff93 	bl	8006bbe <__sfputs_r>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f000 80aa 	beq.w	8006df2 <_vfiprintf_r+0x20e>
 8006c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca0:	445a      	add	r2, fp
 8006ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80a2 	beq.w	8006df2 <_vfiprintf_r+0x20e>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb8:	f10a 0a01 	add.w	sl, sl, #1
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	9307      	str	r3, [sp, #28]
 8006cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc6:	4654      	mov	r4, sl
 8006cc8:	2205      	movs	r2, #5
 8006cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cce:	4858      	ldr	r0, [pc, #352]	; (8006e30 <_vfiprintf_r+0x24c>)
 8006cd0:	f7f9 fa86 	bl	80001e0 <memchr>
 8006cd4:	9a04      	ldr	r2, [sp, #16]
 8006cd6:	b9d8      	cbnz	r0, 8006d10 <_vfiprintf_r+0x12c>
 8006cd8:	06d1      	lsls	r1, r2, #27
 8006cda:	bf44      	itt	mi
 8006cdc:	2320      	movmi	r3, #32
 8006cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce2:	0713      	lsls	r3, r2, #28
 8006ce4:	bf44      	itt	mi
 8006ce6:	232b      	movmi	r3, #43	; 0x2b
 8006ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cec:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf2:	d015      	beq.n	8006d20 <_vfiprintf_r+0x13c>
 8006cf4:	9a07      	ldr	r2, [sp, #28]
 8006cf6:	4654      	mov	r4, sl
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f04f 0c0a 	mov.w	ip, #10
 8006cfe:	4621      	mov	r1, r4
 8006d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d04:	3b30      	subs	r3, #48	; 0x30
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d94e      	bls.n	8006da8 <_vfiprintf_r+0x1c4>
 8006d0a:	b1b0      	cbz	r0, 8006d3a <_vfiprintf_r+0x156>
 8006d0c:	9207      	str	r2, [sp, #28]
 8006d0e:	e014      	b.n	8006d3a <_vfiprintf_r+0x156>
 8006d10:	eba0 0308 	sub.w	r3, r0, r8
 8006d14:	fa09 f303 	lsl.w	r3, r9, r3
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	46a2      	mov	sl, r4
 8006d1e:	e7d2      	b.n	8006cc6 <_vfiprintf_r+0xe2>
 8006d20:	9b03      	ldr	r3, [sp, #12]
 8006d22:	1d19      	adds	r1, r3, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	9103      	str	r1, [sp, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bfbb      	ittet	lt
 8006d2c:	425b      	neglt	r3, r3
 8006d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d32:	9307      	strge	r3, [sp, #28]
 8006d34:	9307      	strlt	r3, [sp, #28]
 8006d36:	bfb8      	it	lt
 8006d38:	9204      	strlt	r2, [sp, #16]
 8006d3a:	7823      	ldrb	r3, [r4, #0]
 8006d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d3e:	d10c      	bne.n	8006d5a <_vfiprintf_r+0x176>
 8006d40:	7863      	ldrb	r3, [r4, #1]
 8006d42:	2b2a      	cmp	r3, #42	; 0x2a
 8006d44:	d135      	bne.n	8006db2 <_vfiprintf_r+0x1ce>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1d1a      	adds	r2, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9203      	str	r2, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfb8      	it	lt
 8006d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d56:	3402      	adds	r4, #2
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e40 <_vfiprintf_r+0x25c>
 8006d5e:	7821      	ldrb	r1, [r4, #0]
 8006d60:	2203      	movs	r2, #3
 8006d62:	4650      	mov	r0, sl
 8006d64:	f7f9 fa3c 	bl	80001e0 <memchr>
 8006d68:	b140      	cbz	r0, 8006d7c <_vfiprintf_r+0x198>
 8006d6a:	2340      	movs	r3, #64	; 0x40
 8006d6c:	eba0 000a 	sub.w	r0, r0, sl
 8006d70:	fa03 f000 	lsl.w	r0, r3, r0
 8006d74:	9b04      	ldr	r3, [sp, #16]
 8006d76:	4303      	orrs	r3, r0
 8006d78:	3401      	adds	r4, #1
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d80:	482c      	ldr	r0, [pc, #176]	; (8006e34 <_vfiprintf_r+0x250>)
 8006d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d86:	2206      	movs	r2, #6
 8006d88:	f7f9 fa2a 	bl	80001e0 <memchr>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d03f      	beq.n	8006e10 <_vfiprintf_r+0x22c>
 8006d90:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <_vfiprintf_r+0x254>)
 8006d92:	bb1b      	cbnz	r3, 8006ddc <_vfiprintf_r+0x1f8>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	3307      	adds	r3, #7
 8006d98:	f023 0307 	bic.w	r3, r3, #7
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	9303      	str	r3, [sp, #12]
 8006da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da2:	443b      	add	r3, r7
 8006da4:	9309      	str	r3, [sp, #36]	; 0x24
 8006da6:	e767      	b.n	8006c78 <_vfiprintf_r+0x94>
 8006da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dac:	460c      	mov	r4, r1
 8006dae:	2001      	movs	r0, #1
 8006db0:	e7a5      	b.n	8006cfe <_vfiprintf_r+0x11a>
 8006db2:	2300      	movs	r3, #0
 8006db4:	3401      	adds	r4, #1
 8006db6:	9305      	str	r3, [sp, #20]
 8006db8:	4619      	mov	r1, r3
 8006dba:	f04f 0c0a 	mov.w	ip, #10
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc4:	3a30      	subs	r2, #48	; 0x30
 8006dc6:	2a09      	cmp	r2, #9
 8006dc8:	d903      	bls.n	8006dd2 <_vfiprintf_r+0x1ee>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0c5      	beq.n	8006d5a <_vfiprintf_r+0x176>
 8006dce:	9105      	str	r1, [sp, #20]
 8006dd0:	e7c3      	b.n	8006d5a <_vfiprintf_r+0x176>
 8006dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e7f0      	b.n	8006dbe <_vfiprintf_r+0x1da>
 8006ddc:	ab03      	add	r3, sp, #12
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	462a      	mov	r2, r5
 8006de2:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <_vfiprintf_r+0x258>)
 8006de4:	a904      	add	r1, sp, #16
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7fd fe16 	bl	8004a18 <_printf_float>
 8006dec:	4607      	mov	r7, r0
 8006dee:	1c78      	adds	r0, r7, #1
 8006df0:	d1d6      	bne.n	8006da0 <_vfiprintf_r+0x1bc>
 8006df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006df4:	07d9      	lsls	r1, r3, #31
 8006df6:	d405      	bmi.n	8006e04 <_vfiprintf_r+0x220>
 8006df8:	89ab      	ldrh	r3, [r5, #12]
 8006dfa:	059a      	lsls	r2, r3, #22
 8006dfc:	d402      	bmi.n	8006e04 <_vfiprintf_r+0x220>
 8006dfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e00:	f000 faaf 	bl	8007362 <__retarget_lock_release_recursive>
 8006e04:	89ab      	ldrh	r3, [r5, #12]
 8006e06:	065b      	lsls	r3, r3, #25
 8006e08:	f53f af12 	bmi.w	8006c30 <_vfiprintf_r+0x4c>
 8006e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e0e:	e711      	b.n	8006c34 <_vfiprintf_r+0x50>
 8006e10:	ab03      	add	r3, sp, #12
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <_vfiprintf_r+0x258>)
 8006e18:	a904      	add	r1, sp, #16
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7fe f8a0 	bl	8004f60 <_printf_i>
 8006e20:	e7e4      	b.n	8006dec <_vfiprintf_r+0x208>
 8006e22:	bf00      	nop
 8006e24:	080082a4 	.word	0x080082a4
 8006e28:	080082c4 	.word	0x080082c4
 8006e2c:	08008284 	.word	0x08008284
 8006e30:	0800812c 	.word	0x0800812c
 8006e34:	08008136 	.word	0x08008136
 8006e38:	08004a19 	.word	0x08004a19
 8006e3c:	08006bbf 	.word	0x08006bbf
 8006e40:	08008132 	.word	0x08008132

08006e44 <__swbuf_r>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	460e      	mov	r6, r1
 8006e48:	4614      	mov	r4, r2
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	b118      	cbz	r0, 8006e56 <__swbuf_r+0x12>
 8006e4e:	6983      	ldr	r3, [r0, #24]
 8006e50:	b90b      	cbnz	r3, 8006e56 <__swbuf_r+0x12>
 8006e52:	f000 f9e7 	bl	8007224 <__sinit>
 8006e56:	4b21      	ldr	r3, [pc, #132]	; (8006edc <__swbuf_r+0x98>)
 8006e58:	429c      	cmp	r4, r3
 8006e5a:	d12b      	bne.n	8006eb4 <__swbuf_r+0x70>
 8006e5c:	686c      	ldr	r4, [r5, #4]
 8006e5e:	69a3      	ldr	r3, [r4, #24]
 8006e60:	60a3      	str	r3, [r4, #8]
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	071a      	lsls	r2, r3, #28
 8006e66:	d52f      	bpl.n	8006ec8 <__swbuf_r+0x84>
 8006e68:	6923      	ldr	r3, [r4, #16]
 8006e6a:	b36b      	cbz	r3, 8006ec8 <__swbuf_r+0x84>
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	1ac0      	subs	r0, r0, r3
 8006e72:	6963      	ldr	r3, [r4, #20]
 8006e74:	b2f6      	uxtb	r6, r6
 8006e76:	4283      	cmp	r3, r0
 8006e78:	4637      	mov	r7, r6
 8006e7a:	dc04      	bgt.n	8006e86 <__swbuf_r+0x42>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f93c 	bl	80070fc <_fflush_r>
 8006e84:	bb30      	cbnz	r0, 8006ed4 <__swbuf_r+0x90>
 8006e86:	68a3      	ldr	r3, [r4, #8]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	60a3      	str	r3, [r4, #8]
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	6022      	str	r2, [r4, #0]
 8006e92:	701e      	strb	r6, [r3, #0]
 8006e94:	6963      	ldr	r3, [r4, #20]
 8006e96:	3001      	adds	r0, #1
 8006e98:	4283      	cmp	r3, r0
 8006e9a:	d004      	beq.n	8006ea6 <__swbuf_r+0x62>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	07db      	lsls	r3, r3, #31
 8006ea0:	d506      	bpl.n	8006eb0 <__swbuf_r+0x6c>
 8006ea2:	2e0a      	cmp	r6, #10
 8006ea4:	d104      	bne.n	8006eb0 <__swbuf_r+0x6c>
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 f927 	bl	80070fc <_fflush_r>
 8006eae:	b988      	cbnz	r0, 8006ed4 <__swbuf_r+0x90>
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <__swbuf_r+0x9c>)
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d101      	bne.n	8006ebe <__swbuf_r+0x7a>
 8006eba:	68ac      	ldr	r4, [r5, #8]
 8006ebc:	e7cf      	b.n	8006e5e <__swbuf_r+0x1a>
 8006ebe:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <__swbuf_r+0xa0>)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	bf08      	it	eq
 8006ec4:	68ec      	ldreq	r4, [r5, #12]
 8006ec6:	e7ca      	b.n	8006e5e <__swbuf_r+0x1a>
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 f81a 	bl	8006f04 <__swsetup_r>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d0cb      	beq.n	8006e6c <__swbuf_r+0x28>
 8006ed4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ed8:	e7ea      	b.n	8006eb0 <__swbuf_r+0x6c>
 8006eda:	bf00      	nop
 8006edc:	080082a4 	.word	0x080082a4
 8006ee0:	080082c4 	.word	0x080082c4
 8006ee4:	08008284 	.word	0x08008284

08006ee8 <__ascii_wctomb>:
 8006ee8:	b149      	cbz	r1, 8006efe <__ascii_wctomb+0x16>
 8006eea:	2aff      	cmp	r2, #255	; 0xff
 8006eec:	bf85      	ittet	hi
 8006eee:	238a      	movhi	r3, #138	; 0x8a
 8006ef0:	6003      	strhi	r3, [r0, #0]
 8006ef2:	700a      	strbls	r2, [r1, #0]
 8006ef4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ef8:	bf98      	it	ls
 8006efa:	2001      	movls	r0, #1
 8006efc:	4770      	bx	lr
 8006efe:	4608      	mov	r0, r1
 8006f00:	4770      	bx	lr
	...

08006f04 <__swsetup_r>:
 8006f04:	4b32      	ldr	r3, [pc, #200]	; (8006fd0 <__swsetup_r+0xcc>)
 8006f06:	b570      	push	{r4, r5, r6, lr}
 8006f08:	681d      	ldr	r5, [r3, #0]
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	b125      	cbz	r5, 8006f1a <__swsetup_r+0x16>
 8006f10:	69ab      	ldr	r3, [r5, #24]
 8006f12:	b913      	cbnz	r3, 8006f1a <__swsetup_r+0x16>
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f985 	bl	8007224 <__sinit>
 8006f1a:	4b2e      	ldr	r3, [pc, #184]	; (8006fd4 <__swsetup_r+0xd0>)
 8006f1c:	429c      	cmp	r4, r3
 8006f1e:	d10f      	bne.n	8006f40 <__swsetup_r+0x3c>
 8006f20:	686c      	ldr	r4, [r5, #4]
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f28:	0719      	lsls	r1, r3, #28
 8006f2a:	d42c      	bmi.n	8006f86 <__swsetup_r+0x82>
 8006f2c:	06dd      	lsls	r5, r3, #27
 8006f2e:	d411      	bmi.n	8006f54 <__swsetup_r+0x50>
 8006f30:	2309      	movs	r3, #9
 8006f32:	6033      	str	r3, [r6, #0]
 8006f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	e03e      	b.n	8006fbe <__swsetup_r+0xba>
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <__swsetup_r+0xd4>)
 8006f42:	429c      	cmp	r4, r3
 8006f44:	d101      	bne.n	8006f4a <__swsetup_r+0x46>
 8006f46:	68ac      	ldr	r4, [r5, #8]
 8006f48:	e7eb      	b.n	8006f22 <__swsetup_r+0x1e>
 8006f4a:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <__swsetup_r+0xd8>)
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	bf08      	it	eq
 8006f50:	68ec      	ldreq	r4, [r5, #12]
 8006f52:	e7e6      	b.n	8006f22 <__swsetup_r+0x1e>
 8006f54:	0758      	lsls	r0, r3, #29
 8006f56:	d512      	bpl.n	8006f7e <__swsetup_r+0x7a>
 8006f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5a:	b141      	cbz	r1, 8006f6e <__swsetup_r+0x6a>
 8006f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f60:	4299      	cmp	r1, r3
 8006f62:	d002      	beq.n	8006f6a <__swsetup_r+0x66>
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff fb6f 	bl	8006648 <_free_r>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	2300      	movs	r3, #0
 8006f78:	6063      	str	r3, [r4, #4]
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	f043 0308 	orr.w	r3, r3, #8
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	b94b      	cbnz	r3, 8006f9e <__swsetup_r+0x9a>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f94:	d003      	beq.n	8006f9e <__swsetup_r+0x9a>
 8006f96:	4621      	mov	r1, r4
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f000 fa07 	bl	80073ac <__smakebuf_r>
 8006f9e:	89a0      	ldrh	r0, [r4, #12]
 8006fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fa4:	f010 0301 	ands.w	r3, r0, #1
 8006fa8:	d00a      	beq.n	8006fc0 <__swsetup_r+0xbc>
 8006faa:	2300      	movs	r3, #0
 8006fac:	60a3      	str	r3, [r4, #8]
 8006fae:	6963      	ldr	r3, [r4, #20]
 8006fb0:	425b      	negs	r3, r3
 8006fb2:	61a3      	str	r3, [r4, #24]
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	b943      	cbnz	r3, 8006fca <__swsetup_r+0xc6>
 8006fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fbc:	d1ba      	bne.n	8006f34 <__swsetup_r+0x30>
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	0781      	lsls	r1, r0, #30
 8006fc2:	bf58      	it	pl
 8006fc4:	6963      	ldrpl	r3, [r4, #20]
 8006fc6:	60a3      	str	r3, [r4, #8]
 8006fc8:	e7f4      	b.n	8006fb4 <__swsetup_r+0xb0>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e7f7      	b.n	8006fbe <__swsetup_r+0xba>
 8006fce:	bf00      	nop
 8006fd0:	20000018 	.word	0x20000018
 8006fd4:	080082a4 	.word	0x080082a4
 8006fd8:	080082c4 	.word	0x080082c4
 8006fdc:	08008284 	.word	0x08008284

08006fe0 <abort>:
 8006fe0:	b508      	push	{r3, lr}
 8006fe2:	2006      	movs	r0, #6
 8006fe4:	f000 fa52 	bl	800748c <raise>
 8006fe8:	2001      	movs	r0, #1
 8006fea:	f7fc ff8b 	bl	8003f04 <_exit>
	...

08006ff0 <__sflush_r>:
 8006ff0:	898a      	ldrh	r2, [r1, #12]
 8006ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	0710      	lsls	r0, r2, #28
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	d458      	bmi.n	80070b0 <__sflush_r+0xc0>
 8006ffe:	684b      	ldr	r3, [r1, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	dc05      	bgt.n	8007010 <__sflush_r+0x20>
 8007004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	dc02      	bgt.n	8007010 <__sflush_r+0x20>
 800700a:	2000      	movs	r0, #0
 800700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007012:	2e00      	cmp	r6, #0
 8007014:	d0f9      	beq.n	800700a <__sflush_r+0x1a>
 8007016:	2300      	movs	r3, #0
 8007018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800701c:	682f      	ldr	r7, [r5, #0]
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	d032      	beq.n	8007088 <__sflush_r+0x98>
 8007022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	075a      	lsls	r2, r3, #29
 8007028:	d505      	bpl.n	8007036 <__sflush_r+0x46>
 800702a:	6863      	ldr	r3, [r4, #4]
 800702c:	1ac0      	subs	r0, r0, r3
 800702e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007030:	b10b      	cbz	r3, 8007036 <__sflush_r+0x46>
 8007032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007034:	1ac0      	subs	r0, r0, r3
 8007036:	2300      	movs	r3, #0
 8007038:	4602      	mov	r2, r0
 800703a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703c:	6a21      	ldr	r1, [r4, #32]
 800703e:	4628      	mov	r0, r5
 8007040:	47b0      	blx	r6
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	d106      	bne.n	8007056 <__sflush_r+0x66>
 8007048:	6829      	ldr	r1, [r5, #0]
 800704a:	291d      	cmp	r1, #29
 800704c:	d82c      	bhi.n	80070a8 <__sflush_r+0xb8>
 800704e:	4a2a      	ldr	r2, [pc, #168]	; (80070f8 <__sflush_r+0x108>)
 8007050:	40ca      	lsrs	r2, r1
 8007052:	07d6      	lsls	r6, r2, #31
 8007054:	d528      	bpl.n	80070a8 <__sflush_r+0xb8>
 8007056:	2200      	movs	r2, #0
 8007058:	6062      	str	r2, [r4, #4]
 800705a:	04d9      	lsls	r1, r3, #19
 800705c:	6922      	ldr	r2, [r4, #16]
 800705e:	6022      	str	r2, [r4, #0]
 8007060:	d504      	bpl.n	800706c <__sflush_r+0x7c>
 8007062:	1c42      	adds	r2, r0, #1
 8007064:	d101      	bne.n	800706a <__sflush_r+0x7a>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	b903      	cbnz	r3, 800706c <__sflush_r+0x7c>
 800706a:	6560      	str	r0, [r4, #84]	; 0x54
 800706c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800706e:	602f      	str	r7, [r5, #0]
 8007070:	2900      	cmp	r1, #0
 8007072:	d0ca      	beq.n	800700a <__sflush_r+0x1a>
 8007074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007078:	4299      	cmp	r1, r3
 800707a:	d002      	beq.n	8007082 <__sflush_r+0x92>
 800707c:	4628      	mov	r0, r5
 800707e:	f7ff fae3 	bl	8006648 <_free_r>
 8007082:	2000      	movs	r0, #0
 8007084:	6360      	str	r0, [r4, #52]	; 0x34
 8007086:	e7c1      	b.n	800700c <__sflush_r+0x1c>
 8007088:	6a21      	ldr	r1, [r4, #32]
 800708a:	2301      	movs	r3, #1
 800708c:	4628      	mov	r0, r5
 800708e:	47b0      	blx	r6
 8007090:	1c41      	adds	r1, r0, #1
 8007092:	d1c7      	bne.n	8007024 <__sflush_r+0x34>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0c4      	beq.n	8007024 <__sflush_r+0x34>
 800709a:	2b1d      	cmp	r3, #29
 800709c:	d001      	beq.n	80070a2 <__sflush_r+0xb2>
 800709e:	2b16      	cmp	r3, #22
 80070a0:	d101      	bne.n	80070a6 <__sflush_r+0xb6>
 80070a2:	602f      	str	r7, [r5, #0]
 80070a4:	e7b1      	b.n	800700a <__sflush_r+0x1a>
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e7ad      	b.n	800700c <__sflush_r+0x1c>
 80070b0:	690f      	ldr	r7, [r1, #16]
 80070b2:	2f00      	cmp	r7, #0
 80070b4:	d0a9      	beq.n	800700a <__sflush_r+0x1a>
 80070b6:	0793      	lsls	r3, r2, #30
 80070b8:	680e      	ldr	r6, [r1, #0]
 80070ba:	bf08      	it	eq
 80070bc:	694b      	ldreq	r3, [r1, #20]
 80070be:	600f      	str	r7, [r1, #0]
 80070c0:	bf18      	it	ne
 80070c2:	2300      	movne	r3, #0
 80070c4:	eba6 0807 	sub.w	r8, r6, r7
 80070c8:	608b      	str	r3, [r1, #8]
 80070ca:	f1b8 0f00 	cmp.w	r8, #0
 80070ce:	dd9c      	ble.n	800700a <__sflush_r+0x1a>
 80070d0:	6a21      	ldr	r1, [r4, #32]
 80070d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070d4:	4643      	mov	r3, r8
 80070d6:	463a      	mov	r2, r7
 80070d8:	4628      	mov	r0, r5
 80070da:	47b0      	blx	r6
 80070dc:	2800      	cmp	r0, #0
 80070de:	dc06      	bgt.n	80070ee <__sflush_r+0xfe>
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	e78e      	b.n	800700c <__sflush_r+0x1c>
 80070ee:	4407      	add	r7, r0
 80070f0:	eba8 0800 	sub.w	r8, r8, r0
 80070f4:	e7e9      	b.n	80070ca <__sflush_r+0xda>
 80070f6:	bf00      	nop
 80070f8:	20400001 	.word	0x20400001

080070fc <_fflush_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	690b      	ldr	r3, [r1, #16]
 8007100:	4605      	mov	r5, r0
 8007102:	460c      	mov	r4, r1
 8007104:	b913      	cbnz	r3, 800710c <_fflush_r+0x10>
 8007106:	2500      	movs	r5, #0
 8007108:	4628      	mov	r0, r5
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	b118      	cbz	r0, 8007116 <_fflush_r+0x1a>
 800710e:	6983      	ldr	r3, [r0, #24]
 8007110:	b90b      	cbnz	r3, 8007116 <_fflush_r+0x1a>
 8007112:	f000 f887 	bl	8007224 <__sinit>
 8007116:	4b14      	ldr	r3, [pc, #80]	; (8007168 <_fflush_r+0x6c>)
 8007118:	429c      	cmp	r4, r3
 800711a:	d11b      	bne.n	8007154 <_fflush_r+0x58>
 800711c:	686c      	ldr	r4, [r5, #4]
 800711e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ef      	beq.n	8007106 <_fflush_r+0xa>
 8007126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007128:	07d0      	lsls	r0, r2, #31
 800712a:	d404      	bmi.n	8007136 <_fflush_r+0x3a>
 800712c:	0599      	lsls	r1, r3, #22
 800712e:	d402      	bmi.n	8007136 <_fflush_r+0x3a>
 8007130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007132:	f000 f915 	bl	8007360 <__retarget_lock_acquire_recursive>
 8007136:	4628      	mov	r0, r5
 8007138:	4621      	mov	r1, r4
 800713a:	f7ff ff59 	bl	8006ff0 <__sflush_r>
 800713e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007140:	07da      	lsls	r2, r3, #31
 8007142:	4605      	mov	r5, r0
 8007144:	d4e0      	bmi.n	8007108 <_fflush_r+0xc>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	059b      	lsls	r3, r3, #22
 800714a:	d4dd      	bmi.n	8007108 <_fflush_r+0xc>
 800714c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800714e:	f000 f908 	bl	8007362 <__retarget_lock_release_recursive>
 8007152:	e7d9      	b.n	8007108 <_fflush_r+0xc>
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <_fflush_r+0x70>)
 8007156:	429c      	cmp	r4, r3
 8007158:	d101      	bne.n	800715e <_fflush_r+0x62>
 800715a:	68ac      	ldr	r4, [r5, #8]
 800715c:	e7df      	b.n	800711e <_fflush_r+0x22>
 800715e:	4b04      	ldr	r3, [pc, #16]	; (8007170 <_fflush_r+0x74>)
 8007160:	429c      	cmp	r4, r3
 8007162:	bf08      	it	eq
 8007164:	68ec      	ldreq	r4, [r5, #12]
 8007166:	e7da      	b.n	800711e <_fflush_r+0x22>
 8007168:	080082a4 	.word	0x080082a4
 800716c:	080082c4 	.word	0x080082c4
 8007170:	08008284 	.word	0x08008284

08007174 <std>:
 8007174:	2300      	movs	r3, #0
 8007176:	b510      	push	{r4, lr}
 8007178:	4604      	mov	r4, r0
 800717a:	e9c0 3300 	strd	r3, r3, [r0]
 800717e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007182:	6083      	str	r3, [r0, #8]
 8007184:	8181      	strh	r1, [r0, #12]
 8007186:	6643      	str	r3, [r0, #100]	; 0x64
 8007188:	81c2      	strh	r2, [r0, #14]
 800718a:	6183      	str	r3, [r0, #24]
 800718c:	4619      	mov	r1, r3
 800718e:	2208      	movs	r2, #8
 8007190:	305c      	adds	r0, #92	; 0x5c
 8007192:	f7fd fb99 	bl	80048c8 <memset>
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <std+0x38>)
 8007198:	6263      	str	r3, [r4, #36]	; 0x24
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <std+0x3c>)
 800719c:	62a3      	str	r3, [r4, #40]	; 0x28
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <std+0x40>)
 80071a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071a2:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <std+0x44>)
 80071a4:	6224      	str	r4, [r4, #32]
 80071a6:	6323      	str	r3, [r4, #48]	; 0x30
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	bf00      	nop
 80071ac:	080074c5 	.word	0x080074c5
 80071b0:	080074e7 	.word	0x080074e7
 80071b4:	0800751f 	.word	0x0800751f
 80071b8:	08007543 	.word	0x08007543

080071bc <_cleanup_r>:
 80071bc:	4901      	ldr	r1, [pc, #4]	; (80071c4 <_cleanup_r+0x8>)
 80071be:	f000 b8af 	b.w	8007320 <_fwalk_reent>
 80071c2:	bf00      	nop
 80071c4:	080070fd 	.word	0x080070fd

080071c8 <__sfmoreglue>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	1e4a      	subs	r2, r1, #1
 80071cc:	2568      	movs	r5, #104	; 0x68
 80071ce:	4355      	muls	r5, r2
 80071d0:	460e      	mov	r6, r1
 80071d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071d6:	f7ff fa87 	bl	80066e8 <_malloc_r>
 80071da:	4604      	mov	r4, r0
 80071dc:	b140      	cbz	r0, 80071f0 <__sfmoreglue+0x28>
 80071de:	2100      	movs	r1, #0
 80071e0:	e9c0 1600 	strd	r1, r6, [r0]
 80071e4:	300c      	adds	r0, #12
 80071e6:	60a0      	str	r0, [r4, #8]
 80071e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071ec:	f7fd fb6c 	bl	80048c8 <memset>
 80071f0:	4620      	mov	r0, r4
 80071f2:	bd70      	pop	{r4, r5, r6, pc}

080071f4 <__sfp_lock_acquire>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__sfp_lock_acquire+0x8>)
 80071f6:	f000 b8b3 	b.w	8007360 <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	20000288 	.word	0x20000288

08007200 <__sfp_lock_release>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__sfp_lock_release+0x8>)
 8007202:	f000 b8ae 	b.w	8007362 <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	20000288 	.word	0x20000288

0800720c <__sinit_lock_acquire>:
 800720c:	4801      	ldr	r0, [pc, #4]	; (8007214 <__sinit_lock_acquire+0x8>)
 800720e:	f000 b8a7 	b.w	8007360 <__retarget_lock_acquire_recursive>
 8007212:	bf00      	nop
 8007214:	20000283 	.word	0x20000283

08007218 <__sinit_lock_release>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__sinit_lock_release+0x8>)
 800721a:	f000 b8a2 	b.w	8007362 <__retarget_lock_release_recursive>
 800721e:	bf00      	nop
 8007220:	20000283 	.word	0x20000283

08007224 <__sinit>:
 8007224:	b510      	push	{r4, lr}
 8007226:	4604      	mov	r4, r0
 8007228:	f7ff fff0 	bl	800720c <__sinit_lock_acquire>
 800722c:	69a3      	ldr	r3, [r4, #24]
 800722e:	b11b      	cbz	r3, 8007238 <__sinit+0x14>
 8007230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007234:	f7ff bff0 	b.w	8007218 <__sinit_lock_release>
 8007238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800723c:	6523      	str	r3, [r4, #80]	; 0x50
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <__sinit+0x68>)
 8007240:	4a13      	ldr	r2, [pc, #76]	; (8007290 <__sinit+0x6c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	62a2      	str	r2, [r4, #40]	; 0x28
 8007246:	42a3      	cmp	r3, r4
 8007248:	bf04      	itt	eq
 800724a:	2301      	moveq	r3, #1
 800724c:	61a3      	streq	r3, [r4, #24]
 800724e:	4620      	mov	r0, r4
 8007250:	f000 f820 	bl	8007294 <__sfp>
 8007254:	6060      	str	r0, [r4, #4]
 8007256:	4620      	mov	r0, r4
 8007258:	f000 f81c 	bl	8007294 <__sfp>
 800725c:	60a0      	str	r0, [r4, #8]
 800725e:	4620      	mov	r0, r4
 8007260:	f000 f818 	bl	8007294 <__sfp>
 8007264:	2200      	movs	r2, #0
 8007266:	60e0      	str	r0, [r4, #12]
 8007268:	2104      	movs	r1, #4
 800726a:	6860      	ldr	r0, [r4, #4]
 800726c:	f7ff ff82 	bl	8007174 <std>
 8007270:	68a0      	ldr	r0, [r4, #8]
 8007272:	2201      	movs	r2, #1
 8007274:	2109      	movs	r1, #9
 8007276:	f7ff ff7d 	bl	8007174 <std>
 800727a:	68e0      	ldr	r0, [r4, #12]
 800727c:	2202      	movs	r2, #2
 800727e:	2112      	movs	r1, #18
 8007280:	f7ff ff78 	bl	8007174 <std>
 8007284:	2301      	movs	r3, #1
 8007286:	61a3      	str	r3, [r4, #24]
 8007288:	e7d2      	b.n	8007230 <__sinit+0xc>
 800728a:	bf00      	nop
 800728c:	08007f00 	.word	0x08007f00
 8007290:	080071bd 	.word	0x080071bd

08007294 <__sfp>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	4607      	mov	r7, r0
 8007298:	f7ff ffac 	bl	80071f4 <__sfp_lock_acquire>
 800729c:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <__sfp+0x84>)
 800729e:	681e      	ldr	r6, [r3, #0]
 80072a0:	69b3      	ldr	r3, [r6, #24]
 80072a2:	b913      	cbnz	r3, 80072aa <__sfp+0x16>
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7ff ffbd 	bl	8007224 <__sinit>
 80072aa:	3648      	adds	r6, #72	; 0x48
 80072ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	d503      	bpl.n	80072bc <__sfp+0x28>
 80072b4:	6833      	ldr	r3, [r6, #0]
 80072b6:	b30b      	cbz	r3, 80072fc <__sfp+0x68>
 80072b8:	6836      	ldr	r6, [r6, #0]
 80072ba:	e7f7      	b.n	80072ac <__sfp+0x18>
 80072bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072c0:	b9d5      	cbnz	r5, 80072f8 <__sfp+0x64>
 80072c2:	4b16      	ldr	r3, [pc, #88]	; (800731c <__sfp+0x88>)
 80072c4:	60e3      	str	r3, [r4, #12]
 80072c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072ca:	6665      	str	r5, [r4, #100]	; 0x64
 80072cc:	f000 f847 	bl	800735e <__retarget_lock_init_recursive>
 80072d0:	f7ff ff96 	bl	8007200 <__sfp_lock_release>
 80072d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072dc:	6025      	str	r5, [r4, #0]
 80072de:	61a5      	str	r5, [r4, #24]
 80072e0:	2208      	movs	r2, #8
 80072e2:	4629      	mov	r1, r5
 80072e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072e8:	f7fd faee 	bl	80048c8 <memset>
 80072ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072f4:	4620      	mov	r0, r4
 80072f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f8:	3468      	adds	r4, #104	; 0x68
 80072fa:	e7d9      	b.n	80072b0 <__sfp+0x1c>
 80072fc:	2104      	movs	r1, #4
 80072fe:	4638      	mov	r0, r7
 8007300:	f7ff ff62 	bl	80071c8 <__sfmoreglue>
 8007304:	4604      	mov	r4, r0
 8007306:	6030      	str	r0, [r6, #0]
 8007308:	2800      	cmp	r0, #0
 800730a:	d1d5      	bne.n	80072b8 <__sfp+0x24>
 800730c:	f7ff ff78 	bl	8007200 <__sfp_lock_release>
 8007310:	230c      	movs	r3, #12
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	e7ee      	b.n	80072f4 <__sfp+0x60>
 8007316:	bf00      	nop
 8007318:	08007f00 	.word	0x08007f00
 800731c:	ffff0001 	.word	0xffff0001

08007320 <_fwalk_reent>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	4606      	mov	r6, r0
 8007326:	4688      	mov	r8, r1
 8007328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800732c:	2700      	movs	r7, #0
 800732e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007332:	f1b9 0901 	subs.w	r9, r9, #1
 8007336:	d505      	bpl.n	8007344 <_fwalk_reent+0x24>
 8007338:	6824      	ldr	r4, [r4, #0]
 800733a:	2c00      	cmp	r4, #0
 800733c:	d1f7      	bne.n	800732e <_fwalk_reent+0xe>
 800733e:	4638      	mov	r0, r7
 8007340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007344:	89ab      	ldrh	r3, [r5, #12]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d907      	bls.n	800735a <_fwalk_reent+0x3a>
 800734a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800734e:	3301      	adds	r3, #1
 8007350:	d003      	beq.n	800735a <_fwalk_reent+0x3a>
 8007352:	4629      	mov	r1, r5
 8007354:	4630      	mov	r0, r6
 8007356:	47c0      	blx	r8
 8007358:	4307      	orrs	r7, r0
 800735a:	3568      	adds	r5, #104	; 0x68
 800735c:	e7e9      	b.n	8007332 <_fwalk_reent+0x12>

0800735e <__retarget_lock_init_recursive>:
 800735e:	4770      	bx	lr

08007360 <__retarget_lock_acquire_recursive>:
 8007360:	4770      	bx	lr

08007362 <__retarget_lock_release_recursive>:
 8007362:	4770      	bx	lr

08007364 <__swhatbuf_r>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	460e      	mov	r6, r1
 8007368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736c:	2900      	cmp	r1, #0
 800736e:	b096      	sub	sp, #88	; 0x58
 8007370:	4614      	mov	r4, r2
 8007372:	461d      	mov	r5, r3
 8007374:	da07      	bge.n	8007386 <__swhatbuf_r+0x22>
 8007376:	2300      	movs	r3, #0
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	89b3      	ldrh	r3, [r6, #12]
 800737c:	061a      	lsls	r2, r3, #24
 800737e:	d410      	bmi.n	80073a2 <__swhatbuf_r+0x3e>
 8007380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007384:	e00e      	b.n	80073a4 <__swhatbuf_r+0x40>
 8007386:	466a      	mov	r2, sp
 8007388:	f000 f902 	bl	8007590 <_fstat_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	dbf2      	blt.n	8007376 <__swhatbuf_r+0x12>
 8007390:	9a01      	ldr	r2, [sp, #4]
 8007392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800739a:	425a      	negs	r2, r3
 800739c:	415a      	adcs	r2, r3
 800739e:	602a      	str	r2, [r5, #0]
 80073a0:	e7ee      	b.n	8007380 <__swhatbuf_r+0x1c>
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	2000      	movs	r0, #0
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	b016      	add	sp, #88	; 0x58
 80073aa:	bd70      	pop	{r4, r5, r6, pc}

080073ac <__smakebuf_r>:
 80073ac:	898b      	ldrh	r3, [r1, #12]
 80073ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073b0:	079d      	lsls	r5, r3, #30
 80073b2:	4606      	mov	r6, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	d507      	bpl.n	80073c8 <__smakebuf_r+0x1c>
 80073b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	6123      	str	r3, [r4, #16]
 80073c0:	2301      	movs	r3, #1
 80073c2:	6163      	str	r3, [r4, #20]
 80073c4:	b002      	add	sp, #8
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	ab01      	add	r3, sp, #4
 80073ca:	466a      	mov	r2, sp
 80073cc:	f7ff ffca 	bl	8007364 <__swhatbuf_r>
 80073d0:	9900      	ldr	r1, [sp, #0]
 80073d2:	4605      	mov	r5, r0
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff f987 	bl	80066e8 <_malloc_r>
 80073da:	b948      	cbnz	r0, 80073f0 <__smakebuf_r+0x44>
 80073dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e0:	059a      	lsls	r2, r3, #22
 80073e2:	d4ef      	bmi.n	80073c4 <__smakebuf_r+0x18>
 80073e4:	f023 0303 	bic.w	r3, r3, #3
 80073e8:	f043 0302 	orr.w	r3, r3, #2
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	e7e3      	b.n	80073b8 <__smakebuf_r+0xc>
 80073f0:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <__smakebuf_r+0x7c>)
 80073f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	6020      	str	r0, [r4, #0]
 80073f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fc:	81a3      	strh	r3, [r4, #12]
 80073fe:	9b00      	ldr	r3, [sp, #0]
 8007400:	6163      	str	r3, [r4, #20]
 8007402:	9b01      	ldr	r3, [sp, #4]
 8007404:	6120      	str	r0, [r4, #16]
 8007406:	b15b      	cbz	r3, 8007420 <__smakebuf_r+0x74>
 8007408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800740c:	4630      	mov	r0, r6
 800740e:	f000 f8d1 	bl	80075b4 <_isatty_r>
 8007412:	b128      	cbz	r0, 8007420 <__smakebuf_r+0x74>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	89a0      	ldrh	r0, [r4, #12]
 8007422:	4305      	orrs	r5, r0
 8007424:	81a5      	strh	r5, [r4, #12]
 8007426:	e7cd      	b.n	80073c4 <__smakebuf_r+0x18>
 8007428:	080071bd 	.word	0x080071bd

0800742c <_malloc_usable_size_r>:
 800742c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007430:	1f18      	subs	r0, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	bfbc      	itt	lt
 8007436:	580b      	ldrlt	r3, [r1, r0]
 8007438:	18c0      	addlt	r0, r0, r3
 800743a:	4770      	bx	lr

0800743c <_raise_r>:
 800743c:	291f      	cmp	r1, #31
 800743e:	b538      	push	{r3, r4, r5, lr}
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	d904      	bls.n	8007450 <_raise_r+0x14>
 8007446:	2316      	movs	r3, #22
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007452:	b112      	cbz	r2, 800745a <_raise_r+0x1e>
 8007454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007458:	b94b      	cbnz	r3, 800746e <_raise_r+0x32>
 800745a:	4620      	mov	r0, r4
 800745c:	f000 f830 	bl	80074c0 <_getpid_r>
 8007460:	462a      	mov	r2, r5
 8007462:	4601      	mov	r1, r0
 8007464:	4620      	mov	r0, r4
 8007466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746a:	f000 b817 	b.w	800749c <_kill_r>
 800746e:	2b01      	cmp	r3, #1
 8007470:	d00a      	beq.n	8007488 <_raise_r+0x4c>
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	d103      	bne.n	800747e <_raise_r+0x42>
 8007476:	2316      	movs	r3, #22
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	2001      	movs	r0, #1
 800747c:	e7e7      	b.n	800744e <_raise_r+0x12>
 800747e:	2400      	movs	r4, #0
 8007480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007484:	4628      	mov	r0, r5
 8007486:	4798      	blx	r3
 8007488:	2000      	movs	r0, #0
 800748a:	e7e0      	b.n	800744e <_raise_r+0x12>

0800748c <raise>:
 800748c:	4b02      	ldr	r3, [pc, #8]	; (8007498 <raise+0xc>)
 800748e:	4601      	mov	r1, r0
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	f7ff bfd3 	b.w	800743c <_raise_r>
 8007496:	bf00      	nop
 8007498:	20000018 	.word	0x20000018

0800749c <_kill_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d07      	ldr	r5, [pc, #28]	; (80074bc <_kill_r+0x20>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	602b      	str	r3, [r5, #0]
 80074aa:	f7fc fd1b 	bl	8003ee4 <_kill>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d102      	bne.n	80074b8 <_kill_r+0x1c>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	b103      	cbz	r3, 80074b8 <_kill_r+0x1c>
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	bd38      	pop	{r3, r4, r5, pc}
 80074ba:	bf00      	nop
 80074bc:	2000027c 	.word	0x2000027c

080074c0 <_getpid_r>:
 80074c0:	f7fc bd08 	b.w	8003ed4 <_getpid>

080074c4 <__sread>:
 80074c4:	b510      	push	{r4, lr}
 80074c6:	460c      	mov	r4, r1
 80074c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074cc:	f000 f894 	bl	80075f8 <_read_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	bfab      	itete	ge
 80074d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074d6:	89a3      	ldrhlt	r3, [r4, #12]
 80074d8:	181b      	addge	r3, r3, r0
 80074da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074de:	bfac      	ite	ge
 80074e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074e2:	81a3      	strhlt	r3, [r4, #12]
 80074e4:	bd10      	pop	{r4, pc}

080074e6 <__swrite>:
 80074e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ea:	461f      	mov	r7, r3
 80074ec:	898b      	ldrh	r3, [r1, #12]
 80074ee:	05db      	lsls	r3, r3, #23
 80074f0:	4605      	mov	r5, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	4616      	mov	r6, r2
 80074f6:	d505      	bpl.n	8007504 <__swrite+0x1e>
 80074f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fc:	2302      	movs	r3, #2
 80074fe:	2200      	movs	r2, #0
 8007500:	f000 f868 	bl	80075d4 <_lseek_r>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800750a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	4632      	mov	r2, r6
 8007512:	463b      	mov	r3, r7
 8007514:	4628      	mov	r0, r5
 8007516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751a:	f000 b817 	b.w	800754c <_write_r>

0800751e <__sseek>:
 800751e:	b510      	push	{r4, lr}
 8007520:	460c      	mov	r4, r1
 8007522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007526:	f000 f855 	bl	80075d4 <_lseek_r>
 800752a:	1c43      	adds	r3, r0, #1
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	bf15      	itete	ne
 8007530:	6560      	strne	r0, [r4, #84]	; 0x54
 8007532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800753a:	81a3      	strheq	r3, [r4, #12]
 800753c:	bf18      	it	ne
 800753e:	81a3      	strhne	r3, [r4, #12]
 8007540:	bd10      	pop	{r4, pc}

08007542 <__sclose>:
 8007542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007546:	f000 b813 	b.w	8007570 <_close_r>
	...

0800754c <_write_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d07      	ldr	r5, [pc, #28]	; (800756c <_write_r+0x20>)
 8007550:	4604      	mov	r4, r0
 8007552:	4608      	mov	r0, r1
 8007554:	4611      	mov	r1, r2
 8007556:	2200      	movs	r2, #0
 8007558:	602a      	str	r2, [r5, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f7fc fcf9 	bl	8003f52 <_write>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_write_r+0x1e>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_write_r+0x1e>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	2000027c 	.word	0x2000027c

08007570 <_close_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d06      	ldr	r5, [pc, #24]	; (800758c <_close_r+0x1c>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	602b      	str	r3, [r5, #0]
 800757c:	f7fc fd05 	bl	8003f8a <_close>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_close_r+0x1a>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_close_r+0x1a>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	2000027c 	.word	0x2000027c

08007590 <_fstat_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	; (80075b0 <_fstat_r+0x20>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	f7fc fd00 	bl	8003fa2 <_fstat>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	d102      	bne.n	80075ac <_fstat_r+0x1c>
 80075a6:	682b      	ldr	r3, [r5, #0]
 80075a8:	b103      	cbz	r3, 80075ac <_fstat_r+0x1c>
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	bd38      	pop	{r3, r4, r5, pc}
 80075ae:	bf00      	nop
 80075b0:	2000027c 	.word	0x2000027c

080075b4 <_isatty_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d06      	ldr	r5, [pc, #24]	; (80075d0 <_isatty_r+0x1c>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fc fcff 	bl	8003fc2 <_isatty>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_isatty_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_isatty_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	2000027c 	.word	0x2000027c

080075d4 <_lseek_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d07      	ldr	r5, [pc, #28]	; (80075f4 <_lseek_r+0x20>)
 80075d8:	4604      	mov	r4, r0
 80075da:	4608      	mov	r0, r1
 80075dc:	4611      	mov	r1, r2
 80075de:	2200      	movs	r2, #0
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f7fc fcf8 	bl	8003fd8 <_lseek>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_lseek_r+0x1e>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_lseek_r+0x1e>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	2000027c 	.word	0x2000027c

080075f8 <_read_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d07      	ldr	r5, [pc, #28]	; (8007618 <_read_r+0x20>)
 80075fc:	4604      	mov	r4, r0
 80075fe:	4608      	mov	r0, r1
 8007600:	4611      	mov	r1, r2
 8007602:	2200      	movs	r2, #0
 8007604:	602a      	str	r2, [r5, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f7fc fc86 	bl	8003f18 <_read>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_read_r+0x1e>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b103      	cbz	r3, 8007616 <_read_r+0x1e>
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	2000027c 	.word	0x2000027c

0800761c <powf>:
 800761c:	b508      	push	{r3, lr}
 800761e:	ed2d 8b04 	vpush	{d8-d9}
 8007622:	eeb0 9a40 	vmov.f32	s18, s0
 8007626:	eef0 8a60 	vmov.f32	s17, s1
 800762a:	f000 f88f 	bl	800774c <__ieee754_powf>
 800762e:	4b43      	ldr	r3, [pc, #268]	; (800773c <powf+0x120>)
 8007630:	f993 3000 	ldrsb.w	r3, [r3]
 8007634:	3301      	adds	r3, #1
 8007636:	eeb0 8a40 	vmov.f32	s16, s0
 800763a:	d012      	beq.n	8007662 <powf+0x46>
 800763c:	eef4 8a68 	vcmp.f32	s17, s17
 8007640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007644:	d60d      	bvs.n	8007662 <powf+0x46>
 8007646:	eeb4 9a49 	vcmp.f32	s18, s18
 800764a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764e:	d70d      	bvc.n	800766c <powf+0x50>
 8007650:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800765c:	bf08      	it	eq
 800765e:	eeb0 8a67 	vmoveq.f32	s16, s15
 8007662:	eeb0 0a48 	vmov.f32	s0, s16
 8007666:	ecbd 8b04 	vpop	{d8-d9}
 800766a:	bd08      	pop	{r3, pc}
 800766c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8007740 <powf+0x124>
 8007670:	eeb4 9a69 	vcmp.f32	s18, s19
 8007674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007678:	d116      	bne.n	80076a8 <powf+0x8c>
 800767a:	eef4 8a69 	vcmp.f32	s17, s19
 800767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007682:	d057      	beq.n	8007734 <powf+0x118>
 8007684:	eeb0 0a68 	vmov.f32	s0, s17
 8007688:	f000 fb2a 	bl	8007ce0 <finitef>
 800768c:	2800      	cmp	r0, #0
 800768e:	d0e8      	beq.n	8007662 <powf+0x46>
 8007690:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007698:	d5e3      	bpl.n	8007662 <powf+0x46>
 800769a:	f7fd f8eb 	bl	8004874 <__errno>
 800769e:	2321      	movs	r3, #33	; 0x21
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8007744 <powf+0x128>
 80076a6:	e7dc      	b.n	8007662 <powf+0x46>
 80076a8:	f000 fb1a 	bl	8007ce0 <finitef>
 80076ac:	bb50      	cbnz	r0, 8007704 <powf+0xe8>
 80076ae:	eeb0 0a49 	vmov.f32	s0, s18
 80076b2:	f000 fb15 	bl	8007ce0 <finitef>
 80076b6:	b328      	cbz	r0, 8007704 <powf+0xe8>
 80076b8:	eeb0 0a68 	vmov.f32	s0, s17
 80076bc:	f000 fb10 	bl	8007ce0 <finitef>
 80076c0:	b300      	cbz	r0, 8007704 <powf+0xe8>
 80076c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	d706      	bvc.n	80076da <powf+0xbe>
 80076cc:	f7fd f8d2 	bl	8004874 <__errno>
 80076d0:	2321      	movs	r3, #33	; 0x21
 80076d2:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80076d6:	6003      	str	r3, [r0, #0]
 80076d8:	e7c3      	b.n	8007662 <powf+0x46>
 80076da:	f7fd f8cb 	bl	8004874 <__errno>
 80076de:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80076e2:	2322      	movs	r3, #34	; 0x22
 80076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e8:	6003      	str	r3, [r0, #0]
 80076ea:	d508      	bpl.n	80076fe <powf+0xe2>
 80076ec:	eeb0 0a68 	vmov.f32	s0, s17
 80076f0:	f000 fb0a 	bl	8007d08 <rintf>
 80076f4:	eeb4 0a68 	vcmp.f32	s0, s17
 80076f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fc:	d1d1      	bne.n	80076a2 <powf+0x86>
 80076fe:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8007748 <powf+0x12c>
 8007702:	e7ae      	b.n	8007662 <powf+0x46>
 8007704:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	d1a9      	bne.n	8007662 <powf+0x46>
 800770e:	eeb0 0a49 	vmov.f32	s0, s18
 8007712:	f000 fae5 	bl	8007ce0 <finitef>
 8007716:	2800      	cmp	r0, #0
 8007718:	d0a3      	beq.n	8007662 <powf+0x46>
 800771a:	eeb0 0a68 	vmov.f32	s0, s17
 800771e:	f000 fadf 	bl	8007ce0 <finitef>
 8007722:	2800      	cmp	r0, #0
 8007724:	d09d      	beq.n	8007662 <powf+0x46>
 8007726:	f7fd f8a5 	bl	8004874 <__errno>
 800772a:	2322      	movs	r3, #34	; 0x22
 800772c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007740 <powf+0x124>
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	e796      	b.n	8007662 <powf+0x46>
 8007734:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007738:	e793      	b.n	8007662 <powf+0x46>
 800773a:	bf00      	nop
 800773c:	200001e8 	.word	0x200001e8
 8007740:	00000000 	.word	0x00000000
 8007744:	ff800000 	.word	0xff800000
 8007748:	7f800000 	.word	0x7f800000

0800774c <__ieee754_powf>:
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	ee10 5a90 	vmov	r5, s1
 8007754:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007758:	ed2d 8b02 	vpush	{d8}
 800775c:	eeb0 8a40 	vmov.f32	s16, s0
 8007760:	eef0 8a60 	vmov.f32	s17, s1
 8007764:	f000 8291 	beq.w	8007c8a <__ieee754_powf+0x53e>
 8007768:	ee10 8a10 	vmov	r8, s0
 800776c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007770:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007774:	dc06      	bgt.n	8007784 <__ieee754_powf+0x38>
 8007776:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800777a:	dd0a      	ble.n	8007792 <__ieee754_powf+0x46>
 800777c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007780:	f000 8283 	beq.w	8007c8a <__ieee754_powf+0x53e>
 8007784:	ecbd 8b02 	vpop	{d8}
 8007788:	48d8      	ldr	r0, [pc, #864]	; (8007aec <__ieee754_powf+0x3a0>)
 800778a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778e:	f000 bab5 	b.w	8007cfc <nanf>
 8007792:	f1b8 0f00 	cmp.w	r8, #0
 8007796:	da1f      	bge.n	80077d8 <__ieee754_powf+0x8c>
 8007798:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800779c:	da2e      	bge.n	80077fc <__ieee754_powf+0xb0>
 800779e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80077a2:	f2c0 827b 	blt.w	8007c9c <__ieee754_powf+0x550>
 80077a6:	15fb      	asrs	r3, r7, #23
 80077a8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80077ac:	fa47 f603 	asr.w	r6, r7, r3
 80077b0:	fa06 f303 	lsl.w	r3, r6, r3
 80077b4:	42bb      	cmp	r3, r7
 80077b6:	f040 8271 	bne.w	8007c9c <__ieee754_powf+0x550>
 80077ba:	f006 0601 	and.w	r6, r6, #1
 80077be:	f1c6 0602 	rsb	r6, r6, #2
 80077c2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80077c6:	d120      	bne.n	800780a <__ieee754_powf+0xbe>
 80077c8:	2d00      	cmp	r5, #0
 80077ca:	f280 8264 	bge.w	8007c96 <__ieee754_powf+0x54a>
 80077ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80077d2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80077d6:	e00d      	b.n	80077f4 <__ieee754_powf+0xa8>
 80077d8:	2600      	movs	r6, #0
 80077da:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80077de:	d1f0      	bne.n	80077c2 <__ieee754_powf+0x76>
 80077e0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80077e4:	f000 8251 	beq.w	8007c8a <__ieee754_powf+0x53e>
 80077e8:	dd0a      	ble.n	8007800 <__ieee754_powf+0xb4>
 80077ea:	2d00      	cmp	r5, #0
 80077ec:	f280 8250 	bge.w	8007c90 <__ieee754_powf+0x544>
 80077f0:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007af0 <__ieee754_powf+0x3a4>
 80077f4:	ecbd 8b02 	vpop	{d8}
 80077f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077fc:	2602      	movs	r6, #2
 80077fe:	e7ec      	b.n	80077da <__ieee754_powf+0x8e>
 8007800:	2d00      	cmp	r5, #0
 8007802:	daf5      	bge.n	80077f0 <__ieee754_powf+0xa4>
 8007804:	eeb1 0a68 	vneg.f32	s0, s17
 8007808:	e7f4      	b.n	80077f4 <__ieee754_powf+0xa8>
 800780a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800780e:	d102      	bne.n	8007816 <__ieee754_powf+0xca>
 8007810:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007814:	e7ee      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007816:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800781a:	eeb0 0a48 	vmov.f32	s0, s16
 800781e:	d108      	bne.n	8007832 <__ieee754_powf+0xe6>
 8007820:	f1b8 0f00 	cmp.w	r8, #0
 8007824:	db05      	blt.n	8007832 <__ieee754_powf+0xe6>
 8007826:	ecbd 8b02 	vpop	{d8}
 800782a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800782e:	f000 ba4d 	b.w	8007ccc <__ieee754_sqrtf>
 8007832:	f000 fa4e 	bl	8007cd2 <fabsf>
 8007836:	b124      	cbz	r4, 8007842 <__ieee754_powf+0xf6>
 8007838:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800783c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007840:	d117      	bne.n	8007872 <__ieee754_powf+0x126>
 8007842:	2d00      	cmp	r5, #0
 8007844:	bfbc      	itt	lt
 8007846:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800784a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800784e:	f1b8 0f00 	cmp.w	r8, #0
 8007852:	dacf      	bge.n	80077f4 <__ieee754_powf+0xa8>
 8007854:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007858:	ea54 0306 	orrs.w	r3, r4, r6
 800785c:	d104      	bne.n	8007868 <__ieee754_powf+0x11c>
 800785e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007862:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007866:	e7c5      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007868:	2e01      	cmp	r6, #1
 800786a:	d1c3      	bne.n	80077f4 <__ieee754_powf+0xa8>
 800786c:	eeb1 0a40 	vneg.f32	s0, s0
 8007870:	e7c0      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007872:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007876:	3801      	subs	r0, #1
 8007878:	ea56 0300 	orrs.w	r3, r6, r0
 800787c:	d104      	bne.n	8007888 <__ieee754_powf+0x13c>
 800787e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007882:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007886:	e7b5      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007888:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800788c:	dd6b      	ble.n	8007966 <__ieee754_powf+0x21a>
 800788e:	4b99      	ldr	r3, [pc, #612]	; (8007af4 <__ieee754_powf+0x3a8>)
 8007890:	429c      	cmp	r4, r3
 8007892:	dc06      	bgt.n	80078a2 <__ieee754_powf+0x156>
 8007894:	2d00      	cmp	r5, #0
 8007896:	daab      	bge.n	80077f0 <__ieee754_powf+0xa4>
 8007898:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007af8 <__ieee754_powf+0x3ac>
 800789c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80078a0:	e7a8      	b.n	80077f4 <__ieee754_powf+0xa8>
 80078a2:	4b96      	ldr	r3, [pc, #600]	; (8007afc <__ieee754_powf+0x3b0>)
 80078a4:	429c      	cmp	r4, r3
 80078a6:	dd02      	ble.n	80078ae <__ieee754_powf+0x162>
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	dcf5      	bgt.n	8007898 <__ieee754_powf+0x14c>
 80078ac:	e7a0      	b.n	80077f0 <__ieee754_powf+0xa4>
 80078ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80078b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80078b6:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007b00 <__ieee754_powf+0x3b4>
 80078ba:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80078be:	eee0 6a67 	vfms.f32	s13, s0, s15
 80078c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80078c6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80078ca:	ee20 7a00 	vmul.f32	s14, s0, s0
 80078ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007b04 <__ieee754_powf+0x3b8>
 80078d6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80078da:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007b08 <__ieee754_powf+0x3bc>
 80078de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80078e2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007b0c <__ieee754_powf+0x3c0>
 80078e6:	eef0 6a67 	vmov.f32	s13, s15
 80078ea:	eee0 6a07 	vfma.f32	s13, s0, s14
 80078ee:	ee16 3a90 	vmov	r3, s13
 80078f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80078f6:	f023 030f 	bic.w	r3, r3, #15
 80078fa:	ee00 3a90 	vmov	s1, r3
 80078fe:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007902:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007906:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800790a:	f025 050f 	bic.w	r5, r5, #15
 800790e:	ee07 5a10 	vmov	s14, r5
 8007912:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007916:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007922:	3e01      	subs	r6, #1
 8007924:	ea56 0200 	orrs.w	r2, r6, r0
 8007928:	ee07 5a10 	vmov	s14, r5
 800792c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007930:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007934:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007938:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800793c:	ee17 4a10 	vmov	r4, s14
 8007940:	bf08      	it	eq
 8007942:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007946:	2c00      	cmp	r4, #0
 8007948:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800794c:	f340 8184 	ble.w	8007c58 <__ieee754_powf+0x50c>
 8007950:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007954:	f340 80fc 	ble.w	8007b50 <__ieee754_powf+0x404>
 8007958:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007af8 <__ieee754_powf+0x3ac>
 800795c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007960:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007964:	e746      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007966:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800796a:	bf01      	itttt	eq
 800796c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007b10 <__ieee754_powf+0x3c4>
 8007970:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007974:	f06f 0217 	mvneq.w	r2, #23
 8007978:	ee17 4a90 	vmoveq	r4, s15
 800797c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007980:	bf18      	it	ne
 8007982:	2200      	movne	r2, #0
 8007984:	3b7f      	subs	r3, #127	; 0x7f
 8007986:	4413      	add	r3, r2
 8007988:	4a62      	ldr	r2, [pc, #392]	; (8007b14 <__ieee754_powf+0x3c8>)
 800798a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800798e:	4294      	cmp	r4, r2
 8007990:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007994:	dd06      	ble.n	80079a4 <__ieee754_powf+0x258>
 8007996:	4a60      	ldr	r2, [pc, #384]	; (8007b18 <__ieee754_powf+0x3cc>)
 8007998:	4294      	cmp	r4, r2
 800799a:	f340 80a4 	ble.w	8007ae6 <__ieee754_powf+0x39a>
 800799e:	3301      	adds	r3, #1
 80079a0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80079a4:	2400      	movs	r4, #0
 80079a6:	4a5d      	ldr	r2, [pc, #372]	; (8007b1c <__ieee754_powf+0x3d0>)
 80079a8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80079ac:	ee07 1a90 	vmov	s15, r1
 80079b0:	ed92 7a00 	vldr	s14, [r2]
 80079b4:	4a5a      	ldr	r2, [pc, #360]	; (8007b20 <__ieee754_powf+0x3d4>)
 80079b6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80079ba:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80079be:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80079c2:	1049      	asrs	r1, r1, #1
 80079c4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80079c8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80079cc:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80079d0:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80079d4:	ee06 1a10 	vmov	s12, r1
 80079d8:	ee65 4a26 	vmul.f32	s9, s10, s13
 80079dc:	ee36 7a47 	vsub.f32	s14, s12, s14
 80079e0:	ee14 7a90 	vmov	r7, s9
 80079e4:	4017      	ands	r7, r2
 80079e6:	ee05 7a90 	vmov	s11, r7
 80079ea:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80079ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079f2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007b24 <__ieee754_powf+0x3d8>
 80079f6:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80079fa:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80079fe:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007a02:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007b28 <__ieee754_powf+0x3dc>
 8007a06:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007a0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007b2c <__ieee754_powf+0x3e0>
 8007a0e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007a12:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007b00 <__ieee754_powf+0x3b4>
 8007a16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a1a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007b30 <__ieee754_powf+0x3e4>
 8007a1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007a22:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007b34 <__ieee754_powf+0x3e8>
 8007a26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a2a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007a2e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007a32:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007a36:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007a3a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007a3e:	eef0 7a45 	vmov.f32	s15, s10
 8007a42:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4a:	ee17 1a90 	vmov	r1, s15
 8007a4e:	4011      	ands	r1, r2
 8007a50:	ee07 1a90 	vmov	s15, r1
 8007a54:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007a58:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007a5c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007a60:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007a64:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007a68:	eeb0 6a47 	vmov.f32	s12, s14
 8007a6c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007a70:	ee16 1a10 	vmov	r1, s12
 8007a74:	4011      	ands	r1, r2
 8007a76:	ee06 1a90 	vmov	s13, r1
 8007a7a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007a7e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007b38 <__ieee754_powf+0x3ec>
 8007a82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007b3c <__ieee754_powf+0x3f0>
 8007a86:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007a8a:	ee06 1a10 	vmov	s12, r1
 8007a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a92:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007b40 <__ieee754_powf+0x3f4>
 8007a96:	492b      	ldr	r1, [pc, #172]	; (8007b44 <__ieee754_powf+0x3f8>)
 8007a98:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007a9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007aa0:	edd1 7a00 	vldr	s15, [r1]
 8007aa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007aa8:	ee07 3a90 	vmov	s15, r3
 8007aac:	4b26      	ldr	r3, [pc, #152]	; (8007b48 <__ieee754_powf+0x3fc>)
 8007aae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007ab2:	eef0 7a47 	vmov.f32	s15, s14
 8007ab6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007aba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007abe:	edd4 0a00 	vldr	s1, [r4]
 8007ac2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aca:	ee17 3a90 	vmov	r3, s15
 8007ace:	4013      	ands	r3, r2
 8007ad0:	ee07 3a90 	vmov	s15, r3
 8007ad4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007ad8:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007adc:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007ae0:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007ae4:	e70f      	b.n	8007906 <__ieee754_powf+0x1ba>
 8007ae6:	2401      	movs	r4, #1
 8007ae8:	e75d      	b.n	80079a6 <__ieee754_powf+0x25a>
 8007aea:	bf00      	nop
 8007aec:	08008178 	.word	0x08008178
 8007af0:	00000000 	.word	0x00000000
 8007af4:	3f7ffff7 	.word	0x3f7ffff7
 8007af8:	7149f2ca 	.word	0x7149f2ca
 8007afc:	3f800007 	.word	0x3f800007
 8007b00:	3eaaaaab 	.word	0x3eaaaaab
 8007b04:	3fb8aa3b 	.word	0x3fb8aa3b
 8007b08:	36eca570 	.word	0x36eca570
 8007b0c:	3fb8aa00 	.word	0x3fb8aa00
 8007b10:	4b800000 	.word	0x4b800000
 8007b14:	001cc471 	.word	0x001cc471
 8007b18:	005db3d6 	.word	0x005db3d6
 8007b1c:	080082e4 	.word	0x080082e4
 8007b20:	fffff000 	.word	0xfffff000
 8007b24:	3e6c3255 	.word	0x3e6c3255
 8007b28:	3e53f142 	.word	0x3e53f142
 8007b2c:	3e8ba305 	.word	0x3e8ba305
 8007b30:	3edb6db7 	.word	0x3edb6db7
 8007b34:	3f19999a 	.word	0x3f19999a
 8007b38:	3f76384f 	.word	0x3f76384f
 8007b3c:	3f763800 	.word	0x3f763800
 8007b40:	369dc3a0 	.word	0x369dc3a0
 8007b44:	080082f4 	.word	0x080082f4
 8007b48:	080082ec 	.word	0x080082ec
 8007b4c:	3338aa3c 	.word	0x3338aa3c
 8007b50:	f040 8092 	bne.w	8007c78 <__ieee754_powf+0x52c>
 8007b54:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007b4c <__ieee754_powf+0x400>
 8007b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b5c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007b60:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b68:	f73f aef6 	bgt.w	8007958 <__ieee754_powf+0x20c>
 8007b6c:	15db      	asrs	r3, r3, #23
 8007b6e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007b72:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b76:	4103      	asrs	r3, r0
 8007b78:	4423      	add	r3, r4
 8007b7a:	4949      	ldr	r1, [pc, #292]	; (8007ca0 <__ieee754_powf+0x554>)
 8007b7c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007b80:	3a7f      	subs	r2, #127	; 0x7f
 8007b82:	4111      	asrs	r1, r2
 8007b84:	ea23 0101 	bic.w	r1, r3, r1
 8007b88:	ee07 1a10 	vmov	s14, r1
 8007b8c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007b94:	f1c2 0217 	rsb	r2, r2, #23
 8007b98:	4110      	asrs	r0, r2
 8007b9a:	2c00      	cmp	r4, #0
 8007b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ba0:	bfb8      	it	lt
 8007ba2:	4240      	neglt	r0, r0
 8007ba4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007ba8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8007ca4 <__ieee754_powf+0x558>
 8007bac:	ee17 3a10 	vmov	r3, s14
 8007bb0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007bb4:	f023 030f 	bic.w	r3, r3, #15
 8007bb8:	ee07 3a10 	vmov	s14, r3
 8007bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bc0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007bc4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007ca8 <__ieee754_powf+0x55c>
 8007bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bcc:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007bd0:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007cac <__ieee754_powf+0x560>
 8007bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8007bd8:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007bdc:	eeb0 6a40 	vmov.f32	s12, s0
 8007be0:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007be4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007be8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007bec:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007cb0 <__ieee754_powf+0x564>
 8007bf0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007cb4 <__ieee754_powf+0x568>
 8007bf4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007bf8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007cb8 <__ieee754_powf+0x56c>
 8007bfc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007c00:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8007cbc <__ieee754_powf+0x570>
 8007c04:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007c08:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007cc0 <__ieee754_powf+0x574>
 8007c0c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007c10:	eeb0 6a40 	vmov.f32	s12, s0
 8007c14:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007c18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007c1c:	eeb0 7a46 	vmov.f32	s14, s12
 8007c20:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007c24:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007c28:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007c2c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c34:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007c38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007c3c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007c40:	ee10 3a10 	vmov	r3, s0
 8007c44:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007c48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c4c:	da1a      	bge.n	8007c84 <__ieee754_powf+0x538>
 8007c4e:	f000 f8b7 	bl	8007dc0 <scalbnf>
 8007c52:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007c56:	e5cd      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <__ieee754_powf+0x578>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	dd02      	ble.n	8007c64 <__ieee754_powf+0x518>
 8007c5e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8007cc8 <__ieee754_powf+0x57c>
 8007c62:	e67b      	b.n	800795c <__ieee754_powf+0x210>
 8007c64:	d108      	bne.n	8007c78 <__ieee754_powf+0x52c>
 8007c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c6a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c72:	f6ff af7b 	blt.w	8007b6c <__ieee754_powf+0x420>
 8007c76:	e7f2      	b.n	8007c5e <__ieee754_powf+0x512>
 8007c78:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007c7c:	f73f af76 	bgt.w	8007b6c <__ieee754_powf+0x420>
 8007c80:	2000      	movs	r0, #0
 8007c82:	e78f      	b.n	8007ba4 <__ieee754_powf+0x458>
 8007c84:	ee00 3a10 	vmov	s0, r3
 8007c88:	e7e3      	b.n	8007c52 <__ieee754_powf+0x506>
 8007c8a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c8e:	e5b1      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007c90:	eeb0 0a68 	vmov.f32	s0, s17
 8007c94:	e5ae      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007c96:	eeb0 0a48 	vmov.f32	s0, s16
 8007c9a:	e5ab      	b.n	80077f4 <__ieee754_powf+0xa8>
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	e590      	b.n	80077c2 <__ieee754_powf+0x76>
 8007ca0:	007fffff 	.word	0x007fffff
 8007ca4:	3f317218 	.word	0x3f317218
 8007ca8:	35bfbe8c 	.word	0x35bfbe8c
 8007cac:	3f317200 	.word	0x3f317200
 8007cb0:	3331bb4c 	.word	0x3331bb4c
 8007cb4:	b5ddea0e 	.word	0xb5ddea0e
 8007cb8:	388ab355 	.word	0x388ab355
 8007cbc:	bb360b61 	.word	0xbb360b61
 8007cc0:	3e2aaaab 	.word	0x3e2aaaab
 8007cc4:	43160000 	.word	0x43160000
 8007cc8:	0da24260 	.word	0x0da24260

08007ccc <__ieee754_sqrtf>:
 8007ccc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007cd0:	4770      	bx	lr

08007cd2 <fabsf>:
 8007cd2:	ee10 3a10 	vmov	r3, s0
 8007cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cda:	ee00 3a10 	vmov	s0, r3
 8007cde:	4770      	bx	lr

08007ce0 <finitef>:
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007ce6:	9801      	ldr	r0, [sp, #4]
 8007ce8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007cec:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007cf0:	bfac      	ite	ge
 8007cf2:	2000      	movge	r0, #0
 8007cf4:	2001      	movlt	r0, #1
 8007cf6:	b002      	add	sp, #8
 8007cf8:	4770      	bx	lr
	...

08007cfc <nanf>:
 8007cfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d04 <nanf+0x8>
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	7fc00000 	.word	0x7fc00000

08007d08 <rintf>:
 8007d08:	ee10 2a10 	vmov	r2, s0
 8007d0c:	b513      	push	{r0, r1, r4, lr}
 8007d0e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007d12:	397f      	subs	r1, #127	; 0x7f
 8007d14:	2916      	cmp	r1, #22
 8007d16:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007d1a:	dc47      	bgt.n	8007dac <rintf+0xa4>
 8007d1c:	b32b      	cbz	r3, 8007d6a <rintf+0x62>
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	ee10 3a10 	vmov	r3, s0
 8007d24:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8007d28:	da21      	bge.n	8007d6e <rintf+0x66>
 8007d2a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8007d2e:	425b      	negs	r3, r3
 8007d30:	4921      	ldr	r1, [pc, #132]	; (8007db8 <rintf+0xb0>)
 8007d32:	0a5b      	lsrs	r3, r3, #9
 8007d34:	0d12      	lsrs	r2, r2, #20
 8007d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d3a:	0512      	lsls	r2, r2, #20
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	edd1 6a00 	vldr	s13, [r1]
 8007d4a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8007d4e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007d52:	eddd 7a01 	vldr	s15, [sp, #4]
 8007d56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d5a:	ee17 3a90 	vmov	r3, s15
 8007d5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d62:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8007d66:	ee00 3a10 	vmov	s0, r3
 8007d6a:	b002      	add	sp, #8
 8007d6c:	bd10      	pop	{r4, pc}
 8007d6e:	4a13      	ldr	r2, [pc, #76]	; (8007dbc <rintf+0xb4>)
 8007d70:	410a      	asrs	r2, r1
 8007d72:	4213      	tst	r3, r2
 8007d74:	d0f9      	beq.n	8007d6a <rintf+0x62>
 8007d76:	0854      	lsrs	r4, r2, #1
 8007d78:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8007d7c:	d006      	beq.n	8007d8c <rintf+0x84>
 8007d7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007d82:	ea23 0304 	bic.w	r3, r3, r4
 8007d86:	fa42 f101 	asr.w	r1, r2, r1
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <rintf+0xb0>)
 8007d8e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8007d92:	ed90 7a00 	vldr	s14, [r0]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d9e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007da2:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007da6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007daa:	e7de      	b.n	8007d6a <rintf+0x62>
 8007dac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007db0:	d3db      	bcc.n	8007d6a <rintf+0x62>
 8007db2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007db6:	e7d8      	b.n	8007d6a <rintf+0x62>
 8007db8:	080082fc 	.word	0x080082fc
 8007dbc:	007fffff 	.word	0x007fffff

08007dc0 <scalbnf>:
 8007dc0:	ee10 3a10 	vmov	r3, s0
 8007dc4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007dc8:	d025      	beq.n	8007e16 <scalbnf+0x56>
 8007dca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007dce:	d302      	bcc.n	8007dd6 <scalbnf+0x16>
 8007dd0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007dd4:	4770      	bx	lr
 8007dd6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007dda:	d122      	bne.n	8007e22 <scalbnf+0x62>
 8007ddc:	4b2a      	ldr	r3, [pc, #168]	; (8007e88 <scalbnf+0xc8>)
 8007dde:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007e8c <scalbnf+0xcc>
 8007de2:	4298      	cmp	r0, r3
 8007de4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007de8:	db16      	blt.n	8007e18 <scalbnf+0x58>
 8007dea:	ee10 3a10 	vmov	r3, s0
 8007dee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007df2:	3a19      	subs	r2, #25
 8007df4:	4402      	add	r2, r0
 8007df6:	2afe      	cmp	r2, #254	; 0xfe
 8007df8:	dd15      	ble.n	8007e26 <scalbnf+0x66>
 8007dfa:	ee10 3a10 	vmov	r3, s0
 8007dfe:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007e90 <scalbnf+0xd0>
 8007e02:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007e94 <scalbnf+0xd4>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	eeb0 7a67 	vmov.f32	s14, s15
 8007e0c:	bfb8      	it	lt
 8007e0e:	eef0 7a66 	vmovlt.f32	s15, s13
 8007e12:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007e16:	4770      	bx	lr
 8007e18:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007e98 <scalbnf+0xd8>
 8007e1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007e20:	4770      	bx	lr
 8007e22:	0dd2      	lsrs	r2, r2, #23
 8007e24:	e7e6      	b.n	8007df4 <scalbnf+0x34>
 8007e26:	2a00      	cmp	r2, #0
 8007e28:	dd06      	ble.n	8007e38 <scalbnf+0x78>
 8007e2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e2e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007e32:	ee00 3a10 	vmov	s0, r3
 8007e36:	4770      	bx	lr
 8007e38:	f112 0f16 	cmn.w	r2, #22
 8007e3c:	da1a      	bge.n	8007e74 <scalbnf+0xb4>
 8007e3e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007e42:	4298      	cmp	r0, r3
 8007e44:	ee10 3a10 	vmov	r3, s0
 8007e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e4c:	dd0a      	ble.n	8007e64 <scalbnf+0xa4>
 8007e4e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007e90 <scalbnf+0xd0>
 8007e52:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007e94 <scalbnf+0xd4>
 8007e56:	eef0 7a40 	vmov.f32	s15, s0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	bf18      	it	ne
 8007e5e:	eeb0 0a47 	vmovne.f32	s0, s14
 8007e62:	e7db      	b.n	8007e1c <scalbnf+0x5c>
 8007e64:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007e98 <scalbnf+0xd8>
 8007e68:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007e9c <scalbnf+0xdc>
 8007e6c:	eef0 7a40 	vmov.f32	s15, s0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	e7f3      	b.n	8007e5c <scalbnf+0x9c>
 8007e74:	3219      	adds	r2, #25
 8007e76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e7a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007e7e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007ea0 <scalbnf+0xe0>
 8007e82:	ee07 3a10 	vmov	s14, r3
 8007e86:	e7c4      	b.n	8007e12 <scalbnf+0x52>
 8007e88:	ffff3cb0 	.word	0xffff3cb0
 8007e8c:	4c000000 	.word	0x4c000000
 8007e90:	7149f2ca 	.word	0x7149f2ca
 8007e94:	f149f2ca 	.word	0xf149f2ca
 8007e98:	0da24260 	.word	0x0da24260
 8007e9c:	8da24260 	.word	0x8da24260
 8007ea0:	33000000 	.word	0x33000000

08007ea4 <_init>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr

08007eb0 <_fini>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr
